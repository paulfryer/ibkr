// <auto-generated/>
#pragma warning disable CS0618
using IBKR.Api.V2.Generated.Kiota.Gw.Api.V1.Accounts.Documents;
using IBKR.Api.V2.Generated.Kiota.Gw.Api.V1.Accounts.Item;
using IBKR.Api.V2.Generated.Kiota.Gw.Api.V1.Accounts.LoginMessages;
using IBKR.Api.V2.Generated.Kiota.Gw.Api.V1.Accounts.Status;
using IBKR.Api.V2.Generated.Kiota.Models;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace IBKR.Api.V2.Generated.Kiota.Gw.Api.V1.Accounts
{
    /// <summary>
    /// Builds and executes requests for operations under \gw\api\v1\accounts
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class AccountsRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The documents property</summary>
        public global::IBKR.Api.V2.Generated.Kiota.Gw.Api.V1.Accounts.Documents.DocumentsRequestBuilder Documents
        {
            get => new global::IBKR.Api.V2.Generated.Kiota.Gw.Api.V1.Accounts.Documents.DocumentsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The loginMessages property</summary>
        public global::IBKR.Api.V2.Generated.Kiota.Gw.Api.V1.Accounts.LoginMessages.LoginMessagesRequestBuilder LoginMessages
        {
            get => new global::IBKR.Api.V2.Generated.Kiota.Gw.Api.V1.Accounts.LoginMessages.LoginMessagesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The status property</summary>
        public global::IBKR.Api.V2.Generated.Kiota.Gw.Api.V1.Accounts.Status.StatusRequestBuilder Status
        {
            get => new global::IBKR.Api.V2.Generated.Kiota.Gw.Api.V1.Accounts.Status.StatusRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Gets an item from the IBKR.Api.V2.Generated.Kiota.gw.api.v1.accounts.item collection</summary>
        /// <param name="position">Unique identifier of the item</param>
        /// <returns>A <see cref="global::IBKR.Api.V2.Generated.Kiota.Gw.Api.V1.Accounts.Item.WithAccountItemRequestBuilder"/></returns>
        public global::IBKR.Api.V2.Generated.Kiota.Gw.Api.V1.Accounts.Item.WithAccountItemRequestBuilder this[string position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("accountId", position);
                return new global::IBKR.Api.V2.Generated.Kiota.Gw.Api.V1.Accounts.Item.WithAccountItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::IBKR.Api.V2.Generated.Kiota.Gw.Api.V1.Accounts.AccountsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public AccountsRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/gw/api/v1/accounts{?accountId,externalId}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::IBKR.Api.V2.Generated.Kiota.Gw.Api.V1.Accounts.AccountsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public AccountsRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/gw/api/v1/accounts{?accountId,externalId}", rawUrl)
        {
        }
        /// <summary>
        /// Retrieve the application request and IBKR response data based on IBKR accountId or externalId. Only available for accounts that originate via API&lt;br&gt;&lt;br&gt;**Scope**: `accounts.read`&lt;br&gt;**Security Policy**: `HTTPS`
        /// </summary>
        /// <returns>A <see cref="global::IBKR.Api.V2.Generated.Kiota.Gw.Api.V1.Accounts.AccountsRequestBuilder.AccountsGetResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::IBKR.Api.V2.Generated.Kiota.Models.ProblemDetailResponse">When receiving a 400 status code</exception>
        /// <exception cref="global::IBKR.Api.V2.Generated.Kiota.Models.ProblemDetailResponse">When receiving a 401 status code</exception>
        /// <exception cref="global::IBKR.Api.V2.Generated.Kiota.Models.ProblemDetailResponse">When receiving a 403 status code</exception>
        /// <exception cref="global::IBKR.Api.V2.Generated.Kiota.Models.ProblemDetailResponse">When receiving a 500 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::IBKR.Api.V2.Generated.Kiota.Gw.Api.V1.Accounts.AccountsRequestBuilder.AccountsGetResponse?> GetAsAccountsGetResponseAsync(Action<RequestConfiguration<global::IBKR.Api.V2.Generated.Kiota.Gw.Api.V1.Accounts.AccountsRequestBuilder.AccountsRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::IBKR.Api.V2.Generated.Kiota.Gw.Api.V1.Accounts.AccountsRequestBuilder.AccountsGetResponse> GetAsAccountsGetResponseAsync(Action<RequestConfiguration<global::IBKR.Api.V2.Generated.Kiota.Gw.Api.V1.Accounts.AccountsRequestBuilder.AccountsRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "400", global::IBKR.Api.V2.Generated.Kiota.Models.ProblemDetailResponse.CreateFromDiscriminatorValue },
                { "401", global::IBKR.Api.V2.Generated.Kiota.Models.ProblemDetailResponse.CreateFromDiscriminatorValue },
                { "403", global::IBKR.Api.V2.Generated.Kiota.Models.ProblemDetailResponse.CreateFromDiscriminatorValue },
                { "500", global::IBKR.Api.V2.Generated.Kiota.Models.ProblemDetailResponse.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::IBKR.Api.V2.Generated.Kiota.Gw.Api.V1.Accounts.AccountsRequestBuilder.AccountsGetResponse>(requestInfo, global::IBKR.Api.V2.Generated.Kiota.Gw.Api.V1.Accounts.AccountsRequestBuilder.AccountsGetResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Retrieve the application request and IBKR response data based on IBKR accountId or externalId. Only available for accounts that originate via API&lt;br&gt;&lt;br&gt;**Scope**: `accounts.read`&lt;br&gt;**Security Policy**: `HTTPS`
        /// </summary>
        /// <returns>A <see cref="global::IBKR.Api.V2.Generated.Kiota.Gw.Api.V1.Accounts.AccountsRequestBuilder.AccountsResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::IBKR.Api.V2.Generated.Kiota.Models.ProblemDetailResponse">When receiving a 400 status code</exception>
        /// <exception cref="global::IBKR.Api.V2.Generated.Kiota.Models.ProblemDetailResponse">When receiving a 401 status code</exception>
        /// <exception cref="global::IBKR.Api.V2.Generated.Kiota.Models.ProblemDetailResponse">When receiving a 403 status code</exception>
        /// <exception cref="global::IBKR.Api.V2.Generated.Kiota.Models.ProblemDetailResponse">When receiving a 500 status code</exception>
        [Obsolete("This method is obsolete. Use GetAsAccountsGetResponseAsync instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::IBKR.Api.V2.Generated.Kiota.Gw.Api.V1.Accounts.AccountsRequestBuilder.AccountsResponse?> GetAsync(Action<RequestConfiguration<global::IBKR.Api.V2.Generated.Kiota.Gw.Api.V1.Accounts.AccountsRequestBuilder.AccountsRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::IBKR.Api.V2.Generated.Kiota.Gw.Api.V1.Accounts.AccountsRequestBuilder.AccountsResponse> GetAsync(Action<RequestConfiguration<global::IBKR.Api.V2.Generated.Kiota.Gw.Api.V1.Accounts.AccountsRequestBuilder.AccountsRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "400", global::IBKR.Api.V2.Generated.Kiota.Models.ProblemDetailResponse.CreateFromDiscriminatorValue },
                { "401", global::IBKR.Api.V2.Generated.Kiota.Models.ProblemDetailResponse.CreateFromDiscriminatorValue },
                { "403", global::IBKR.Api.V2.Generated.Kiota.Models.ProblemDetailResponse.CreateFromDiscriminatorValue },
                { "500", global::IBKR.Api.V2.Generated.Kiota.Models.ProblemDetailResponse.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::IBKR.Api.V2.Generated.Kiota.Gw.Api.V1.Accounts.AccountsRequestBuilder.AccountsResponse>(requestInfo, global::IBKR.Api.V2.Generated.Kiota.Gw.Api.V1.Accounts.AccountsRequestBuilder.AccountsResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Update information for an existing accountId&lt;br&gt;&lt;br&gt;**Scope**: `accounts.write`&lt;br&gt;**Security Policy**: `Signed JWT`
        /// </summary>
        /// <returns>A <see cref="global::IBKR.Api.V2.Generated.Kiota.Models.StatusResponse"/></returns>
        /// <param name="body">Binary request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::IBKR.Api.V2.Generated.Kiota.Models.ProblemDetailResponse">When receiving a 400 status code</exception>
        /// <exception cref="global::IBKR.Api.V2.Generated.Kiota.Models.ProblemDetailResponse">When receiving a 401 status code</exception>
        /// <exception cref="global::IBKR.Api.V2.Generated.Kiota.Models.ProblemDetailResponse">When receiving a 403 status code</exception>
        /// <exception cref="global::IBKR.Api.V2.Generated.Kiota.Models.ProblemDetailResponse">When receiving a 500 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::IBKR.Api.V2.Generated.Kiota.Models.StatusResponse?> PatchAsync(Stream body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::IBKR.Api.V2.Generated.Kiota.Models.StatusResponse> PatchAsync(Stream body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPatchRequestInformation(body, requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "400", global::IBKR.Api.V2.Generated.Kiota.Models.ProblemDetailResponse.CreateFromDiscriminatorValue },
                { "401", global::IBKR.Api.V2.Generated.Kiota.Models.ProblemDetailResponse.CreateFromDiscriminatorValue },
                { "403", global::IBKR.Api.V2.Generated.Kiota.Models.ProblemDetailResponse.CreateFromDiscriminatorValue },
                { "500", global::IBKR.Api.V2.Generated.Kiota.Models.ProblemDetailResponse.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::IBKR.Api.V2.Generated.Kiota.Models.StatusResponse>(requestInfo, global::IBKR.Api.V2.Generated.Kiota.Models.StatusResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Submit account application. This will create brokerage account for the end user.&lt;br&gt;&lt;br&gt;**Scope**: `accounts.write`&lt;br&gt;**Security Policy**: `Signed JWT`
        /// </summary>
        /// <returns>A <see cref="global::IBKR.Api.V2.Generated.Kiota.Models.StatusResponse"/></returns>
        /// <param name="body">Binary request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::IBKR.Api.V2.Generated.Kiota.Models.ProblemDetailResponse">When receiving a 400 status code</exception>
        /// <exception cref="global::IBKR.Api.V2.Generated.Kiota.Models.ProblemDetailResponse">When receiving a 401 status code</exception>
        /// <exception cref="global::IBKR.Api.V2.Generated.Kiota.Models.ProblemDetailResponse">When receiving a 403 status code</exception>
        /// <exception cref="global::IBKR.Api.V2.Generated.Kiota.Models.ProblemDetailResponse">When receiving a 500 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::IBKR.Api.V2.Generated.Kiota.Models.StatusResponse?> PostAsync(Stream body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::IBKR.Api.V2.Generated.Kiota.Models.StatusResponse> PostAsync(Stream body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "400", global::IBKR.Api.V2.Generated.Kiota.Models.ProblemDetailResponse.CreateFromDiscriminatorValue },
                { "401", global::IBKR.Api.V2.Generated.Kiota.Models.ProblemDetailResponse.CreateFromDiscriminatorValue },
                { "403", global::IBKR.Api.V2.Generated.Kiota.Models.ProblemDetailResponse.CreateFromDiscriminatorValue },
                { "500", global::IBKR.Api.V2.Generated.Kiota.Models.ProblemDetailResponse.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::IBKR.Api.V2.Generated.Kiota.Models.StatusResponse>(requestInfo, global::IBKR.Api.V2.Generated.Kiota.Models.StatusResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Retrieve the application request and IBKR response data based on IBKR accountId or externalId. Only available for accounts that originate via API&lt;br&gt;&lt;br&gt;**Scope**: `accounts.read`&lt;br&gt;**Security Policy**: `HTTPS`
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::IBKR.Api.V2.Generated.Kiota.Gw.Api.V1.Accounts.AccountsRequestBuilder.AccountsRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::IBKR.Api.V2.Generated.Kiota.Gw.Api.V1.Accounts.AccountsRequestBuilder.AccountsRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Update information for an existing accountId&lt;br&gt;&lt;br&gt;**Scope**: `accounts.write`&lt;br&gt;**Security Policy**: `Signed JWT`
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">Binary request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPatchRequestInformation(Stream body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPatchRequestInformation(Stream body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.PATCH, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetStreamContent(body, "application/jwt");
            return requestInfo;
        }
        /// <summary>
        /// Submit account application. This will create brokerage account for the end user.&lt;br&gt;&lt;br&gt;**Scope**: `accounts.write`&lt;br&gt;**Security Policy**: `Signed JWT`
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">Binary request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(Stream body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(Stream body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetStreamContent(body, "application/jwt");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::IBKR.Api.V2.Generated.Kiota.Gw.Api.V1.Accounts.AccountsRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::IBKR.Api.V2.Generated.Kiota.Gw.Api.V1.Accounts.AccountsRequestBuilder WithUrl(string rawUrl)
        {
            return new global::IBKR.Api.V2.Generated.Kiota.Gw.Api.V1.Accounts.AccountsRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::IBKR.Api.V2.Generated.Kiota.Models.FileDetailsResponse"/>, <see cref="global::IBKR.Api.V2.Generated.Kiota.Models.ResponseFileResponse"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class AccountsGetResponse : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="global::IBKR.Api.V2.Generated.Kiota.Models.FileDetailsResponse"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::IBKR.Api.V2.Generated.Kiota.Models.FileDetailsResponse? FileDetailsResponse { get; set; }
#nullable restore
#else
            public global::IBKR.Api.V2.Generated.Kiota.Models.FileDetailsResponse FileDetailsResponse { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::IBKR.Api.V2.Generated.Kiota.Models.ResponseFileResponse"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::IBKR.Api.V2.Generated.Kiota.Models.ResponseFileResponse? ResponseFileResponse { get; set; }
#nullable restore
#else
            public global::IBKR.Api.V2.Generated.Kiota.Models.ResponseFileResponse ResponseFileResponse { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::IBKR.Api.V2.Generated.Kiota.Gw.Api.V1.Accounts.AccountsRequestBuilder.AccountsGetResponse"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::IBKR.Api.V2.Generated.Kiota.Gw.Api.V1.Accounts.AccountsRequestBuilder.AccountsGetResponse CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var mappingValue = parseNode.GetChildNode("")?.GetStringValue();
                var result = new global::IBKR.Api.V2.Generated.Kiota.Gw.Api.V1.Accounts.AccountsRequestBuilder.AccountsGetResponse();
                if("FileDetailsResponse".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.FileDetailsResponse = new global::IBKR.Api.V2.Generated.Kiota.Models.FileDetailsResponse();
                }
                else if("ResponseFileResponse".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.ResponseFileResponse = new global::IBKR.Api.V2.Generated.Kiota.Models.ResponseFileResponse();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(FileDetailsResponse != null)
                {
                    return FileDetailsResponse.GetFieldDeserializers();
                }
                else if(ResponseFileResponse != null)
                {
                    return ResponseFileResponse.GetFieldDeserializers();
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(FileDetailsResponse != null)
                {
                    writer.WriteObjectValue<global::IBKR.Api.V2.Generated.Kiota.Models.FileDetailsResponse>(null, FileDetailsResponse);
                }
                else if(ResponseFileResponse != null)
                {
                    writer.WriteObjectValue<global::IBKR.Api.V2.Generated.Kiota.Models.ResponseFileResponse>(null, ResponseFileResponse);
                }
            }
        }
        /// <summary>
        /// Retrieve the application request and IBKR response data based on IBKR accountId or externalId. Only available for accounts that originate via API&lt;br&gt;&lt;br&gt;**Scope**: `accounts.read`&lt;br&gt;**Security Policy**: `HTTPS`
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class AccountsRequestBuilderGetQueryParameters 
        {
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("accountId")]
            public string? AccountId { get; set; }
#nullable restore
#else
            [QueryParameter("accountId")]
            public string AccountId { get; set; }
#endif
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("externalId")]
            public string? ExternalId { get; set; }
#nullable restore
#else
            [QueryParameter("externalId")]
            public string ExternalId { get; set; }
#endif
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class AccountsRequestBuilderGetRequestConfiguration : RequestConfiguration<global::IBKR.Api.V2.Generated.Kiota.Gw.Api.V1.Accounts.AccountsRequestBuilder.AccountsRequestBuilderGetQueryParameters>
        {
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class AccountsRequestBuilderPatchRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class AccountsRequestBuilderPostRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::IBKR.Api.V2.Generated.Kiota.Models.FileDetailsResponse"/>, <see cref="global::IBKR.Api.V2.Generated.Kiota.Models.ResponseFileResponse"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class AccountsResponse : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="global::IBKR.Api.V2.Generated.Kiota.Models.FileDetailsResponse"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::IBKR.Api.V2.Generated.Kiota.Models.FileDetailsResponse? FileDetailsResponse { get; set; }
#nullable restore
#else
            public global::IBKR.Api.V2.Generated.Kiota.Models.FileDetailsResponse FileDetailsResponse { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::IBKR.Api.V2.Generated.Kiota.Models.ResponseFileResponse"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::IBKR.Api.V2.Generated.Kiota.Models.ResponseFileResponse? ResponseFileResponse { get; set; }
#nullable restore
#else
            public global::IBKR.Api.V2.Generated.Kiota.Models.ResponseFileResponse ResponseFileResponse { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::IBKR.Api.V2.Generated.Kiota.Gw.Api.V1.Accounts.AccountsRequestBuilder.AccountsResponse"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::IBKR.Api.V2.Generated.Kiota.Gw.Api.V1.Accounts.AccountsRequestBuilder.AccountsResponse CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var mappingValue = parseNode.GetChildNode("")?.GetStringValue();
                var result = new global::IBKR.Api.V2.Generated.Kiota.Gw.Api.V1.Accounts.AccountsRequestBuilder.AccountsResponse();
                if("FileDetailsResponse".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.FileDetailsResponse = new global::IBKR.Api.V2.Generated.Kiota.Models.FileDetailsResponse();
                }
                else if("ResponseFileResponse".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.ResponseFileResponse = new global::IBKR.Api.V2.Generated.Kiota.Models.ResponseFileResponse();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(FileDetailsResponse != null)
                {
                    return FileDetailsResponse.GetFieldDeserializers();
                }
                else if(ResponseFileResponse != null)
                {
                    return ResponseFileResponse.GetFieldDeserializers();
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(FileDetailsResponse != null)
                {
                    writer.WriteObjectValue<global::IBKR.Api.V2.Generated.Kiota.Models.FileDetailsResponse>(null, FileDetailsResponse);
                }
                else if(ResponseFileResponse != null)
                {
                    writer.WriteObjectValue<global::IBKR.Api.V2.Generated.Kiota.Models.ResponseFileResponse>(null, ResponseFileResponse);
                }
            }
        }
    }
}
#pragma warning restore CS0618
