// <auto-generated/>
#pragma warning disable CS0618
using IBKR.Api.V2.Generated.Kiota.Models;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace IBKR.Api.V2.Generated.Kiota.Iserver.Account.Item.Order.Item
{
    /// <summary>
    /// Builds and executes requests for operations under \iserver\account\{accountId}\order\{orderId}
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class WithOrderItemRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::IBKR.Api.V2.Generated.Kiota.Iserver.Account.Item.Order.Item.WithOrderItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithOrderItemRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/iserver/account/{accountId}/order/{orderId}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::IBKR.Api.V2.Generated.Kiota.Iserver.Account.Item.Order.Item.WithOrderItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithOrderItemRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/iserver/account/{accountId}/order/{orderId}", rawUrl)
        {
        }
        /// <summary>
        /// Cancel an existing, unfilled order.
        /// </summary>
        /// <returns>A <see cref="global::IBKR.Api.V2.Generated.Kiota.Iserver.Account.Item.Order.Item.WithOrderItemRequestBuilder.WithOrderDeleteResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::IBKR.Api.V2.Generated.Kiota.Models.ErrorResponse">When receiving a 400 status code</exception>
        /// <exception cref="global::IBKR.Api.V2.Generated.Kiota.Models.ErrorOnlyResponse">When receiving a 500 status code</exception>
        /// <exception cref="global::IBKR.Api.V2.Generated.Kiota.Models.ErrorResponse">When receiving a 503 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::IBKR.Api.V2.Generated.Kiota.Iserver.Account.Item.Order.Item.WithOrderItemRequestBuilder.WithOrderDeleteResponse?> DeleteAsWithOrderDeleteResponseAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::IBKR.Api.V2.Generated.Kiota.Iserver.Account.Item.Order.Item.WithOrderItemRequestBuilder.WithOrderDeleteResponse> DeleteAsWithOrderDeleteResponseAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToDeleteRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "400", global::IBKR.Api.V2.Generated.Kiota.Models.ErrorResponse.CreateFromDiscriminatorValue },
                { "500", global::IBKR.Api.V2.Generated.Kiota.Models.ErrorOnlyResponse.CreateFromDiscriminatorValue },
                { "503", global::IBKR.Api.V2.Generated.Kiota.Models.ErrorResponse.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::IBKR.Api.V2.Generated.Kiota.Iserver.Account.Item.Order.Item.WithOrderItemRequestBuilder.WithOrderDeleteResponse>(requestInfo, global::IBKR.Api.V2.Generated.Kiota.Iserver.Account.Item.Order.Item.WithOrderItemRequestBuilder.WithOrderDeleteResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Cancel an existing, unfilled order.
        /// </summary>
        /// <returns>A <see cref="global::IBKR.Api.V2.Generated.Kiota.Iserver.Account.Item.Order.Item.WithOrderItemRequestBuilder.WithOrderResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::IBKR.Api.V2.Generated.Kiota.Models.ErrorResponse">When receiving a 400 status code</exception>
        /// <exception cref="global::IBKR.Api.V2.Generated.Kiota.Models.ErrorOnlyResponse">When receiving a 500 status code</exception>
        /// <exception cref="global::IBKR.Api.V2.Generated.Kiota.Models.ErrorResponse">When receiving a 503 status code</exception>
        [Obsolete("This method is obsolete. Use DeleteAsWithOrderDeleteResponseAsync instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::IBKR.Api.V2.Generated.Kiota.Iserver.Account.Item.Order.Item.WithOrderItemRequestBuilder.WithOrderResponse?> DeleteAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::IBKR.Api.V2.Generated.Kiota.Iserver.Account.Item.Order.Item.WithOrderItemRequestBuilder.WithOrderResponse> DeleteAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToDeleteRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "400", global::IBKR.Api.V2.Generated.Kiota.Models.ErrorResponse.CreateFromDiscriminatorValue },
                { "500", global::IBKR.Api.V2.Generated.Kiota.Models.ErrorOnlyResponse.CreateFromDiscriminatorValue },
                { "503", global::IBKR.Api.V2.Generated.Kiota.Models.ErrorResponse.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::IBKR.Api.V2.Generated.Kiota.Iserver.Account.Item.Order.Item.WithOrderItemRequestBuilder.WithOrderResponse>(requestInfo, global::IBKR.Api.V2.Generated.Kiota.Iserver.Account.Item.Order.Item.WithOrderItemRequestBuilder.WithOrderResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Modify an existing, unfilled order.
        /// </summary>
        /// <returns>A <see cref="global::IBKR.Api.V2.Generated.Kiota.Iserver.Account.Item.Order.Item.WithOrderItemRequestBuilder.WithOrderPostResponse"/></returns>
        /// <param name="body">A single order ticket.</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::IBKR.Api.V2.Generated.Kiota.Models.ErrorResponse">When receiving a 400 status code</exception>
        /// <exception cref="global::IBKR.Api.V2.Generated.Kiota.Models.ErrorOnlyResponse">When receiving a 500 status code</exception>
        /// <exception cref="global::IBKR.Api.V2.Generated.Kiota.Models.ErrorResponse">When receiving a 503 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::IBKR.Api.V2.Generated.Kiota.Iserver.Account.Item.Order.Item.WithOrderItemRequestBuilder.WithOrderPostResponse?> PostAsWithOrderPostResponseAsync(global::IBKR.Api.V2.Generated.Kiota.Models.SingleOrderSubmissionRequest body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::IBKR.Api.V2.Generated.Kiota.Iserver.Account.Item.Order.Item.WithOrderItemRequestBuilder.WithOrderPostResponse> PostAsWithOrderPostResponseAsync(global::IBKR.Api.V2.Generated.Kiota.Models.SingleOrderSubmissionRequest body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "400", global::IBKR.Api.V2.Generated.Kiota.Models.ErrorResponse.CreateFromDiscriminatorValue },
                { "500", global::IBKR.Api.V2.Generated.Kiota.Models.ErrorOnlyResponse.CreateFromDiscriminatorValue },
                { "503", global::IBKR.Api.V2.Generated.Kiota.Models.ErrorResponse.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::IBKR.Api.V2.Generated.Kiota.Iserver.Account.Item.Order.Item.WithOrderItemRequestBuilder.WithOrderPostResponse>(requestInfo, global::IBKR.Api.V2.Generated.Kiota.Iserver.Account.Item.Order.Item.WithOrderItemRequestBuilder.WithOrderPostResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Modify an existing, unfilled order.
        /// </summary>
        /// <returns>A <see cref="global::IBKR.Api.V2.Generated.Kiota.Iserver.Account.Item.Order.Item.WithOrderItemRequestBuilder.WithOrderResponse"/></returns>
        /// <param name="body">A single order ticket.</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::IBKR.Api.V2.Generated.Kiota.Models.ErrorResponse">When receiving a 400 status code</exception>
        /// <exception cref="global::IBKR.Api.V2.Generated.Kiota.Models.ErrorOnlyResponse">When receiving a 500 status code</exception>
        /// <exception cref="global::IBKR.Api.V2.Generated.Kiota.Models.ErrorResponse">When receiving a 503 status code</exception>
        [Obsolete("This method is obsolete. Use PostAsWithOrderPostResponseAsync instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::IBKR.Api.V2.Generated.Kiota.Iserver.Account.Item.Order.Item.WithOrderItemRequestBuilder.WithOrderResponse?> PostAsync(global::IBKR.Api.V2.Generated.Kiota.Models.SingleOrderSubmissionRequest body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::IBKR.Api.V2.Generated.Kiota.Iserver.Account.Item.Order.Item.WithOrderItemRequestBuilder.WithOrderResponse> PostAsync(global::IBKR.Api.V2.Generated.Kiota.Models.SingleOrderSubmissionRequest body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "400", global::IBKR.Api.V2.Generated.Kiota.Models.ErrorResponse.CreateFromDiscriminatorValue },
                { "500", global::IBKR.Api.V2.Generated.Kiota.Models.ErrorOnlyResponse.CreateFromDiscriminatorValue },
                { "503", global::IBKR.Api.V2.Generated.Kiota.Models.ErrorResponse.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::IBKR.Api.V2.Generated.Kiota.Iserver.Account.Item.Order.Item.WithOrderItemRequestBuilder.WithOrderResponse>(requestInfo, global::IBKR.Api.V2.Generated.Kiota.Iserver.Account.Item.Order.Item.WithOrderItemRequestBuilder.WithOrderResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Cancel an existing, unfilled order.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToDeleteRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToDeleteRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.DELETE, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Modify an existing, unfilled order.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">A single order ticket.</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::IBKR.Api.V2.Generated.Kiota.Models.SingleOrderSubmissionRequest body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::IBKR.Api.V2.Generated.Kiota.Models.SingleOrderSubmissionRequest body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::IBKR.Api.V2.Generated.Kiota.Iserver.Account.Item.Order.Item.WithOrderItemRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::IBKR.Api.V2.Generated.Kiota.Iserver.Account.Item.Order.Item.WithOrderItemRequestBuilder WithUrl(string rawUrl)
        {
            return new global::IBKR.Api.V2.Generated.Kiota.Iserver.Account.Item.Order.Item.WithOrderItemRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::IBKR.Api.V2.Generated.Kiota.Models.OrderCancelSuccess"/>, <see cref="global::IBKR.Api.V2.Generated.Kiota.Models.OrderSubmitError"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WithOrderDeleteResponse : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="global::IBKR.Api.V2.Generated.Kiota.Models.OrderCancelSuccess"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::IBKR.Api.V2.Generated.Kiota.Models.OrderCancelSuccess? OrderCancelSuccess { get; set; }
#nullable restore
#else
            public global::IBKR.Api.V2.Generated.Kiota.Models.OrderCancelSuccess OrderCancelSuccess { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::IBKR.Api.V2.Generated.Kiota.Models.OrderSubmitError"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::IBKR.Api.V2.Generated.Kiota.Models.OrderSubmitError? OrderSubmitError { get; set; }
#nullable restore
#else
            public global::IBKR.Api.V2.Generated.Kiota.Models.OrderSubmitError OrderSubmitError { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::IBKR.Api.V2.Generated.Kiota.Iserver.Account.Item.Order.Item.WithOrderItemRequestBuilder.WithOrderDeleteResponse"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::IBKR.Api.V2.Generated.Kiota.Iserver.Account.Item.Order.Item.WithOrderItemRequestBuilder.WithOrderDeleteResponse CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var mappingValue = parseNode.GetChildNode("")?.GetStringValue();
                var result = new global::IBKR.Api.V2.Generated.Kiota.Iserver.Account.Item.Order.Item.WithOrderItemRequestBuilder.WithOrderDeleteResponse();
                if("orderCancelSuccess".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.OrderCancelSuccess = new global::IBKR.Api.V2.Generated.Kiota.Models.OrderCancelSuccess();
                }
                else if("orderSubmitError".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.OrderSubmitError = new global::IBKR.Api.V2.Generated.Kiota.Models.OrderSubmitError();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(OrderCancelSuccess != null)
                {
                    return OrderCancelSuccess.GetFieldDeserializers();
                }
                else if(OrderSubmitError != null)
                {
                    return OrderSubmitError.GetFieldDeserializers();
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(OrderCancelSuccess != null)
                {
                    writer.WriteObjectValue<global::IBKR.Api.V2.Generated.Kiota.Models.OrderCancelSuccess>(null, OrderCancelSuccess);
                }
                else if(OrderSubmitError != null)
                {
                    writer.WriteObjectValue<global::IBKR.Api.V2.Generated.Kiota.Models.OrderSubmitError>(null, OrderSubmitError);
                }
            }
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WithOrderItemRequestBuilderDeleteRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WithOrderItemRequestBuilderPostRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::IBKR.Api.V2.Generated.Kiota.Models.AdvancedOrderReject"/>, <see cref="global::IBKR.Api.V2.Generated.Kiota.Models.OrderSubmitError"/>, List&lt;global::IBKR.Api.V2.Generated.Kiota.Models.WithOrderPostResponseMember1&gt;, List&lt;global::IBKR.Api.V2.Generated.Kiota.Models.WithOrderPostResponseMember2&gt;
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WithOrderPostResponse : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="global::IBKR.Api.V2.Generated.Kiota.Models.AdvancedOrderReject"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::IBKR.Api.V2.Generated.Kiota.Models.AdvancedOrderReject? AdvancedOrderReject { get; set; }
#nullable restore
#else
            public global::IBKR.Api.V2.Generated.Kiota.Models.AdvancedOrderReject AdvancedOrderReject { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::IBKR.Api.V2.Generated.Kiota.Models.OrderSubmitError"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::IBKR.Api.V2.Generated.Kiota.Models.OrderSubmitError? OrderSubmitError { get; set; }
#nullable restore
#else
            public global::IBKR.Api.V2.Generated.Kiota.Models.OrderSubmitError OrderSubmitError { get; set; }
#endif
            /// <summary>Composed type representation for type List&lt;global::IBKR.Api.V2.Generated.Kiota.Models.WithOrderPostResponseMember1&gt;</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public List<global::IBKR.Api.V2.Generated.Kiota.Models.WithOrderPostResponseMember1>? WithOrderPostResponseMember1 { get; set; }
#nullable restore
#else
            public List<global::IBKR.Api.V2.Generated.Kiota.Models.WithOrderPostResponseMember1> WithOrderPostResponseMember1 { get; set; }
#endif
            /// <summary>Composed type representation for type List&lt;global::IBKR.Api.V2.Generated.Kiota.Models.WithOrderPostResponseMember2&gt;</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public List<global::IBKR.Api.V2.Generated.Kiota.Models.WithOrderPostResponseMember2>? WithOrderPostResponseMember2 { get; set; }
#nullable restore
#else
            public List<global::IBKR.Api.V2.Generated.Kiota.Models.WithOrderPostResponseMember2> WithOrderPostResponseMember2 { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::IBKR.Api.V2.Generated.Kiota.Iserver.Account.Item.Order.Item.WithOrderItemRequestBuilder.WithOrderPostResponse"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::IBKR.Api.V2.Generated.Kiota.Iserver.Account.Item.Order.Item.WithOrderItemRequestBuilder.WithOrderPostResponse CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var mappingValue = parseNode.GetChildNode("")?.GetStringValue();
                var result = new global::IBKR.Api.V2.Generated.Kiota.Iserver.Account.Item.Order.Item.WithOrderItemRequestBuilder.WithOrderPostResponse();
                if("advancedOrderReject".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.AdvancedOrderReject = new global::IBKR.Api.V2.Generated.Kiota.Models.AdvancedOrderReject();
                }
                else if("orderSubmitError".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.OrderSubmitError = new global::IBKR.Api.V2.Generated.Kiota.Models.OrderSubmitError();
                }
                else if(parseNode.GetCollectionOfObjectValues<global::IBKR.Api.V2.Generated.Kiota.Models.WithOrderPostResponseMember1>(global::IBKR.Api.V2.Generated.Kiota.Models.WithOrderPostResponseMember1.CreateFromDiscriminatorValue)?.AsList() is List<global::IBKR.Api.V2.Generated.Kiota.Models.WithOrderPostResponseMember1> withOrderPostResponseMember1Value)
                {
                    result.WithOrderPostResponseMember1 = withOrderPostResponseMember1Value;
                }
                else if(parseNode.GetCollectionOfObjectValues<global::IBKR.Api.V2.Generated.Kiota.Models.WithOrderPostResponseMember2>(global::IBKR.Api.V2.Generated.Kiota.Models.WithOrderPostResponseMember2.CreateFromDiscriminatorValue)?.AsList() is List<global::IBKR.Api.V2.Generated.Kiota.Models.WithOrderPostResponseMember2> withOrderPostResponseMember2Value)
                {
                    result.WithOrderPostResponseMember2 = withOrderPostResponseMember2Value;
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(AdvancedOrderReject != null)
                {
                    return AdvancedOrderReject.GetFieldDeserializers();
                }
                else if(OrderSubmitError != null)
                {
                    return OrderSubmitError.GetFieldDeserializers();
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(AdvancedOrderReject != null)
                {
                    writer.WriteObjectValue<global::IBKR.Api.V2.Generated.Kiota.Models.AdvancedOrderReject>(null, AdvancedOrderReject);
                }
                else if(OrderSubmitError != null)
                {
                    writer.WriteObjectValue<global::IBKR.Api.V2.Generated.Kiota.Models.OrderSubmitError>(null, OrderSubmitError);
                }
                else if(WithOrderPostResponseMember1 != null)
                {
                    writer.WriteCollectionOfObjectValues<global::IBKR.Api.V2.Generated.Kiota.Models.WithOrderPostResponseMember1>(null, WithOrderPostResponseMember1);
                }
                else if(WithOrderPostResponseMember2 != null)
                {
                    writer.WriteCollectionOfObjectValues<global::IBKR.Api.V2.Generated.Kiota.Models.WithOrderPostResponseMember2>(null, WithOrderPostResponseMember2);
                }
            }
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::IBKR.Api.V2.Generated.Kiota.Models.OrderCancelSuccess"/>, <see cref="global::IBKR.Api.V2.Generated.Kiota.Models.OrderSubmitError"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WithOrderResponse : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="global::IBKR.Api.V2.Generated.Kiota.Models.OrderCancelSuccess"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::IBKR.Api.V2.Generated.Kiota.Models.OrderCancelSuccess? OrderCancelSuccess { get; set; }
#nullable restore
#else
            public global::IBKR.Api.V2.Generated.Kiota.Models.OrderCancelSuccess OrderCancelSuccess { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::IBKR.Api.V2.Generated.Kiota.Models.OrderSubmitError"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::IBKR.Api.V2.Generated.Kiota.Models.OrderSubmitError? OrderSubmitError { get; set; }
#nullable restore
#else
            public global::IBKR.Api.V2.Generated.Kiota.Models.OrderSubmitError OrderSubmitError { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::IBKR.Api.V2.Generated.Kiota.Iserver.Account.Item.Order.Item.WithOrderItemRequestBuilder.WithOrderResponse"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::IBKR.Api.V2.Generated.Kiota.Iserver.Account.Item.Order.Item.WithOrderItemRequestBuilder.WithOrderResponse CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var mappingValue = parseNode.GetChildNode("")?.GetStringValue();
                var result = new global::IBKR.Api.V2.Generated.Kiota.Iserver.Account.Item.Order.Item.WithOrderItemRequestBuilder.WithOrderResponse();
                if("orderCancelSuccess".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.OrderCancelSuccess = new global::IBKR.Api.V2.Generated.Kiota.Models.OrderCancelSuccess();
                }
                else if("orderSubmitError".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.OrderSubmitError = new global::IBKR.Api.V2.Generated.Kiota.Models.OrderSubmitError();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(OrderCancelSuccess != null)
                {
                    return OrderCancelSuccess.GetFieldDeserializers();
                }
                else if(OrderSubmitError != null)
                {
                    return OrderSubmitError.GetFieldDeserializers();
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(OrderCancelSuccess != null)
                {
                    writer.WriteObjectValue<global::IBKR.Api.V2.Generated.Kiota.Models.OrderCancelSuccess>(null, OrderCancelSuccess);
                }
                else if(OrderSubmitError != null)
                {
                    writer.WriteObjectValue<global::IBKR.Api.V2.Generated.Kiota.Models.OrderSubmitError>(null, OrderSubmitError);
                }
            }
        }
    }
}
#pragma warning restore CS0618
