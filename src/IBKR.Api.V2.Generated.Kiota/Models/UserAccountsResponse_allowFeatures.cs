// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace IBKR.Api.V2.Generated.Kiota.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class UserAccountsResponse_allowFeatures : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The allowCrypto property</summary>
        public bool? AllowCrypto { get; set; }
        /// <summary>The allowDynAccount property</summary>
        public bool? AllowDynAccount { get; set; }
        /// <summary>The allowedAssetTypes property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AllowedAssetTypes { get; set; }
#nullable restore
#else
        public string AllowedAssetTypes { get; set; }
#endif
        /// <summary>The allowEventContract property</summary>
        public bool? AllowEventContract { get; set; }
        /// <summary>The allowEventTrading property</summary>
        public bool? AllowEventTrading { get; set; }
        /// <summary>The allowFinancialLens property</summary>
        public bool? AllowFinancialLens { get; set; }
        /// <summary>The allowFXConv property</summary>
        public bool? AllowFXConv { get; set; }
        /// <summary>The allowMTA property</summary>
        public bool? AllowMTA { get; set; }
        /// <summary>The allowTypeAhead property</summary>
        public bool? AllowTypeAhead { get; set; }
        /// <summary>The debugPnl property</summary>
        public bool? DebugPnl { get; set; }
        /// <summary>The liteUser property</summary>
        public bool? LiteUser { get; set; }
        /// <summary>The research property</summary>
        public bool? Research { get; set; }
        /// <summary>The showEUCostReport property</summary>
        public bool? ShowEUCostReport { get; set; }
        /// <summary>The showGFIS property</summary>
        public bool? ShowGFIS { get; set; }
        /// <summary>The showImpactDashboard property</summary>
        public bool? ShowImpactDashboard { get; set; }
        /// <summary>The showTaxOpt property</summary>
        public bool? ShowTaxOpt { get; set; }
        /// <summary>The showWebNews property</summary>
        public bool? ShowWebNews { get; set; }
        /// <summary>The snapshotRefreshTimeout property</summary>
        public long? SnapshotRefreshTimeout { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::IBKR.Api.V2.Generated.Kiota.Models.UserAccountsResponse_allowFeatures"/> and sets the default values.
        /// </summary>
        public UserAccountsResponse_allowFeatures()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::IBKR.Api.V2.Generated.Kiota.Models.UserAccountsResponse_allowFeatures"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::IBKR.Api.V2.Generated.Kiota.Models.UserAccountsResponse_allowFeatures CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::IBKR.Api.V2.Generated.Kiota.Models.UserAccountsResponse_allowFeatures();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "allowCrypto", n => { AllowCrypto = n.GetBoolValue(); } },
                { "allowDynAccount", n => { AllowDynAccount = n.GetBoolValue(); } },
                { "allowEventContract", n => { AllowEventContract = n.GetBoolValue(); } },
                { "allowEventTrading", n => { AllowEventTrading = n.GetBoolValue(); } },
                { "allowFXConv", n => { AllowFXConv = n.GetBoolValue(); } },
                { "allowFinancialLens", n => { AllowFinancialLens = n.GetBoolValue(); } },
                { "allowMTA", n => { AllowMTA = n.GetBoolValue(); } },
                { "allowTypeAhead", n => { AllowTypeAhead = n.GetBoolValue(); } },
                { "allowedAssetTypes", n => { AllowedAssetTypes = n.GetStringValue(); } },
                { "debugPnl", n => { DebugPnl = n.GetBoolValue(); } },
                { "liteUser", n => { LiteUser = n.GetBoolValue(); } },
                { "research", n => { Research = n.GetBoolValue(); } },
                { "showEUCostReport", n => { ShowEUCostReport = n.GetBoolValue(); } },
                { "showGFIS", n => { ShowGFIS = n.GetBoolValue(); } },
                { "showImpactDashboard", n => { ShowImpactDashboard = n.GetBoolValue(); } },
                { "showTaxOpt", n => { ShowTaxOpt = n.GetBoolValue(); } },
                { "showWebNews", n => { ShowWebNews = n.GetBoolValue(); } },
                { "snapshotRefreshTimeout", n => { SnapshotRefreshTimeout = n.GetLongValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("allowCrypto", AllowCrypto);
            writer.WriteBoolValue("allowDynAccount", AllowDynAccount);
            writer.WriteStringValue("allowedAssetTypes", AllowedAssetTypes);
            writer.WriteBoolValue("allowEventContract", AllowEventContract);
            writer.WriteBoolValue("allowEventTrading", AllowEventTrading);
            writer.WriteBoolValue("allowFinancialLens", AllowFinancialLens);
            writer.WriteBoolValue("allowFXConv", AllowFXConv);
            writer.WriteBoolValue("allowMTA", AllowMTA);
            writer.WriteBoolValue("allowTypeAhead", AllowTypeAhead);
            writer.WriteBoolValue("debugPnl", DebugPnl);
            writer.WriteBoolValue("liteUser", LiteUser);
            writer.WriteBoolValue("research", Research);
            writer.WriteBoolValue("showEUCostReport", ShowEUCostReport);
            writer.WriteBoolValue("showGFIS", ShowGFIS);
            writer.WriteBoolValue("showImpactDashboard", ShowImpactDashboard);
            writer.WriteBoolValue("showTaxOpt", ShowTaxOpt);
            writer.WriteBoolValue("showWebNews", ShowWebNews);
            writer.WriteLongValue("snapshotRefreshTimeout", SnapshotRefreshTimeout);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
