// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace IBKR.Api.V2.Generated.Kiota.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Presets : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Interactive Brokers supports two forms of allocation methods. Allocation methods that have calculations completed by Interactive Brokers, and a set of allocation methods calculated by the user and then specified. IB-computed allocation methods:  * `A` - Available Equity  * `E` - Equal  * `N` - Net Liquidation ValueUser-specified allocation methods:  * `C` - Cash Quantity  * `P` - Percentage  * `R` - Ratios  * `S` - Shares</summary>
        public global::IBKR.Api.V2.Generated.Kiota.Models.Presets_default_method_for_all? DefaultMethodForAll { get; set; }
        /// <summary>Determines if allocation groups should prioritize closing positions over equal distribution.</summary>
        public bool? GroupAutoClosePositions { get; set; }
        /// <summary>Determines if the system should keep allocation groups proportional for scaling.</summary>
        public bool? GroupProportionalAllocation { get; set; }
        /// <summary>Determines if allocation profiles should prioritize closing positions over equal distribution.</summary>
        public bool? ProfilesAutoClosePositions { get; set; }
        /// <summary>Determines if the system should always check user credit before beginning the order process every time, or only at the time of order placement and execution.</summary>
        public bool? StrictCreditCheck { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::IBKR.Api.V2.Generated.Kiota.Models.Presets"/> and sets the default values.
        /// </summary>
        public Presets()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::IBKR.Api.V2.Generated.Kiota.Models.Presets"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::IBKR.Api.V2.Generated.Kiota.Models.Presets CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::IBKR.Api.V2.Generated.Kiota.Models.Presets();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "default_method_for_all", n => { DefaultMethodForAll = n.GetEnumValue<global::IBKR.Api.V2.Generated.Kiota.Models.Presets_default_method_for_all>(); } },
                { "group_auto_close_positions", n => { GroupAutoClosePositions = n.GetBoolValue(); } },
                { "group_proportional_allocation", n => { GroupProportionalAllocation = n.GetBoolValue(); } },
                { "profiles_auto_close_positions", n => { ProfilesAutoClosePositions = n.GetBoolValue(); } },
                { "strict_credit_check", n => { StrictCreditCheck = n.GetBoolValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteEnumValue<global::IBKR.Api.V2.Generated.Kiota.Models.Presets_default_method_for_all>("default_method_for_all", DefaultMethodForAll);
            writer.WriteBoolValue("group_auto_close_positions", GroupAutoClosePositions);
            writer.WriteBoolValue("group_proportional_allocation", GroupProportionalAllocation);
            writer.WriteBoolValue("profiles_auto_close_positions", ProfilesAutoClosePositions);
            writer.WriteBoolValue("strict_credit_check", StrictCreditCheck);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
