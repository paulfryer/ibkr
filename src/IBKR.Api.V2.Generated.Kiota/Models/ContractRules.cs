// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace IBKR.Api.V2.Generated.Kiota.Models
{
    /// <summary>
    /// detailed contract information
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class ContractRules : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Indicates if the contract can trade algos or not.</summary>
        public bool? AlgoEligible { get; set; }
        /// <summary>Indicates permitted accountIDs that may trade the contract.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? CanTradeAcctIds { get; set; }
#nullable restore
#else
        public List<string> CanTradeAcctIds { get; set; }
#endif
        /// <summary>Indicates base currency for the instrument.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CashCcy { get; set; }
#nullable restore
#else
        public string CashCcy { get; set; }
#endif
        /// <summary>Indicates cash quantity increment rules.</summary>
        public int? CashQtyIncr { get; set; }
        /// <summary>Default cash value quantity.</summary>
        public int? CashSize { get; set; }
        /// <summary>Indicates whether or not a cost report has been requested (Client Portal only).</summary>
        public bool? CostReport { get; set; }
        /// <summary>Indicates accepted order types for use with cash quantity.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::IBKR.Api.V2.Generated.Kiota.Models.ContractRules_cqtTypes?>? CqtTypes { get; set; }
#nullable restore
#else
        public List<global::IBKR.Api.V2.Generated.Kiota.Models.ContractRules_cqtTypes?> CqtTypes { get; set; }
#endif
        /// <summary>Default total quantity value for orders.</summary>
        public int? DefaultSize { get; set; }
        /// <summary>Standard display increment rule for the instrument.</summary>
        public int? DisplaySize { get; set; }
        /// <summary>If rules information can not be received for any reason, it will be expressed here.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Error { get; set; }
#nullable restore
#else
        public string Error { get; set; }
#endif
        /// <summary>Indicates if the order preview is forced upon the user before submission.</summary>
        public bool? ForceOrderPreview { get; set; }
        /// <summary>Indicates decimal places for fractional order size.</summary>
        public int? FraqInt { get; set; }
        /// <summary>Indicates permitted order types for use with fractional trading.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::IBKR.Api.V2.Generated.Kiota.Models.ContractRules_fraqTypes?>? FraqTypes { get; set; }
#nullable restore
#else
        public List<global::IBKR.Api.V2.Generated.Kiota.Models.ContractRules_fraqTypes?> FraqTypes { get; set; }
#endif
        /// <summary>The hasSecondary property</summary>
        public bool? HasSecondary { get; set; }
        /// <summary>Indicates permitted algo types for use with the given contract.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::IBKR.Api.V2.Generated.Kiota.Models.ContractRules_ibAlgoTypes?>? IbAlgoTypes { get; set; }
#nullable restore
#else
        public List<global::IBKR.Api.V2.Generated.Kiota.Models.ContractRules_ibAlgoTypes?> IbAlgoTypes { get; set; }
#endif
        /// <summary>Minimum increment values for prices</summary>
        public int? Increment { get; set; }
        /// <summary>Number of decimal places to indicate the increment value.</summary>
        public int? IncrementDigits { get; set; }
        /// <summary>Indicates increment rule values including lowerEdge and increment value.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::IBKR.Api.V2.Generated.Kiota.Models.ContractRules_incrementRules>? IncrementRules { get; set; }
#nullable restore
#else
        public List<global::IBKR.Api.V2.Generated.Kiota.Models.ContractRules_incrementRules> IncrementRules { get; set; }
#endif
        /// <summary>Indicates the type of increment style.</summary>
        public int? IncrementType { get; set; }
        /// <summary>Default limit price for the given contract.</summary>
        public int? LimitPrice { get; set; }
        /// <summary>Lists the available order types supported when modifying the order.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public UntypedNode? ModTypes { get; set; }
#nullable restore
#else
        public UntypedNode ModTypes { get; set; }
#endif
        /// <summary>Indicates if the value of the contract can be negative (true) or if it is always positive (false).</summary>
        public bool? NegativeCapable { get; set; }
        /// <summary>Indicates default order type for the given security type.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::IBKR.Api.V2.Generated.Kiota.Models.ContractRules_orderDefaults? OrderDefaults { get; set; }
#nullable restore
#else
        public global::IBKR.Api.V2.Generated.Kiota.Models.ContractRules_orderDefaults OrderDefaults { get; set; }
#endif
        /// <summary>Order origin designation for US securities options and Options Clearing Corporation</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OrderOrigination { get; set; }
#nullable restore
#else
        public string OrderOrigination { get; set; }
#endif
        /// <summary>Indicates permitted order types for use with standard quantity trading.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::IBKR.Api.V2.Generated.Kiota.Models.ContractRules_orderTypes?>? OrderTypes { get; set; }
#nullable restore
#else
        public List<global::IBKR.Api.V2.Generated.Kiota.Models.ContractRules_orderTypes?> OrderTypes { get; set; }
#endif
        /// <summary>Indicates permitted order types for use outside of regular trading hours.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::IBKR.Api.V2.Generated.Kiota.Models.ContractRules_orderTypesOutside?>? OrderTypesOutside { get; set; }
#nullable restore
#else
        public List<global::IBKR.Api.V2.Generated.Kiota.Models.ContractRules_orderTypesOutside?> OrderTypesOutside { get; set; }
#endif
        /// <summary>Indicates if outsideRTH trading is permitted for the instrument</summary>
        public bool? OvernightEligible { get; set; }
        /// <summary>Indicates if the order preview is required (for client portal only)</summary>
        public bool? Preview { get; set; }
        /// <summary>Signifies the magnifier of a given contract. This is separate from the price multiplier, and will typically return ‘null’</summary>
        public int? PriceMagnifier { get; set; }
        /// <summary>Indicates quantity increase for the contract.</summary>
        public int? SizeIncrement { get; set; }
        /// <summary>Default stop price for the given contract.</summary>
        public int? StopPrice { get; set; }
        /// <summary>Object containing details about your TIF value defaults. These defaults can be viewed and modified in TWS’s within the Global Configuration.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::IBKR.Api.V2.Generated.Kiota.Models.ContractRules_tifDefaults? TifDefaults { get; set; }
#nullable restore
#else
        public global::IBKR.Api.V2.Generated.Kiota.Models.ContractRules_tifDefaults TifDefaults { get; set; }
#endif
        /// <summary>Indicates allowed tif types supported for the contract.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? TifTypes { get; set; }
#nullable restore
#else
        public List<string> TifTypes { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::IBKR.Api.V2.Generated.Kiota.Models.ContractRules"/> and sets the default values.
        /// </summary>
        public ContractRules()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::IBKR.Api.V2.Generated.Kiota.Models.ContractRules"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::IBKR.Api.V2.Generated.Kiota.Models.ContractRules CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::IBKR.Api.V2.Generated.Kiota.Models.ContractRules();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "algoEligible", n => { AlgoEligible = n.GetBoolValue(); } },
                { "canTradeAcctIds", n => { CanTradeAcctIds = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "cashCcy", n => { CashCcy = n.GetStringValue(); } },
                { "cashQtyIncr", n => { CashQtyIncr = n.GetIntValue(); } },
                { "cashSize", n => { CashSize = n.GetIntValue(); } },
                { "costReport", n => { CostReport = n.GetBoolValue(); } },
                { "cqtTypes", n => { CqtTypes = n.GetCollectionOfEnumValues<global::IBKR.Api.V2.Generated.Kiota.Models.ContractRules_cqtTypes>()?.AsList(); } },
                { "defaultSize", n => { DefaultSize = n.GetIntValue(); } },
                { "displaySize", n => { DisplaySize = n.GetIntValue(); } },
                { "error", n => { Error = n.GetStringValue(); } },
                { "forceOrderPreview", n => { ForceOrderPreview = n.GetBoolValue(); } },
                { "fraqInt", n => { FraqInt = n.GetIntValue(); } },
                { "fraqTypes", n => { FraqTypes = n.GetCollectionOfEnumValues<global::IBKR.Api.V2.Generated.Kiota.Models.ContractRules_fraqTypes>()?.AsList(); } },
                { "hasSecondary", n => { HasSecondary = n.GetBoolValue(); } },
                { "ibAlgoTypes", n => { IbAlgoTypes = n.GetCollectionOfEnumValues<global::IBKR.Api.V2.Generated.Kiota.Models.ContractRules_ibAlgoTypes>()?.AsList(); } },
                { "increment", n => { Increment = n.GetIntValue(); } },
                { "incrementDigits", n => { IncrementDigits = n.GetIntValue(); } },
                { "incrementRules", n => { IncrementRules = n.GetCollectionOfObjectValues<global::IBKR.Api.V2.Generated.Kiota.Models.ContractRules_incrementRules>(global::IBKR.Api.V2.Generated.Kiota.Models.ContractRules_incrementRules.CreateFromDiscriminatorValue)?.AsList(); } },
                { "incrementType", n => { IncrementType = n.GetIntValue(); } },
                { "limitPrice", n => { LimitPrice = n.GetIntValue(); } },
                { "modTypes", n => { ModTypes = n.GetObjectValue<UntypedNode>(UntypedNode.CreateFromDiscriminatorValue); } },
                { "negativeCapable", n => { NegativeCapable = n.GetBoolValue(); } },
                { "orderDefaults", n => { OrderDefaults = n.GetObjectValue<global::IBKR.Api.V2.Generated.Kiota.Models.ContractRules_orderDefaults>(global::IBKR.Api.V2.Generated.Kiota.Models.ContractRules_orderDefaults.CreateFromDiscriminatorValue); } },
                { "orderOrigination", n => { OrderOrigination = n.GetStringValue(); } },
                { "orderTypes", n => { OrderTypes = n.GetCollectionOfEnumValues<global::IBKR.Api.V2.Generated.Kiota.Models.ContractRules_orderTypes>()?.AsList(); } },
                { "orderTypesOutside", n => { OrderTypesOutside = n.GetCollectionOfEnumValues<global::IBKR.Api.V2.Generated.Kiota.Models.ContractRules_orderTypesOutside>()?.AsList(); } },
                { "overnightEligible", n => { OvernightEligible = n.GetBoolValue(); } },
                { "preview", n => { Preview = n.GetBoolValue(); } },
                { "priceMagnifier", n => { PriceMagnifier = n.GetIntValue(); } },
                { "sizeIncrement", n => { SizeIncrement = n.GetIntValue(); } },
                { "stopPrice", n => { StopPrice = n.GetIntValue(); } },
                { "tifDefaults", n => { TifDefaults = n.GetObjectValue<global::IBKR.Api.V2.Generated.Kiota.Models.ContractRules_tifDefaults>(global::IBKR.Api.V2.Generated.Kiota.Models.ContractRules_tifDefaults.CreateFromDiscriminatorValue); } },
                { "tifTypes", n => { TifTypes = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("algoEligible", AlgoEligible);
            writer.WriteCollectionOfPrimitiveValues<string>("canTradeAcctIds", CanTradeAcctIds);
            writer.WriteStringValue("cashCcy", CashCcy);
            writer.WriteIntValue("cashQtyIncr", CashQtyIncr);
            writer.WriteIntValue("cashSize", CashSize);
            writer.WriteBoolValue("costReport", CostReport);
            writer.WriteCollectionOfEnumValues<global::IBKR.Api.V2.Generated.Kiota.Models.ContractRules_cqtTypes>("cqtTypes", CqtTypes);
            writer.WriteIntValue("defaultSize", DefaultSize);
            writer.WriteIntValue("displaySize", DisplaySize);
            writer.WriteStringValue("error", Error);
            writer.WriteBoolValue("forceOrderPreview", ForceOrderPreview);
            writer.WriteIntValue("fraqInt", FraqInt);
            writer.WriteCollectionOfEnumValues<global::IBKR.Api.V2.Generated.Kiota.Models.ContractRules_fraqTypes>("fraqTypes", FraqTypes);
            writer.WriteBoolValue("hasSecondary", HasSecondary);
            writer.WriteCollectionOfEnumValues<global::IBKR.Api.V2.Generated.Kiota.Models.ContractRules_ibAlgoTypes>("ibAlgoTypes", IbAlgoTypes);
            writer.WriteIntValue("increment", Increment);
            writer.WriteIntValue("incrementDigits", IncrementDigits);
            writer.WriteCollectionOfObjectValues<global::IBKR.Api.V2.Generated.Kiota.Models.ContractRules_incrementRules>("incrementRules", IncrementRules);
            writer.WriteIntValue("incrementType", IncrementType);
            writer.WriteIntValue("limitPrice", LimitPrice);
            writer.WriteObjectValue<UntypedNode>("modTypes", ModTypes);
            writer.WriteBoolValue("negativeCapable", NegativeCapable);
            writer.WriteObjectValue<global::IBKR.Api.V2.Generated.Kiota.Models.ContractRules_orderDefaults>("orderDefaults", OrderDefaults);
            writer.WriteStringValue("orderOrigination", OrderOrigination);
            writer.WriteCollectionOfEnumValues<global::IBKR.Api.V2.Generated.Kiota.Models.ContractRules_orderTypes>("orderTypes", OrderTypes);
            writer.WriteCollectionOfEnumValues<global::IBKR.Api.V2.Generated.Kiota.Models.ContractRules_orderTypesOutside>("orderTypesOutside", OrderTypesOutside);
            writer.WriteBoolValue("overnightEligible", OvernightEligible);
            writer.WriteBoolValue("preview", Preview);
            writer.WriteIntValue("priceMagnifier", PriceMagnifier);
            writer.WriteIntValue("sizeIncrement", SizeIncrement);
            writer.WriteIntValue("stopPrice", StopPrice);
            writer.WriteObjectValue<global::IBKR.Api.V2.Generated.Kiota.Models.ContractRules_tifDefaults>("tifDefaults", TifDefaults);
            writer.WriteCollectionOfPrimitiveValues<string>("tifTypes", TifTypes);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
