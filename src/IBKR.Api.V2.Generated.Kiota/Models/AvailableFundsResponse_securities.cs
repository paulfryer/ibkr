// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace IBKR.Api.V2.Generated.Kiota.Models
{
    /// <summary>
    /// Contains an overview of Security specific fund values.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class AvailableFundsResponse_securities : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Describes currently avialable funds in your account for trading.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CurrentAvailable { get; set; }
#nullable restore
#else
        public string CurrentAvailable { get; set; }
#endif
        /// <summary>Describes total value of the account.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CurrentExcess { get; set; }
#nullable restore
#else
        public string CurrentExcess { get; set; }
#endif
        /// <summary>Describes the total combined leverage.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Leverage { get; set; }
#nullable restore
#else
        public string Leverage { get; set; }
#endif
        /// <summary>This value reflects your available funds at the next margin change.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LkAhdAvlblFnds { get; set; }
#nullable restore
#else
        public string LkAhdAvlblFnds { get; set; }
#endif
        /// <summary>* `Securities` - Equity with loan value. Look ahead maintenance margin. * `Commodities` - Net Liquidation value. Look ahead maintenance margin.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LkAhdExcssLqdty { get; set; }
#nullable restore
#else
        public string LkAhdExcssLqdty { get; set; }
#endif
        /// <summary>Describes available funds for overnight trading.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OvernightAvailable { get; set; }
#nullable restore
#else
        public string OvernightAvailable { get; set; }
#endif
        /// <summary>Overnight refers to the window of time after the local market trading day is closed.   * `Securities` - Equivalent to regular trading hours.    * `Commodities` - Commodities Net Liquidation value. Overnight Maintenance margin.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OvernightExcess { get; set; }
#nullable restore
#else
        public string OvernightExcess { get; set; }
#endif
        /// <summary>Displays predicted post-expiration account value.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PrdctdPstXpryExcss { get; set; }
#nullable restore
#else
        public string PrdctdPstXpryExcss { get; set; }
#endif
        /// <summary>The SMA property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SMA { get; set; }
#nullable restore
#else
        public string SMA { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::IBKR.Api.V2.Generated.Kiota.Models.AvailableFundsResponse_securities"/> and sets the default values.
        /// </summary>
        public AvailableFundsResponse_securities()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::IBKR.Api.V2.Generated.Kiota.Models.AvailableFundsResponse_securities"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::IBKR.Api.V2.Generated.Kiota.Models.AvailableFundsResponse_securities CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::IBKR.Api.V2.Generated.Kiota.Models.AvailableFundsResponse_securities();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "current_available", n => { CurrentAvailable = n.GetStringValue(); } },
                { "current_excess", n => { CurrentExcess = n.GetStringValue(); } },
                { "leverage", n => { Leverage = n.GetStringValue(); } },
                { "Lk Ahd Avlbl Fnds", n => { LkAhdAvlblFnds = n.GetStringValue(); } },
                { "Lk Ahd Excss Lqdty", n => { LkAhdExcssLqdty = n.GetStringValue(); } },
                { "overnight_available", n => { OvernightAvailable = n.GetStringValue(); } },
                { "overnight_excess", n => { OvernightExcess = n.GetStringValue(); } },
                { "Prdctd Pst-xpry Excss", n => { PrdctdPstXpryExcss = n.GetStringValue(); } },
                { "SMA", n => { SMA = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("current_available", CurrentAvailable);
            writer.WriteStringValue("current_excess", CurrentExcess);
            writer.WriteStringValue("leverage", Leverage);
            writer.WriteStringValue("Lk Ahd Avlbl Fnds", LkAhdAvlblFnds);
            writer.WriteStringValue("Lk Ahd Excss Lqdty", LkAhdExcssLqdty);
            writer.WriteStringValue("overnight_available", OvernightAvailable);
            writer.WriteStringValue("overnight_excess", OvernightExcess);
            writer.WriteStringValue("Prdctd Pst-xpry Excss", PrdctdPstXpryExcss);
            writer.WriteStringValue("SMA", SMA);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
