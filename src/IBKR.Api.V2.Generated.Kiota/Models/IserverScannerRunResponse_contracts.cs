// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace IBKR.Api.V2.Generated.Kiota.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class IserverScannerRunResponse_contracts : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Internal Use Only</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AvailableChartPeriods { get; set; }
#nullable restore
#else
        public string AvailableChartPeriods { get; set; }
#endif
        /// <summary>Always returned for the first contract.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ColumnName { get; set; }
#nullable restore
#else
        public string ColumnName { get; set; }
#endif
        /// <summary>Returns the company long name.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CompanyName { get; set; }
#nullable restore
#else
        public string CompanyName { get; set; }
#endif
        /// <summary>Returns the contract ID of the contract.</summary>
        public int? ConId { get; set; }
        /// <summary>Returns the contract ID of the contract.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Conidex { get; set; }
#nullable restore
#else
        public string Conidex { get; set; }
#endif
        /// <summary>For derivatives like Futures, the local symbol of the contract will be returned.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ContractDescription1 { get; set; }
#nullable restore
#else
        public string ContractDescription1 { get; set; }
#endif
        /// <summary>Returns the primary listing exchange of the contract.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ListingExchange { get; set; }
#nullable restore
#else
        public string ListingExchange { get; set; }
#endif
        /// <summary>Returns the security type of the contract.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SecType { get; set; }
#nullable restore
#else
        public string SecType { get; set; }
#endif
        /// <summary>Contract’s index in relation to the market scanner type’s sorting priority.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ServerId { get; set; }
#nullable restore
#else
        public string ServerId { get; set; }
#endif
        /// <summary>Returns the contract’s ticker symbol.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Symbol { get; set; }
#nullable restore
#else
        public string Symbol { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::IBKR.Api.V2.Generated.Kiota.Models.IserverScannerRunResponse_contracts"/> and sets the default values.
        /// </summary>
        public IserverScannerRunResponse_contracts()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::IBKR.Api.V2.Generated.Kiota.Models.IserverScannerRunResponse_contracts"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::IBKR.Api.V2.Generated.Kiota.Models.IserverScannerRunResponse_contracts CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::IBKR.Api.V2.Generated.Kiota.Models.IserverScannerRunResponse_contracts();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "available_chart_periods", n => { AvailableChartPeriods = n.GetStringValue(); } },
                { "column_name", n => { ColumnName = n.GetStringValue(); } },
                { "company_name", n => { CompanyName = n.GetStringValue(); } },
                { "con_id", n => { ConId = n.GetIntValue(); } },
                { "conidex", n => { Conidex = n.GetStringValue(); } },
                { "contract_description_1", n => { ContractDescription1 = n.GetStringValue(); } },
                { "listing_exchange", n => { ListingExchange = n.GetStringValue(); } },
                { "sec_type", n => { SecType = n.GetStringValue(); } },
                { "server_id", n => { ServerId = n.GetStringValue(); } },
                { "symbol", n => { Symbol = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("available_chart_periods", AvailableChartPeriods);
            writer.WriteStringValue("column_name", ColumnName);
            writer.WriteStringValue("company_name", CompanyName);
            writer.WriteIntValue("con_id", ConId);
            writer.WriteStringValue("conidex", Conidex);
            writer.WriteStringValue("contract_description_1", ContractDescription1);
            writer.WriteStringValue("listing_exchange", ListingExchange);
            writer.WriteStringValue("sec_type", SecType);
            writer.WriteStringValue("server_id", ServerId);
            writer.WriteStringValue("symbol", Symbol);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
