// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace IBKR.Api.V2.Generated.Kiota.Models
{
    /// <summary>
    /// An array containing all alerts as separate objects.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Alert : IAdditionalDataHolder, IParsable
    {
        /// <summary>The account the alert was attributed to.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Account { get; set; }
#nullable restore
#else
        public string Account { get; set; }
#endif
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Determines if the alert is active [1] or not [0]</summary>
        public int? AlertActive { get; set; }
        /// <summary>The requested name for the alert.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AlertName { get; set; }
#nullable restore
#else
        public string AlertName { get; set; }
#endif
        /// <summary>Confirms if the alert is enabled to occur more than once.</summary>
        public int? AlertRepeatable { get; set; }
        /// <summary>Confirms if the order is triggered or not.</summary>
        public bool? AlertTriggered { get; set; }
        /// <summary>The order id (alert id)</summary>
        public int? OrderId { get; set; }
        /// <summary>UTC-formatted time of the alertâ€™s creation.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OrderTime { get; set; }
#nullable restore
#else
        public string OrderTime { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::IBKR.Api.V2.Generated.Kiota.Models.Alert"/> and sets the default values.
        /// </summary>
        public Alert()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::IBKR.Api.V2.Generated.Kiota.Models.Alert"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::IBKR.Api.V2.Generated.Kiota.Models.Alert CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::IBKR.Api.V2.Generated.Kiota.Models.Alert();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "account", n => { Account = n.GetStringValue(); } },
                { "alert_active", n => { AlertActive = n.GetIntValue(); } },
                { "alert_name", n => { AlertName = n.GetStringValue(); } },
                { "alert_repeatable", n => { AlertRepeatable = n.GetIntValue(); } },
                { "alert_triggered", n => { AlertTriggered = n.GetBoolValue(); } },
                { "order_id", n => { OrderId = n.GetIntValue(); } },
                { "order_time", n => { OrderTime = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("account", Account);
            writer.WriteIntValue("alert_active", AlertActive);
            writer.WriteStringValue("alert_name", AlertName);
            writer.WriteIntValue("alert_repeatable", AlertRepeatable);
            writer.WriteBoolValue("alert_triggered", AlertTriggered);
            writer.WriteIntValue("order_id", OrderId);
            writer.WriteStringValue("order_time", OrderTime);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
