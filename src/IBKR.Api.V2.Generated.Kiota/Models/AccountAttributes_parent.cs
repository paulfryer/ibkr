// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace IBKR.Api.V2.Generated.Kiota.Models
{
    /// <summary>
    /// Describes account relations in partitioned or multiplexed (segemented) account structures.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class AccountAttributes_parent : IAdditionalDataHolder, IParsable
    {
        /// <summary>Account ID of the parent account in a multiplex account structure.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AccountId { get; set; }
#nullable restore
#else
        public string AccountId { get; set; }
#endif
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Indicates that the given account is a multiplex child account.</summary>
        public bool? IsMChild { get; set; }
        /// <summary>Indicates that the given account is itself a multiplex parent account.</summary>
        public bool? IsMParent { get; set; }
        /// <summary>Indicates that the account is a multiplex account.</summary>
        public bool? IsMultiplex { get; set; }
        /// <summary>Money manager client.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public UntypedNode? Mmc { get; set; }
#nullable restore
#else
        public UntypedNode Mmc { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::IBKR.Api.V2.Generated.Kiota.Models.AccountAttributes_parent"/> and sets the default values.
        /// </summary>
        public AccountAttributes_parent()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::IBKR.Api.V2.Generated.Kiota.Models.AccountAttributes_parent"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::IBKR.Api.V2.Generated.Kiota.Models.AccountAttributes_parent CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::IBKR.Api.V2.Generated.Kiota.Models.AccountAttributes_parent();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "accountId", n => { AccountId = n.GetStringValue(); } },
                { "isMChild", n => { IsMChild = n.GetBoolValue(); } },
                { "isMParent", n => { IsMParent = n.GetBoolValue(); } },
                { "isMultiplex", n => { IsMultiplex = n.GetBoolValue(); } },
                { "mmc", n => { Mmc = n.GetObjectValue<UntypedNode>(UntypedNode.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("accountId", AccountId);
            writer.WriteBoolValue("isMChild", IsMChild);
            writer.WriteBoolValue("isMParent", IsMParent);
            writer.WriteBoolValue("isMultiplex", IsMultiplex);
            writer.WriteObjectValue<UntypedNode>("mmc", Mmc);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
