// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace IBKR.Api.V2.Generated.Kiota.Models
{
    /// <summary>
    /// A specific account&apos;s position in the requested conid.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class IndividualPosition : IAdditionalDataHolder, IParsable
    {
        /// <summary>IB accountId of an account with a position in the requested conid.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AcctId { get; set; }
#nullable restore
#else
        public string AcctId { get; set; }
#endif
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Comma separated all exchanges on which the instrument trades.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AllExchanges { get; set; }
#nullable restore
#else
        public string AllExchanges { get; set; }
#endif
        /// <summary>Asset class of the requested instrument.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AssetClass { get; set; }
#nullable restore
#else
        public string AssetClass { get; set; }
#endif
        /// <summary>The account&apos;s average cost for its position.</summary>
        public double? AvgCost { get; set; }
        /// <summary>The account&apos;s average price for its position.</summary>
        public double? AvgPrice { get; set; }
        /// <summary>Average cost in the account&apos;s base currency.</summary>
        public double? BaseAvgCost { get; set; }
        /// <summary>Average price in the account&apos;s base currency.</summary>
        public double? BaseAvgPrice { get; set; }
        /// <summary>Market price of instrument in the account&apos;s base currency.</summary>
        public double? BaseMktPrice { get; set; }
        /// <summary>Market value of the position in the account&apos;s base currency.</summary>
        public double? BaseMktValue { get; set; }
        /// <summary>Realized PnL for the instrument in the account&apos;s base currency.</summary>
        public double? BaseRealizedPnl { get; set; }
        /// <summary>Unrealized PnL for the instrument in the account&apos;s base currency.</summary>
        public double? BaseUnrealizedPnl { get; set; }
        /// <summary>Chinese name of the instrument.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ChineseName { get; set; }
#nullable restore
#else
        public string ChineseName { get; set; }
#endif
        /// <summary>The conExchMap property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public UntypedNode? ConExchMap { get; set; }
#nullable restore
#else
        public UntypedNode ConExchMap { get; set; }
#endif
        /// <summary>IB contract ID for the instrument.</summary>
        public int? Conid { get; set; }
        /// <summary>Human-readable description of the instrument.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ContractDesc { get; set; }
#nullable restore
#else
        public string ContractDesc { get; set; }
#endif
        /// <summary>Country in which the instrument is issued.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CountryCode { get; set; }
#nullable restore
#else
        public string CountryCode { get; set; }
#endif
        /// <summary>Currency in which the instrument trades.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Currency { get; set; }
#nullable restore
#else
        public string Currency { get; set; }
#endif
        /// <summary>Object defining minimum increments used in displaying market data for the instrument.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::IBKR.Api.V2.Generated.Kiota.Models.IndividualPosition_displayRule? DisplayRule { get; set; }
#nullable restore
#else
        public global::IBKR.Api.V2.Generated.Kiota.Models.IndividualPosition_displayRule DisplayRule { get; set; }
#endif
        /// <summary>The exchs property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::IBKR.Api.V2.Generated.Kiota.Models.IndividualPosition_exchs? Exchs { get; set; }
#nullable restore
#else
        public global::IBKR.Api.V2.Generated.Kiota.Models.IndividualPosition_exchs Exchs { get; set; }
#endif
        /// <summary>Style of exercise for options.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ExerciseStyle { get; set; }
#nullable restore
#else
        public string ExerciseStyle { get; set; }
#endif
        /// <summary>Expiration of instrument, if applicable.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Expiry { get; set; }
#nullable restore
#else
        public string Expiry { get; set; }
#endif
        /// <summary>Full display name of the instrument.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FullName { get; set; }
#nullable restore
#else
        public string FullName { get; set; }
#endif
        /// <summary>Industry sub-categorization of the instrument.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Group { get; set; }
#nullable restore
#else
        public string Group { get; set; }
#endif
        /// <summary>Indicates whether instrument has options contracts available for trading at IB.</summary>
        public bool? HasOptions { get; set; }
        /// <summary>Array containing increment rules used when pricing orders for the instrument.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::IBKR.Api.V2.Generated.Kiota.Models.IndividualPosition_incrementRules>? IncrementRules { get; set; }
#nullable restore
#else
        public List<global::IBKR.Api.V2.Generated.Kiota.Models.IndividualPosition_incrementRules> IncrementRules { get; set; }
#endif
        /// <summary>Indicates whether the instrument is an Event Contract.</summary>
        public bool? IsEventContract { get; set; }
        /// <summary>Indicates whether the instrument is issued in the US.</summary>
        public bool? IsUS { get; set; }
        /// <summary>Last day of trading in the instrument, if applicable. Formatted `YYYYMMDD`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LastTradingDay { get; set; }
#nullable restore
#else
        public string LastTradingDay { get; set; }
#endif
        /// <summary>The exchange on which the instrument is listed, or the primary exchange recognized by IB for the instrument.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ListingExchange { get; set; }
#nullable restore
#else
        public string ListingExchange { get; set; }
#endif
        /// <summary>Current market price of the instrument, in the instrument&apos;s currency.</summary>
        public double? MktPrice { get; set; }
        /// <summary>Current market value of the account&apos;s position in the instrument, in the instrument&apos;s currency.</summary>
        public double? MktValue { get; set; }
        /// <summary>Name of the model portfolio in which the account is invested that contributes this position.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Model { get; set; }
#nullable restore
#else
        public string Model { get; set; }
#endif
        /// <summary>Instrument&apos;s multiplier, if applicable.</summary>
        public double? Multiplier { get; set; }
        /// <summary>Formal name of the entity or asset to which the instrument relates.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>Maximum number of accounts that can be returned in a single request.</summary>
        public int? PageSize { get; set; }
        /// <summary>Size of position in units of instrument.</summary>
        public double? Position { get; set; }
        /// <summary>The right of an options contract, if applicable.</summary>
        public global::IBKR.Api.V2.Generated.Kiota.Models.IndividualPosition_putOrCall? PutOrCall { get; set; }
        /// <summary>Realized PnL for the instrument in the instrument&apos;s currency.</summary>
        public double? RealizedPnl { get; set; }
        /// <summary>Industry sector categorization of the instrument.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Sector { get; set; }
#nullable restore
#else
        public string Sector { get; set; }
#endif
        /// <summary>Industry sub-categorization of the instrument.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SectorGroup { get; set; }
#nullable restore
#else
        public string SectorGroup { get; set; }
#endif
        /// <summary>Strike price, if applicable. Returned as string.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Strike { get; set; }
#nullable restore
#else
        public string Strike { get; set; }
#endif
        /// <summary>Symbol associated with the instrument.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Ticker { get; set; }
#nullable restore
#else
        public string Ticker { get; set; }
#endif
        /// <summary>Time taken to retrieve position data in milliseconds.</summary>
        public int? Time { get; set; }
        /// <summary>Description of instrument, used to differentiate classes, if applicable.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Type { get; set; }
#nullable restore
#else
        public string Type { get; set; }
#endif
        /// <summary>Contract ID of underlying instrument, if applicable.</summary>
        public int? UndConid { get; set; }
        /// <summary>Unrealized PnL for the instrument in the account.</summary>
        public double? UnrealizedPnl { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::IBKR.Api.V2.Generated.Kiota.Models.IndividualPosition"/> and sets the default values.
        /// </summary>
        public IndividualPosition()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::IBKR.Api.V2.Generated.Kiota.Models.IndividualPosition"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::IBKR.Api.V2.Generated.Kiota.Models.IndividualPosition CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::IBKR.Api.V2.Generated.Kiota.Models.IndividualPosition();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "acctId", n => { AcctId = n.GetStringValue(); } },
                { "allExchanges", n => { AllExchanges = n.GetStringValue(); } },
                { "assetClass", n => { AssetClass = n.GetStringValue(); } },
                { "avgCost", n => { AvgCost = n.GetDoubleValue(); } },
                { "avgPrice", n => { AvgPrice = n.GetDoubleValue(); } },
                { "baseAvgCost", n => { BaseAvgCost = n.GetDoubleValue(); } },
                { "baseAvgPrice", n => { BaseAvgPrice = n.GetDoubleValue(); } },
                { "baseMktPrice", n => { BaseMktPrice = n.GetDoubleValue(); } },
                { "baseMktValue", n => { BaseMktValue = n.GetDoubleValue(); } },
                { "baseRealizedPnl", n => { BaseRealizedPnl = n.GetDoubleValue(); } },
                { "baseUnrealizedPnl", n => { BaseUnrealizedPnl = n.GetDoubleValue(); } },
                { "chineseName", n => { ChineseName = n.GetStringValue(); } },
                { "conExchMap", n => { ConExchMap = n.GetObjectValue<UntypedNode>(UntypedNode.CreateFromDiscriminatorValue); } },
                { "conid", n => { Conid = n.GetIntValue(); } },
                { "contractDesc", n => { ContractDesc = n.GetStringValue(); } },
                { "countryCode", n => { CountryCode = n.GetStringValue(); } },
                { "currency", n => { Currency = n.GetStringValue(); } },
                { "displayRule", n => { DisplayRule = n.GetObjectValue<global::IBKR.Api.V2.Generated.Kiota.Models.IndividualPosition_displayRule>(global::IBKR.Api.V2.Generated.Kiota.Models.IndividualPosition_displayRule.CreateFromDiscriminatorValue); } },
                { "exchs", n => { Exchs = n.GetObjectValue<global::IBKR.Api.V2.Generated.Kiota.Models.IndividualPosition_exchs>(global::IBKR.Api.V2.Generated.Kiota.Models.IndividualPosition_exchs.CreateFromDiscriminatorValue); } },
                { "exerciseStyle", n => { ExerciseStyle = n.GetStringValue(); } },
                { "expiry", n => { Expiry = n.GetStringValue(); } },
                { "fullName", n => { FullName = n.GetStringValue(); } },
                { "group", n => { Group = n.GetStringValue(); } },
                { "hasOptions", n => { HasOptions = n.GetBoolValue(); } },
                { "incrementRules", n => { IncrementRules = n.GetCollectionOfObjectValues<global::IBKR.Api.V2.Generated.Kiota.Models.IndividualPosition_incrementRules>(global::IBKR.Api.V2.Generated.Kiota.Models.IndividualPosition_incrementRules.CreateFromDiscriminatorValue)?.AsList(); } },
                { "isEventContract", n => { IsEventContract = n.GetBoolValue(); } },
                { "isUS", n => { IsUS = n.GetBoolValue(); } },
                { "lastTradingDay", n => { LastTradingDay = n.GetStringValue(); } },
                { "listingExchange", n => { ListingExchange = n.GetStringValue(); } },
                { "mktPrice", n => { MktPrice = n.GetDoubleValue(); } },
                { "mktValue", n => { MktValue = n.GetDoubleValue(); } },
                { "model", n => { Model = n.GetStringValue(); } },
                { "multiplier", n => { Multiplier = n.GetDoubleValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "pageSize", n => { PageSize = n.GetIntValue(); } },
                { "position", n => { Position = n.GetDoubleValue(); } },
                { "putOrCall", n => { PutOrCall = n.GetEnumValue<global::IBKR.Api.V2.Generated.Kiota.Models.IndividualPosition_putOrCall>(); } },
                { "realizedPnl", n => { RealizedPnl = n.GetDoubleValue(); } },
                { "sector", n => { Sector = n.GetStringValue(); } },
                { "sectorGroup", n => { SectorGroup = n.GetStringValue(); } },
                { "strike", n => { Strike = n.GetStringValue(); } },
                { "ticker", n => { Ticker = n.GetStringValue(); } },
                { "time", n => { Time = n.GetIntValue(); } },
                { "type", n => { Type = n.GetStringValue(); } },
                { "undConid", n => { UndConid = n.GetIntValue(); } },
                { "unrealizedPnl", n => { UnrealizedPnl = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("acctId", AcctId);
            writer.WriteStringValue("allExchanges", AllExchanges);
            writer.WriteStringValue("assetClass", AssetClass);
            writer.WriteDoubleValue("avgCost", AvgCost);
            writer.WriteDoubleValue("avgPrice", AvgPrice);
            writer.WriteDoubleValue("baseAvgCost", BaseAvgCost);
            writer.WriteDoubleValue("baseAvgPrice", BaseAvgPrice);
            writer.WriteDoubleValue("baseMktPrice", BaseMktPrice);
            writer.WriteDoubleValue("baseMktValue", BaseMktValue);
            writer.WriteDoubleValue("baseRealizedPnl", BaseRealizedPnl);
            writer.WriteDoubleValue("baseUnrealizedPnl", BaseUnrealizedPnl);
            writer.WriteStringValue("chineseName", ChineseName);
            writer.WriteObjectValue<UntypedNode>("conExchMap", ConExchMap);
            writer.WriteIntValue("conid", Conid);
            writer.WriteStringValue("contractDesc", ContractDesc);
            writer.WriteStringValue("countryCode", CountryCode);
            writer.WriteStringValue("currency", Currency);
            writer.WriteObjectValue<global::IBKR.Api.V2.Generated.Kiota.Models.IndividualPosition_displayRule>("displayRule", DisplayRule);
            writer.WriteObjectValue<global::IBKR.Api.V2.Generated.Kiota.Models.IndividualPosition_exchs>("exchs", Exchs);
            writer.WriteStringValue("exerciseStyle", ExerciseStyle);
            writer.WriteStringValue("expiry", Expiry);
            writer.WriteStringValue("fullName", FullName);
            writer.WriteStringValue("group", Group);
            writer.WriteBoolValue("hasOptions", HasOptions);
            writer.WriteCollectionOfObjectValues<global::IBKR.Api.V2.Generated.Kiota.Models.IndividualPosition_incrementRules>("incrementRules", IncrementRules);
            writer.WriteBoolValue("isEventContract", IsEventContract);
            writer.WriteBoolValue("isUS", IsUS);
            writer.WriteStringValue("lastTradingDay", LastTradingDay);
            writer.WriteStringValue("listingExchange", ListingExchange);
            writer.WriteDoubleValue("mktPrice", MktPrice);
            writer.WriteDoubleValue("mktValue", MktValue);
            writer.WriteStringValue("model", Model);
            writer.WriteDoubleValue("multiplier", Multiplier);
            writer.WriteStringValue("name", Name);
            writer.WriteIntValue("pageSize", PageSize);
            writer.WriteDoubleValue("position", Position);
            writer.WriteEnumValue<global::IBKR.Api.V2.Generated.Kiota.Models.IndividualPosition_putOrCall>("putOrCall", PutOrCall);
            writer.WriteDoubleValue("realizedPnl", RealizedPnl);
            writer.WriteStringValue("sector", Sector);
            writer.WriteStringValue("sectorGroup", SectorGroup);
            writer.WriteStringValue("strike", Strike);
            writer.WriteStringValue("ticker", Ticker);
            writer.WriteIntValue("time", Time);
            writer.WriteStringValue("type", Type);
            writer.WriteIntValue("undConid", UndConid);
            writer.WriteDoubleValue("unrealizedPnl", UnrealizedPnl);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
