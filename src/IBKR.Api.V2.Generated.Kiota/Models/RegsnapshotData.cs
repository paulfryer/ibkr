// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace IBKR.Api.V2.Generated.Kiota.Models
{
    /// <summary>
    /// Object containing regulatory snapshot data.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class RegsnapshotData : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Internal use. Exchange map code.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BboExchange { get; set; }
#nullable restore
#else
        public string BboExchange { get; set; }
#endif
        /// <summary>Internal use. Equivalent binary encoding of field 7057.</summary>
        public int? BestAskExch { get; set; }
        /// <summary>Internal use. Equivalent binary encoding of field 7068.</summary>
        public int? BestBidExch { get; set; }
        /// <summary>IB contract ID.</summary>
        public int? Conid { get; set; }
        /// <summary>Contract ID and routing destination in format 123456@EXCHANGE.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ConidEx { get; set; }
#nullable restore
#else
        public string ConidEx { get; set; }
#endif
        /// <summary>Bid size in round lots (100 shares).</summary>
        public int? EightEight { get; set; }
        /// <summary>Ask size in round lots (100 shares).</summary>
        public int? EightFive { get; set; }
        /// <summary>Bid price.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EightFour { get; set; }
#nullable restore
#else
        public string EightFour { get; set; }
#endif
        /// <summary>Ask price.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EightSix { get; set; }
#nullable restore
#else
        public string EightSix { get; set; }
#endif
        /// <summary>Indicates whether delayed data is available.</summary>
        public bool? HasDelayed { get; set; }
        /// <summary>Internal use. Equivalent binary encoding of field 7058.</summary>
        public int? LastExch { get; set; }
        /// <summary>Exchange of last trade. A single, capital-letter MCOID.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SevenZeroFiveEight { get; set; }
#nullable restore
#else
        public string SevenZeroFiveEight { get; set; }
#endif
        /// <summary>Last traded size in round lots (100 shares).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SevenZeroFiveNine { get; set; }
#nullable restore
#else
        public string SevenZeroFiveNine { get; set; }
#endif
        /// <summary>Best ask exchanges(s). String of single, capital-letter MCOIDs.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SevenZeroFiveSeven { get; set; }
#nullable restore
#else
        public string SevenZeroFiveSeven { get; set; }
#endif
        /// <summary>Best bid exchange(s). String of single, capital-letter MCOIDs.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SevenZeroSixEight { get; set; }
#nullable restore
#else
        public string SevenZeroSixEight { get; set; }
#endif
        /// <summary>Internal use. Minimum size display increment.</summary>
        public double? SizeMinTick { get; set; }
        /// <summary>Last traded price.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ThreeOne { get; set; }
#nullable restore
#else
        public string ThreeOne { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::IBKR.Api.V2.Generated.Kiota.Models.RegsnapshotData"/> and sets the default values.
        /// </summary>
        public RegsnapshotData()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::IBKR.Api.V2.Generated.Kiota.Models.RegsnapshotData"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::IBKR.Api.V2.Generated.Kiota.Models.RegsnapshotData CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::IBKR.Api.V2.Generated.Kiota.Models.RegsnapshotData();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "BboExchange", n => { BboExchange = n.GetStringValue(); } },
                { "BestAskExch", n => { BestAskExch = n.GetIntValue(); } },
                { "BestBidExch", n => { BestBidExch = n.GetIntValue(); } },
                { "conid", n => { Conid = n.GetIntValue(); } },
                { "conidEx", n => { ConidEx = n.GetStringValue(); } },
                { "88", n => { EightEight = n.GetIntValue(); } },
                { "85", n => { EightFive = n.GetIntValue(); } },
                { "84", n => { EightFour = n.GetStringValue(); } },
                { "86", n => { EightSix = n.GetStringValue(); } },
                { "HasDelayed", n => { HasDelayed = n.GetBoolValue(); } },
                { "LastExch", n => { LastExch = n.GetIntValue(); } },
                { "7058", n => { SevenZeroFiveEight = n.GetStringValue(); } },
                { "7059", n => { SevenZeroFiveNine = n.GetStringValue(); } },
                { "7057", n => { SevenZeroFiveSeven = n.GetStringValue(); } },
                { "7068", n => { SevenZeroSixEight = n.GetStringValue(); } },
                { "sizeMinTick", n => { SizeMinTick = n.GetDoubleValue(); } },
                { "31", n => { ThreeOne = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("BboExchange", BboExchange);
            writer.WriteIntValue("BestAskExch", BestAskExch);
            writer.WriteIntValue("BestBidExch", BestBidExch);
            writer.WriteIntValue("conid", Conid);
            writer.WriteStringValue("conidEx", ConidEx);
            writer.WriteIntValue("88", EightEight);
            writer.WriteIntValue("85", EightFive);
            writer.WriteStringValue("84", EightFour);
            writer.WriteStringValue("86", EightSix);
            writer.WriteBoolValue("HasDelayed", HasDelayed);
            writer.WriteIntValue("LastExch", LastExch);
            writer.WriteStringValue("7058", SevenZeroFiveEight);
            writer.WriteStringValue("7059", SevenZeroFiveNine);
            writer.WriteStringValue("7057", SevenZeroFiveSeven);
            writer.WriteStringValue("7068", SevenZeroSixEight);
            writer.WriteDoubleValue("sizeMinTick", SizeMinTick);
            writer.WriteStringValue("31", ThreeOne);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
