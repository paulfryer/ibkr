// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace IBKR.Api.V2.Generated.Kiota.Models
{
    /// <summary>
    /// Returns supported features such as bonds and option trading.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class SsoValidateResponse_features : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Returns if bonds can be traded.</summary>
        public bool? Bond { get; set; }
        /// <summary>Returns if trading calendars are enabled</summary>
        public bool? Calendar { get; set; }
        /// <summary>Returns the connecting environment to distinguish production or paper.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Envs { get; set; }
#nullable restore
#else
        public string Envs { get; set; }
#endif
        /// <summary>Internal Use Only</summary>
        public bool? NewMf { get; set; }
        /// <summary>Returns if option chains can be retrieved in the account.</summary>
        public bool? OptionChains { get; set; }
        /// <summary>Returns if realtime market data is available</summary>
        public bool? Realtime { get; set; }
        /// <summary>Internal Use Only</summary>
        public bool? Wlms { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::IBKR.Api.V2.Generated.Kiota.Models.SsoValidateResponse_features"/> and sets the default values.
        /// </summary>
        public SsoValidateResponse_features()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::IBKR.Api.V2.Generated.Kiota.Models.SsoValidateResponse_features"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::IBKR.Api.V2.Generated.Kiota.Models.SsoValidateResponse_features CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::IBKR.Api.V2.Generated.Kiota.Models.SsoValidateResponse_features();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "bond", n => { Bond = n.GetBoolValue(); } },
                { "calendar", n => { Calendar = n.GetBoolValue(); } },
                { "envs", n => { Envs = n.GetStringValue(); } },
                { "newMf", n => { NewMf = n.GetBoolValue(); } },
                { "optionChains", n => { OptionChains = n.GetBoolValue(); } },
                { "realtime", n => { Realtime = n.GetBoolValue(); } },
                { "wlms", n => { Wlms = n.GetBoolValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("bond", Bond);
            writer.WriteBoolValue("calendar", Calendar);
            writer.WriteStringValue("envs", Envs);
            writer.WriteBoolValue("newMf", NewMf);
            writer.WriteBoolValue("optionChains", OptionChains);
            writer.WriteBoolValue("realtime", Realtime);
            writer.WriteBoolValue("wlms", Wlms);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
