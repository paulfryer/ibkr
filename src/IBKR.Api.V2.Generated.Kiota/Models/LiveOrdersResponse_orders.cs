// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace IBKR.Api.V2.Generated.Kiota.Models
{
    /// <summary>
    /// Object representing one order.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class LiveOrdersResponse_orders : IAdditionalDataHolder, IParsable
    {
        /// <summary>IB account ID to which the order was placed.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Account { get; set; }
#nullable restore
#else
        public string Account { get; set; }
#endif
        /// <summary>IB account ID to which the order was placed.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Acct { get; set; }
#nullable restore
#else
        public string Acct { get; set; }
#endif
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Average price of fills against the order, if any.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AvgPrice { get; set; }
#nullable restore
#else
        public string AvgPrice { get; set; }
#endif
        /// <summary>Internal use. IB&apos;s UI background color in hex.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BgColor { get; set; }
#nullable restore
#else
        public string BgColor { get; set; }
#endif
        /// <summary>Currency of the order ticket&apos;s Cash Quantity, if applicable.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CashCcy { get; set; }
#nullable restore
#else
        public string CashCcy { get; set; }
#endif
        /// <summary>Name of business associated with instrument, or otherwise description of instrument.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CompanyName { get; set; }
#nullable restore
#else
        public string CompanyName { get; set; }
#endif
        /// <summary>Contract ID of the order&apos;s instrument.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Conid { get; set; }
#nullable restore
#else
        public string Conid { get; set; }
#endif
        /// <summary>Contract ID and routing destination in format 123456@EXCHANGE.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Conidex { get; set; }
#nullable restore
#else
        public string Conidex { get; set; }
#endif
        /// <summary>Descriptive text, or additional details that specific the instrument.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description1 { get; set; }
#nullable restore
#else
        public string Description1 { get; set; }
#endif
        /// <summary>Routing destination of the order ticket.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Exchange { get; set; }
#nullable restore
#else
        public string Exchange { get; set; }
#endif
        /// <summary>Internal use. IB&apos;s UI foreground color in hex.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FgColor { get; set; }
#nullable restore
#else
        public string FgColor { get; set; }
#endif
        /// <summary>Quantity filled in units of the instrument.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FilledQuantity { get; set; }
#nullable restore
#else
        public string FilledQuantity { get; set; }
#endif
        /// <summary>Indicates whether the order ticket is an Event Trading order.</summary>
        public global::IBKR.Api.V2.Generated.Kiota.Models.LiveOrdersResponse_orders_isEventTrading? IsEventTrading { get; set; }
        /// <summary>Time of last execution against the order in format YYMMDDhhmmss.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LastExecutionTime { get; set; }
#nullable restore
#else
        public string LastExecutionTime { get; set; }
#endif
        /// <summary>Unix timestamp of the last execution against the order.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LastExecutionTimeR { get; set; }
#nullable restore
#else
        public string LastExecutionTimeR { get; set; }
#endif
        /// <summary>Exchange on which the instrument is listed.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ListingExchange { get; set; }
#nullable restore
#else
        public string ListingExchange { get; set; }
#endif
        /// <summary>IB internal order status.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OrderCcpStatus { get; set; }
#nullable restore
#else
        public string OrderCcpStatus { get; set; }
#endif
        /// <summary>Human-readable shorthand rendering of the order ticket.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OrderDesc { get; set; }
#nullable restore
#else
        public string OrderDesc { get; set; }
#endif
        /// <summary>IB-assigned order identifier.</summary>
        public int? OrderId { get; set; }
        /// <summary>Order type of a working order ticket.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OrderType { get; set; }
#nullable restore
#else
        public string OrderType { get; set; }
#endif
        /// <summary>Order type of a filled order.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OrigOrderType { get; set; }
#nullable restore
#else
        public string OrigOrderType { get; set; }
#endif
        /// <summary>Price of the order, if applicable to the order type.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Price { get; set; }
#nullable restore
#else
        public string Price { get; set; }
#endif
        /// <summary>Quantity remaining to be filled in units of the instrument.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RemainingQuantity { get; set; }
#nullable restore
#else
        public string RemainingQuantity { get; set; }
#endif
        /// <summary>Asset class of the instrument.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SecType { get; set; }
#nullable restore
#else
        public string SecType { get; set; }
#endif
        /// <summary>Side of the order.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Side { get; set; }
#nullable restore
#else
        public string Side { get; set; }
#endif
        /// <summary>Human-readable shorthand rendering of the filled and total quantities of the order.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SizeAndFills { get; set; }
#nullable restore
#else
        public string SizeAndFills { get; set; }
#endif
        /// <summary>Status of the order ticket.</summary>
        public global::IBKR.Api.V2.Generated.Kiota.Models.LiveOrdersResponse_orders_status? Status { get; set; }
        /// <summary>Indicates whether the order is supported by IB&apos;s Tax Optimization tool.</summary>
        public global::IBKR.Api.V2.Generated.Kiota.Models.LiveOrdersResponse_orders_supportsTaxOpt? SupportsTaxOpt { get; set; }
        /// <summary>Symbol or base product code of the instrument.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Ticker { get; set; }
#nullable restore
#else
        public string Ticker { get; set; }
#endif
        /// <summary>Time of force of the order.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TimeInForce { get; set; }
#nullable restore
#else
        public string TimeInForce { get; set; }
#endif
        /// <summary>Total size of a cash quantity order.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TotalCashSize { get; set; }
#nullable restore
#else
        public string TotalCashSize { get; set; }
#endif
        /// <summary>Total size of an order in the instrument&apos;s units.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TotalSize { get; set; }
#nullable restore
#else
        public string TotalSize { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::IBKR.Api.V2.Generated.Kiota.Models.LiveOrdersResponse_orders"/> and sets the default values.
        /// </summary>
        public LiveOrdersResponse_orders()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::IBKR.Api.V2.Generated.Kiota.Models.LiveOrdersResponse_orders"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::IBKR.Api.V2.Generated.Kiota.Models.LiveOrdersResponse_orders CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::IBKR.Api.V2.Generated.Kiota.Models.LiveOrdersResponse_orders();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "account", n => { Account = n.GetStringValue(); } },
                { "acct", n => { Acct = n.GetStringValue(); } },
                { "avgPrice", n => { AvgPrice = n.GetStringValue(); } },
                { "bgColor", n => { BgColor = n.GetStringValue(); } },
                { "cashCcy", n => { CashCcy = n.GetStringValue(); } },
                { "companyName", n => { CompanyName = n.GetStringValue(); } },
                { "conid", n => { Conid = n.GetStringValue(); } },
                { "conidex", n => { Conidex = n.GetStringValue(); } },
                { "description1", n => { Description1 = n.GetStringValue(); } },
                { "exchange", n => { Exchange = n.GetStringValue(); } },
                { "fgColor", n => { FgColor = n.GetStringValue(); } },
                { "filledQuantity", n => { FilledQuantity = n.GetStringValue(); } },
                { "isEventTrading", n => { IsEventTrading = n.GetEnumValue<global::IBKR.Api.V2.Generated.Kiota.Models.LiveOrdersResponse_orders_isEventTrading>(); } },
                { "lastExecutionTime", n => { LastExecutionTime = n.GetStringValue(); } },
                { "lastExecutionTime_r", n => { LastExecutionTimeR = n.GetStringValue(); } },
                { "listingExchange", n => { ListingExchange = n.GetStringValue(); } },
                { "order_ccp_status", n => { OrderCcpStatus = n.GetStringValue(); } },
                { "orderDesc", n => { OrderDesc = n.GetStringValue(); } },
                { "orderId", n => { OrderId = n.GetIntValue(); } },
                { "orderType", n => { OrderType = n.GetStringValue(); } },
                { "origOrderType", n => { OrigOrderType = n.GetStringValue(); } },
                { "price", n => { Price = n.GetStringValue(); } },
                { "remainingQuantity", n => { RemainingQuantity = n.GetStringValue(); } },
                { "secType", n => { SecType = n.GetStringValue(); } },
                { "side", n => { Side = n.GetStringValue(); } },
                { "sizeAndFills", n => { SizeAndFills = n.GetStringValue(); } },
                { "status", n => { Status = n.GetEnumValue<global::IBKR.Api.V2.Generated.Kiota.Models.LiveOrdersResponse_orders_status>(); } },
                { "supportsTaxOpt", n => { SupportsTaxOpt = n.GetEnumValue<global::IBKR.Api.V2.Generated.Kiota.Models.LiveOrdersResponse_orders_supportsTaxOpt>(); } },
                { "ticker", n => { Ticker = n.GetStringValue(); } },
                { "timeInForce", n => { TimeInForce = n.GetStringValue(); } },
                { "totalCashSize", n => { TotalCashSize = n.GetStringValue(); } },
                { "totalSize", n => { TotalSize = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("account", Account);
            writer.WriteStringValue("acct", Acct);
            writer.WriteStringValue("avgPrice", AvgPrice);
            writer.WriteStringValue("bgColor", BgColor);
            writer.WriteStringValue("cashCcy", CashCcy);
            writer.WriteStringValue("companyName", CompanyName);
            writer.WriteStringValue("conid", Conid);
            writer.WriteStringValue("conidex", Conidex);
            writer.WriteStringValue("description1", Description1);
            writer.WriteStringValue("exchange", Exchange);
            writer.WriteStringValue("fgColor", FgColor);
            writer.WriteStringValue("filledQuantity", FilledQuantity);
            writer.WriteEnumValue<global::IBKR.Api.V2.Generated.Kiota.Models.LiveOrdersResponse_orders_isEventTrading>("isEventTrading", IsEventTrading);
            writer.WriteStringValue("lastExecutionTime", LastExecutionTime);
            writer.WriteStringValue("lastExecutionTime_r", LastExecutionTimeR);
            writer.WriteStringValue("listingExchange", ListingExchange);
            writer.WriteStringValue("order_ccp_status", OrderCcpStatus);
            writer.WriteStringValue("orderDesc", OrderDesc);
            writer.WriteIntValue("orderId", OrderId);
            writer.WriteStringValue("orderType", OrderType);
            writer.WriteStringValue("origOrderType", OrigOrderType);
            writer.WriteStringValue("price", Price);
            writer.WriteStringValue("remainingQuantity", RemainingQuantity);
            writer.WriteStringValue("secType", SecType);
            writer.WriteStringValue("side", Side);
            writer.WriteStringValue("sizeAndFills", SizeAndFills);
            writer.WriteEnumValue<global::IBKR.Api.V2.Generated.Kiota.Models.LiveOrdersResponse_orders_status>("status", Status);
            writer.WriteEnumValue<global::IBKR.Api.V2.Generated.Kiota.Models.LiveOrdersResponse_orders_supportsTaxOpt>("supportsTaxOpt", SupportsTaxOpt);
            writer.WriteStringValue("ticker", Ticker);
            writer.WriteStringValue("timeInForce", TimeInForce);
            writer.WriteStringValue("totalCashSize", TotalCashSize);
            writer.WriteStringValue("totalSize", TotalSize);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
