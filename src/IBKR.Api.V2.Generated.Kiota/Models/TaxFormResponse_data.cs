// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace IBKR.Api.V2.Generated.Kiota.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class TaxFormResponse_data : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>specify response media types that are acceptable</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Accept { get; set; }
#nullable restore
#else
        public string Accept { get; set; }
#endif
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>the data type of the value after decoding</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DataType { get; set; }
#nullable restore
#else
        public string DataType { get; set; }
#endif
        /// <summary>encoding used for the value</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Encoding { get; set; }
#nullable restore
#else
        public string Encoding { get; set; }
#endif
        /// <summary>content encoding flag. Represents whether the response is compressed</summary>
        public bool? Gzip { get; set; }
        /// <summary>mimeType of document after decoding and serializing the value</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MimeType { get; set; }
#nullable restore
#else
        public string MimeType { get; set; }
#endif
        /// <summary>Base 64 encoded String of byte[]. Byte[] represents compressed data when gzip is true</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Value { get; set; }
#nullable restore
#else
        public string Value { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::IBKR.Api.V2.Generated.Kiota.Models.TaxFormResponse_data"/> and sets the default values.
        /// </summary>
        public TaxFormResponse_data()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::IBKR.Api.V2.Generated.Kiota.Models.TaxFormResponse_data"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::IBKR.Api.V2.Generated.Kiota.Models.TaxFormResponse_data CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::IBKR.Api.V2.Generated.Kiota.Models.TaxFormResponse_data();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "accept", n => { Accept = n.GetStringValue(); } },
                { "dataType", n => { DataType = n.GetStringValue(); } },
                { "encoding", n => { Encoding = n.GetStringValue(); } },
                { "gzip", n => { Gzip = n.GetBoolValue(); } },
                { "mimeType", n => { MimeType = n.GetStringValue(); } },
                { "value", n => { Value = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("accept", Accept);
            writer.WriteStringValue("dataType", DataType);
            writer.WriteStringValue("encoding", Encoding);
            writer.WriteBoolValue("gzip", Gzip);
            writer.WriteStringValue("mimeType", MimeType);
            writer.WriteStringValue("value", Value);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
