// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace IBKR.Api.V2.Generated.Kiota.Models
{
    /// <summary>
    /// Contains Commodity-specific balance details.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class SummaryOfAccountBalancesResponse_commodities : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Total cash balance in the account</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Cash { get; set; }
#nullable restore
#else
        public string Cash { get; set; }
#endif
        /// <summary>* `Cash Accounts` Settled cash * `Margin Accounts` Total cash value + stock value + bond value + fund value + European &amp; Asian options value.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EquityWithLoan { get; set; }
#nullable restore
#else
        public string EquityWithLoan { get; set; }
#endif
        /// <summary>Total Month-to-date interest.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MTDInterest { get; set; }
#nullable restore
#else
        public string MTDInterest { get; set; }
#endif
        /// <summary>The basis for determining the price of the assets in your account.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? NetLiquidation { get; set; }
#nullable restore
#else
        public string NetLiquidation { get; set; }
#endif
        /// <summary>Any pending charges for the IBKR debit account.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PndngDbtCrdChrgs { get; set; }
#nullable restore
#else
        public string PndngDbtCrdChrgs { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::IBKR.Api.V2.Generated.Kiota.Models.SummaryOfAccountBalancesResponse_commodities"/> and sets the default values.
        /// </summary>
        public SummaryOfAccountBalancesResponse_commodities()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::IBKR.Api.V2.Generated.Kiota.Models.SummaryOfAccountBalancesResponse_commodities"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::IBKR.Api.V2.Generated.Kiota.Models.SummaryOfAccountBalancesResponse_commodities CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::IBKR.Api.V2.Generated.Kiota.Models.SummaryOfAccountBalancesResponse_commodities();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "cash", n => { Cash = n.GetStringValue(); } },
                { "equity_with_loan", n => { EquityWithLoan = n.GetStringValue(); } },
                { "MTD Interest", n => { MTDInterest = n.GetStringValue(); } },
                { "net_liquidation", n => { NetLiquidation = n.GetStringValue(); } },
                { "Pndng Dbt Crd Chrgs", n => { PndngDbtCrdChrgs = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("cash", Cash);
            writer.WriteStringValue("equity_with_loan", EquityWithLoan);
            writer.WriteStringValue("MTD Interest", MTDInterest);
            writer.WriteStringValue("net_liquidation", NetLiquidation);
            writer.WriteStringValue("Pndng Dbt Crd Chrgs", PndngDbtCrdChrgs);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
