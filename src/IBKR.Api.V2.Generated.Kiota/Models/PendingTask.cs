// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace IBKR.Api.V2.Generated.Kiota.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class PendingTask : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The action property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Action { get; set; }
#nullable restore
#else
        public string Action { get; set; }
#endif
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The au10tixCreatedDate property</summary>
        public DateTimeOffset? Au10tixCreatedDate { get; set; }
        /// <summary>The au10tixExpiryDate property</summary>
        public DateTimeOffset? Au10tixExpiryDate { get; set; }
        /// <summary>The documentRejectReason property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? DocumentRejectReason { get; set; }
#nullable restore
#else
        public List<string> DocumentRejectReason { get; set; }
#endif
        /// <summary>The entityId property</summary>
        public int? EntityId { get; set; }
        /// <summary>The externalId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ExternalId { get; set; }
#nullable restore
#else
        public string ExternalId { get; set; }
#endif
        /// <summary>The formName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FormName { get; set; }
#nullable restore
#else
        public string FormName { get; set; }
#endif
        /// <summary>The formNumber property</summary>
        public int? FormNumber { get; set; }
        /// <summary>The onlineTask property</summary>
        public bool? OnlineTask { get; set; }
        /// <summary>The questionIds property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<int?>? QuestionIds { get; set; }
#nullable restore
#else
        public List<int?> QuestionIds { get; set; }
#endif
        /// <summary>The requiredForApproval property</summary>
        public bool? RequiredForApproval { get; set; }
        /// <summary>The requiredForTrading property</summary>
        public bool? RequiredForTrading { get; set; }
        /// <summary>The startDate property</summary>
        public DateTimeOffset? StartDate { get; set; }
        /// <summary>The state property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? State { get; set; }
#nullable restore
#else
        public string State { get; set; }
#endif
        /// <summary>The taskNumber property</summary>
        public int? TaskNumber { get; set; }
        /// <summary>The url property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Url { get; set; }
#nullable restore
#else
        public string Url { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::IBKR.Api.V2.Generated.Kiota.Models.PendingTask"/> and sets the default values.
        /// </summary>
        public PendingTask()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::IBKR.Api.V2.Generated.Kiota.Models.PendingTask"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::IBKR.Api.V2.Generated.Kiota.Models.PendingTask CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::IBKR.Api.V2.Generated.Kiota.Models.PendingTask();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "action", n => { Action = n.GetStringValue(); } },
                { "au10tixCreatedDate", n => { Au10tixCreatedDate = n.GetDateTimeOffsetValue(); } },
                { "au10tixExpiryDate", n => { Au10tixExpiryDate = n.GetDateTimeOffsetValue(); } },
                { "documentRejectReason", n => { DocumentRejectReason = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "entityId", n => { EntityId = n.GetIntValue(); } },
                { "externalId", n => { ExternalId = n.GetStringValue(); } },
                { "formName", n => { FormName = n.GetStringValue(); } },
                { "formNumber", n => { FormNumber = n.GetIntValue(); } },
                { "onlineTask", n => { OnlineTask = n.GetBoolValue(); } },
                { "questionIds", n => { QuestionIds = n.GetCollectionOfPrimitiveValues<int?>()?.AsList(); } },
                { "requiredForApproval", n => { RequiredForApproval = n.GetBoolValue(); } },
                { "requiredForTrading", n => { RequiredForTrading = n.GetBoolValue(); } },
                { "startDate", n => { StartDate = n.GetDateTimeOffsetValue(); } },
                { "state", n => { State = n.GetStringValue(); } },
                { "taskNumber", n => { TaskNumber = n.GetIntValue(); } },
                { "url", n => { Url = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("action", Action);
            writer.WriteDateTimeOffsetValue("au10tixCreatedDate", Au10tixCreatedDate);
            writer.WriteDateTimeOffsetValue("au10tixExpiryDate", Au10tixExpiryDate);
            writer.WriteCollectionOfPrimitiveValues<string>("documentRejectReason", DocumentRejectReason);
            writer.WriteIntValue("entityId", EntityId);
            writer.WriteStringValue("externalId", ExternalId);
            writer.WriteStringValue("formName", FormName);
            writer.WriteIntValue("formNumber", FormNumber);
            writer.WriteBoolValue("onlineTask", OnlineTask);
            writer.WriteCollectionOfPrimitiveValues<int?>("questionIds", QuestionIds);
            writer.WriteBoolValue("requiredForApproval", RequiredForApproval);
            writer.WriteBoolValue("requiredForTrading", RequiredForTrading);
            writer.WriteDateTimeOffsetValue("startDate", StartDate);
            writer.WriteStringValue("state", State);
            writer.WriteIntValue("taskNumber", TaskNumber);
            writer.WriteStringValue("url", Url);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
