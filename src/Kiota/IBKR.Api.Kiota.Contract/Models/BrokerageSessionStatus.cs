// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace IBKR.Api.Kiota.Contract.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class BrokerageSessionStatus : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Returns whether your brokerage session is authenticated or not.</summary>
        public bool? Authenticated { get; set; }
        /// <summary>Returns whether you have a competing brokerage session in another connection.</summary>
        public bool? Competing { get; set; }
        /// <summary>Returns whether you are connected to the gateway or not.</summary>
        public bool? Connected { get; set; }
        /// <summary>Device MAC information.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MAC { get; set; }
#nullable restore
#else
        public string MAC { get; set; }
#endif
        /// <summary>A message about your authenticate status if any.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Message { get; set; }
#nullable restore
#else
        public string Message { get; set; }
#endif
        /// <summary>The serverInfo property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::IBKR.Api.Kiota.Contract.Models.BrokerageSessionStatus_serverInfo? ServerInfo { get; set; }
#nullable restore
#else
        public global::IBKR.Api.Kiota.Contract.Models.BrokerageSessionStatus_serverInfo ServerInfo { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::IBKR.Api.Kiota.Contract.Models.BrokerageSessionStatus"/> and sets the default values.
        /// </summary>
        public BrokerageSessionStatus()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::IBKR.Api.Kiota.Contract.Models.BrokerageSessionStatus"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::IBKR.Api.Kiota.Contract.Models.BrokerageSessionStatus CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::IBKR.Api.Kiota.Contract.Models.BrokerageSessionStatus();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "authenticated", n => { Authenticated = n.GetBoolValue(); } },
                { "competing", n => { Competing = n.GetBoolValue(); } },
                { "connected", n => { Connected = n.GetBoolValue(); } },
                { "MAC", n => { MAC = n.GetStringValue(); } },
                { "message", n => { Message = n.GetStringValue(); } },
                { "serverInfo", n => { ServerInfo = n.GetObjectValue<global::IBKR.Api.Kiota.Contract.Models.BrokerageSessionStatus_serverInfo>(global::IBKR.Api.Kiota.Contract.Models.BrokerageSessionStatus_serverInfo.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("authenticated", Authenticated);
            writer.WriteBoolValue("competing", Competing);
            writer.WriteBoolValue("connected", Connected);
            writer.WriteStringValue("MAC", MAC);
            writer.WriteStringValue("message", Message);
            writer.WriteObjectValue<global::IBKR.Api.Kiota.Contract.Models.BrokerageSessionStatus_serverInfo>("serverInfo", ServerInfo);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
