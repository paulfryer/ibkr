// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace IBKR.Api.Kiota.Contract.Models
{
    /// <summary>
    /// Object containing watchlist entry for a single instrument.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class SingleWatchlistEntry : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>All-capital, shorthand security type identifier of the instrument.</summary>
        public global::IBKR.Api.Kiota.Contract.Models.SingleWatchlistEntry_assetClass? AssetClass { get; set; }
        /// <summary>Instrument conid as a string.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? C { get; set; }
#nullable restore
#else
        public string C { get; set; }
#endif
        /// <summary>Rendering of the instrument name in Chinese.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ChineseName { get; set; }
#nullable restore
#else
        public string ChineseName { get; set; }
#endif
        /// <summary>IB contract ID of the instrument.</summary>
        public int? Conid { get; set; }
        /// <summary>Full display presentation of the instrument symbol.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FullName { get; set; }
#nullable restore
#else
        public string FullName { get; set; }
#endif
        /// <summary>Complete display name of the instrument.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>All-capital, shorthand security type identifier of the instrument.</summary>
        public global::IBKR.Api.Kiota.Contract.Models.SingleWatchlistEntry_ST? ST { get; set; }
        /// <summary>Symbol of the instrument.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Ticker { get; set; }
#nullable restore
#else
        public string Ticker { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::IBKR.Api.Kiota.Contract.Models.SingleWatchlistEntry"/> and sets the default values.
        /// </summary>
        public SingleWatchlistEntry()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::IBKR.Api.Kiota.Contract.Models.SingleWatchlistEntry"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::IBKR.Api.Kiota.Contract.Models.SingleWatchlistEntry CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::IBKR.Api.Kiota.Contract.Models.SingleWatchlistEntry();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "assetClass", n => { AssetClass = n.GetEnumValue<global::IBKR.Api.Kiota.Contract.Models.SingleWatchlistEntry_assetClass>(); } },
                { "C", n => { C = n.GetStringValue(); } },
                { "chineseName", n => { ChineseName = n.GetStringValue(); } },
                { "conid", n => { Conid = n.GetIntValue(); } },
                { "fullName", n => { FullName = n.GetStringValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "ST", n => { ST = n.GetEnumValue<global::IBKR.Api.Kiota.Contract.Models.SingleWatchlistEntry_ST>(); } },
                { "ticker", n => { Ticker = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteEnumValue<global::IBKR.Api.Kiota.Contract.Models.SingleWatchlistEntry_assetClass>("assetClass", AssetClass);
            writer.WriteStringValue("C", C);
            writer.WriteStringValue("chineseName", ChineseName);
            writer.WriteIntValue("conid", Conid);
            writer.WriteStringValue("fullName", FullName);
            writer.WriteStringValue("name", Name);
            writer.WriteEnumValue<global::IBKR.Api.Kiota.Contract.Models.SingleWatchlistEntry_ST>("ST", ST);
            writer.WriteStringValue("ticker", Ticker);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
