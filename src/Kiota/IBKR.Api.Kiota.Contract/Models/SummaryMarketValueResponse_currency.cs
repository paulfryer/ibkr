// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace IBKR.Api.Kiota.Contract.Models
{
    /// <summary>
    /// Returns an object containing market value details of the currency and positions held using that currency.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class SummaryMarketValueResponse_currency : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Total cash value of bonds held.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Bonds { get; set; }
#nullable restore
#else
        public string Bonds { get; set; }
#endif
        /// <summary>Total cash value of CFDs held.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Cfd { get; set; }
#nullable restore
#else
        public string Cfd { get; set; }
#endif
        /// <summary>Total cash value of commodities held.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Commodity { get; set; }
#nullable restore
#else
        public string Commodity { get; set; }
#endif
        /// <summary>Total cash value of receivable dividends.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DividendsReceivable { get; set; }
#nullable restore
#else
        public string DividendsReceivable { get; set; }
#endif
        /// <summary>Exchange rate of the labeled currency to the base currency.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ExchangeRate { get; set; }
#nullable restore
#else
        public string ExchangeRate { get; set; }
#endif
        /// <summary>Total cash value of funds held.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Funds { get; set; }
#nullable restore
#else
        public string Funds { get; set; }
#endif
        /// <summary>Total cash value of future options held.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FutureOptions { get; set; }
#nullable restore
#else
        public string FutureOptions { get; set; }
#endif
        /// <summary>Total cash value of futures held.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Futures { get; set; }
#nullable restore
#else
        public string Futures { get; set; }
#endif
        /// <summary>Total cash value of goverment bonds held.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? GovtBonds { get; set; }
#nullable restore
#else
        public string GovtBonds { get; set; }
#endif
        /// <summary>Total cash value of issuer options held.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? IssuerOption { get; set; }
#nullable restore
#else
        public string IssuerOption { get; set; }
#endif
        /// <summary>Total cash value of money market securities held.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MoneyMarket { get; set; }
#nullable restore
#else
        public string MoneyMarket { get; set; }
#endif
        /// <summary>Total Month-to-date interest.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MTDInterest { get; set; }
#nullable restore
#else
        public string MTDInterest { get; set; }
#endif
        /// <summary>Total cash value of mutual funds held.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MutualFunds { get; set; }
#nullable restore
#else
        public string MutualFunds { get; set; }
#endif
        /// <summary>Total cash value of your net liquidty.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? NetLiquidation { get; set; }
#nullable restore
#else
        public string NetLiquidation { get; set; }
#endif
        /// <summary>Total cash value of notional CFDs held.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? NotionalCFD { get; set; }
#nullable restore
#else
        public string NotionalCFD { get; set; }
#endif
        /// <summary>Total cash value of options held.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Options { get; set; }
#nullable restore
#else
        public string Options { get; set; }
#endif
        /// <summary>Total daily realized profit and loss.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RealizedPnl { get; set; }
#nullable restore
#else
        public string RealizedPnl { get; set; }
#endif
        /// <summary>Cash recognized at the time of settlement minus the purchases at time of trade, commissions, taxes, and fees.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SettledCash { get; set; }
#nullable restore
#else
        public string SettledCash { get; set; }
#endif
        /// <summary>Total cash value of stocks held.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Stock { get; set; }
#nullable restore
#else
        public string Stock { get; set; }
#endif
        /// <summary>Total cash value of t-bill bonds held.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TBills { get; set; }
#nullable restore
#else
        public string TBills { get; set; }
#endif
        /// <summary>Lists the total cash held for the given currency.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TotalCash { get; set; }
#nullable restore
#else
        public string TotalCash { get; set; }
#endif
        /// <summary>Total daily unrealized profit and loss.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UnrealizedPnl { get; set; }
#nullable restore
#else
        public string UnrealizedPnl { get; set; }
#endif
        /// <summary>Total cash value of warrants held.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Warrants { get; set; }
#nullable restore
#else
        public string Warrants { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::IBKR.Api.Kiota.Contract.Models.SummaryMarketValueResponse_currency"/> and sets the default values.
        /// </summary>
        public SummaryMarketValueResponse_currency()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::IBKR.Api.Kiota.Contract.Models.SummaryMarketValueResponse_currency"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::IBKR.Api.Kiota.Contract.Models.SummaryMarketValueResponse_currency CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::IBKR.Api.Kiota.Contract.Models.SummaryMarketValueResponse_currency();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "bonds", n => { Bonds = n.GetStringValue(); } },
                { "cfd", n => { Cfd = n.GetStringValue(); } },
                { "commodity", n => { Commodity = n.GetStringValue(); } },
                { "dividends_receivable", n => { DividendsReceivable = n.GetStringValue(); } },
                { "Exchange Rate", n => { ExchangeRate = n.GetStringValue(); } },
                { "funds", n => { Funds = n.GetStringValue(); } },
                { "future_options", n => { FutureOptions = n.GetStringValue(); } },
                { "futures", n => { Futures = n.GetStringValue(); } },
                { "Govt Bonds", n => { GovtBonds = n.GetStringValue(); } },
                { "issuer_option", n => { IssuerOption = n.GetStringValue(); } },
                { "MTD Interest", n => { MTDInterest = n.GetStringValue(); } },
                { "money_market", n => { MoneyMarket = n.GetStringValue(); } },
                { "mutual_funds", n => { MutualFunds = n.GetStringValue(); } },
                { "net_liquidation", n => { NetLiquidation = n.GetStringValue(); } },
                { "Notional CFD", n => { NotionalCFD = n.GetStringValue(); } },
                { "options", n => { Options = n.GetStringValue(); } },
                { "realized_pnl", n => { RealizedPnl = n.GetStringValue(); } },
                { "settled_cash", n => { SettledCash = n.GetStringValue(); } },
                { "stock", n => { Stock = n.GetStringValue(); } },
                { "t_bills", n => { TBills = n.GetStringValue(); } },
                { "total_cash", n => { TotalCash = n.GetStringValue(); } },
                { "unrealized_pnl", n => { UnrealizedPnl = n.GetStringValue(); } },
                { "warrants", n => { Warrants = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("bonds", Bonds);
            writer.WriteStringValue("cfd", Cfd);
            writer.WriteStringValue("commodity", Commodity);
            writer.WriteStringValue("dividends_receivable", DividendsReceivable);
            writer.WriteStringValue("Exchange Rate", ExchangeRate);
            writer.WriteStringValue("funds", Funds);
            writer.WriteStringValue("future_options", FutureOptions);
            writer.WriteStringValue("futures", Futures);
            writer.WriteStringValue("Govt Bonds", GovtBonds);
            writer.WriteStringValue("issuer_option", IssuerOption);
            writer.WriteStringValue("money_market", MoneyMarket);
            writer.WriteStringValue("MTD Interest", MTDInterest);
            writer.WriteStringValue("mutual_funds", MutualFunds);
            writer.WriteStringValue("net_liquidation", NetLiquidation);
            writer.WriteStringValue("Notional CFD", NotionalCFD);
            writer.WriteStringValue("options", Options);
            writer.WriteStringValue("realized_pnl", RealizedPnl);
            writer.WriteStringValue("settled_cash", SettledCash);
            writer.WriteStringValue("stock", Stock);
            writer.WriteStringValue("t_bills", TBills);
            writer.WriteStringValue("total_cash", TotalCash);
            writer.WriteStringValue("unrealized_pnl", UnrealizedPnl);
            writer.WriteStringValue("warrants", Warrants);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
