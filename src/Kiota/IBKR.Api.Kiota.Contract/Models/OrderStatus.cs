// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace IBKR.Api.Kiota.Contract.Models
{
    /// <summary>
    /// Object containing information about the status of an order ticket.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class OrderStatus : IAdditionalDataHolder, IParsable
    {
        /// <summary>The account receiving executions against this order ticket.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Account { get; set; }
#nullable restore
#else
        public string Account { get; set; }
#endif
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Indicates that an alert is active for the order ticket.</summary>
        public int? AlertActive { get; set; }
        /// <summary>Indicates whether an identical order on the opposite side can be placed.</summary>
        public bool? AllowedDuplicateOpposite { get; set; }
        /// <summary>Internal use. Indicates chart periods available for the instrument.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AvailableChartPeriods { get; set; }
#nullable restore
#else
        public string AvailableChartPeriods { get; set; }
#endif
        /// <summary>Average price of fills against the order, if any.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AveragePrice { get; set; }
#nullable restore
#else
        public string AveragePrice { get; set; }
#endif
        /// <summary>Internal use. IB&apos;s UI background color in hex.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BgColor { get; set; }
#nullable restore
#else
        public string BgColor { get; set; }
#endif
        /// <summary>Indicates whether the order ticket can be cancelled.</summary>
        public bool? CannotCancelOrder { get; set; }
        /// <summary>Indicates if the order ticket is hedged, and if so, in what way. 0 = No hedge, A = Attached child hedge order, B = Beta/portfolio hedge</summary>
        public global::IBKR.Api.Kiota.Contract.Models.OrderStatus_child_order_type? ChildOrderType { get; set; }
        /// <summary>Name of the company or asset associated with the instrument.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CompanyName { get; set; }
#nullable restore
#else
        public string CompanyName { get; set; }
#endif
        /// <summary>Contract ID of the order&apos;s instrument.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Conid { get; set; }
#nullable restore
#else
        public string Conid { get; set; }
#endif
        /// <summary>Contract ID and routing destination in format 123456@EXCHANGE.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Conidex { get; set; }
#nullable restore
#else
        public string Conidex { get; set; }
#endif
        /// <summary>Human-readable description of the order&apos;s instrument.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ContractDescription1 { get; set; }
#nullable restore
#else
        public string ContractDescription1 { get; set; }
#endif
        /// <summary>Cumulative filled quantity of the instrument against the order ticket.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CumFill { get; set; }
#nullable restore
#else
        public string CumFill { get; set; }
#endif
        /// <summary>The currency in which the instrument trades and executions are conducted.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Currency { get; set; }
#nullable restore
#else
        public string Currency { get; set; }
#endif
        /// <summary>Indicates whether the order ticket can be deactivated.</summary>
        public bool? DeactivateOrder { get; set; }
        /// <summary>Indicates which fields of the order ticket can be modified currently.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EditableFields { get; set; }
#nullable restore
#else
        public string EditableFields { get; set; }
#endif
        /// <summary>Internal use. A string describing an active Client Portal exit strategy, or the result of its execution.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ExitStrategyChartDescription { get; set; }
#nullable restore
#else
        public string ExitStrategyChartDescription { get; set; }
#endif
        /// <summary>Internal use. The UI-displayed price associated with a Client Portal exist strategy.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ExitStrategyDisplayPrice { get; set; }
#nullable restore
#else
        public string ExitStrategyDisplayPrice { get; set; }
#endif
        /// <summary>Internal use. Indicates the availability of Client Portal exit strategy tool for the order.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ExitStrategyToolAvailability { get; set; }
#nullable restore
#else
        public string ExitStrategyToolAvailability { get; set; }
#endif
        /// <summary>Internal use. IB&apos;s UI foreground color in hex.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FgColor { get; set; }
#nullable restore
#else
        public string FgColor { get; set; }
#endif
        /// <summary>Primary listing exchange of the order ticket&apos;s instrument.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ListingExchange { get; set; }
#nullable restore
#else
        public string ListingExchange { get; set; }
#endif
        /// <summary>Internal use only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OptionAcct { get; set; }
#nullable restore
#else
        public string OptionAcct { get; set; }
#endif
        /// <summary>IB internal order status.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OrderCcpStatus { get; set; }
#nullable restore
#else
        public string OrderCcpStatus { get; set; }
#endif
        /// <summary>The IB account to which the order ticket clears.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OrderClearingAccount { get; set; }
#nullable restore
#else
        public string OrderClearingAccount { get; set; }
#endif
        /// <summary>Human-readable description of the status or current result of the order ticket, meant for UI presentation.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OrderDescription { get; set; }
#nullable restore
#else
        public string OrderDescription { get; set; }
#endif
        /// <summary>Human-readable description of the status or current result of the order ticket, meant for UI presentation. Includes instrument name.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OrderDescriptionWithContract { get; set; }
#nullable restore
#else
        public string OrderDescriptionWithContract { get; set; }
#endif
        /// <summary>The IB-assigned order identifier of the order, as provided in the request path.</summary>
        public int? OrderId { get; set; }
        /// <summary>Indicates whether the order ticket can be modified.</summary>
        public bool? OrderNotEditable { get; set; }
        /// <summary>Human-readable rendering of the order&apos;s status meant for presentation in UI.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OrderStatusDescription { get; set; }
#nullable restore
#else
        public string OrderStatusDescription { get; set; }
#endif
        /// <summary>Status of the order ticket.</summary>
        public global::IBKR.Api.Kiota.Contract.Models.OrderStatus_order_status? OrderStatusProp { get; set; }
        /// <summary>Time of the order&apos;s submission in format YYMMDDhhmmss.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OrderTime { get; set; }
#nullable restore
#else
        public string OrderTime { get; set; }
#endif
        /// <summary>The order&apos;s  IB order type.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OrderType { get; set; }
#nullable restore
#else
        public string OrderType { get; set; }
#endif
        /// <summary>Internal use only. IB-assigned identifier for the status request.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RequestId { get; set; }
#nullable restore
#else
        public string RequestId { get; set; }
#endif
        /// <summary>IB asset class identifier.</summary>
        public global::IBKR.Api.Kiota.Contract.Models.OrderStatus_sec_type? SecType { get; set; }
        /// <summary>IB-assigned meta-identifier used to associate rejected and resubmitted orders following Server Prompts.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ServerId { get; set; }
#nullable restore
#else
        public string ServerId { get; set; }
#endif
        /// <summary>Side of the order ticket.</summary>
        public global::IBKR.Api.Kiota.Contract.Models.OrderStatus_side? Side { get; set; }
        /// <summary>Remaining unfilled size of the order ticket. Will reflect 0.0 if order is filled in full, cancelled, or otherwise resolved and no longer working.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Size { get; set; }
#nullable restore
#else
        public string Size { get; set; }
#endif
        /// <summary>A string reflecting the cumulative fills and total size of the order.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SizeAndFills { get; set; }
#nullable restore
#else
        public string SizeAndFills { get; set; }
#endif
        /// <summary>Internal use only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SubType { get; set; }
#nullable restore
#else
        public string SubType { get; set; }
#endif
        /// <summary>Symbol of the order ticket&apos;s instrument.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Symbol { get; set; }
#nullable restore
#else
        public string Symbol { get; set; }
#endif
        /// <summary>Time in force of the order ticket.</summary>
        public global::IBKR.Api.Kiota.Contract.Models.OrderStatus_tif? Tif { get; set; }
        /// <summary>The total size of the order ticket.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TotalSize { get; set; }
#nullable restore
#else
        public string TotalSize { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::IBKR.Api.Kiota.Contract.Models.OrderStatus"/> and sets the default values.
        /// </summary>
        public OrderStatus()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::IBKR.Api.Kiota.Contract.Models.OrderStatus"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::IBKR.Api.Kiota.Contract.Models.OrderStatus CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::IBKR.Api.Kiota.Contract.Models.OrderStatus();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "account", n => { Account = n.GetStringValue(); } },
                { "alert_active", n => { AlertActive = n.GetIntValue(); } },
                { "allowed_duplicate_opposite", n => { AllowedDuplicateOpposite = n.GetBoolValue(); } },
                { "available_chart_periods", n => { AvailableChartPeriods = n.GetStringValue(); } },
                { "average_price", n => { AveragePrice = n.GetStringValue(); } },
                { "bgColor", n => { BgColor = n.GetStringValue(); } },
                { "cannot_cancel_order", n => { CannotCancelOrder = n.GetBoolValue(); } },
                { "child_order_type", n => { ChildOrderType = n.GetEnumValue<global::IBKR.Api.Kiota.Contract.Models.OrderStatus_child_order_type>(); } },
                { "company_name", n => { CompanyName = n.GetStringValue(); } },
                { "conid", n => { Conid = n.GetStringValue(); } },
                { "conidex", n => { Conidex = n.GetStringValue(); } },
                { "contract_description_1", n => { ContractDescription1 = n.GetStringValue(); } },
                { "cum_fill", n => { CumFill = n.GetStringValue(); } },
                { "currency", n => { Currency = n.GetStringValue(); } },
                { "deactivate_order", n => { DeactivateOrder = n.GetBoolValue(); } },
                { "editable_fields", n => { EditableFields = n.GetStringValue(); } },
                { "exit_strategy_chart_description", n => { ExitStrategyChartDescription = n.GetStringValue(); } },
                { "exit_strategy_display_price", n => { ExitStrategyDisplayPrice = n.GetStringValue(); } },
                { "exit_strategy_tool_availability", n => { ExitStrategyToolAvailability = n.GetStringValue(); } },
                { "fgColor", n => { FgColor = n.GetStringValue(); } },
                { "listing_exchange", n => { ListingExchange = n.GetStringValue(); } },
                { "option_acct", n => { OptionAcct = n.GetStringValue(); } },
                { "order_ccp_status", n => { OrderCcpStatus = n.GetStringValue(); } },
                { "order_clearing_account", n => { OrderClearingAccount = n.GetStringValue(); } },
                { "order_description", n => { OrderDescription = n.GetStringValue(); } },
                { "order_description_with_contract", n => { OrderDescriptionWithContract = n.GetStringValue(); } },
                { "order_id", n => { OrderId = n.GetIntValue(); } },
                { "order_not_editable", n => { OrderNotEditable = n.GetBoolValue(); } },
                { "order_status_description", n => { OrderStatusDescription = n.GetStringValue(); } },
                { "order_status", n => { OrderStatusProp = n.GetEnumValue<global::IBKR.Api.Kiota.Contract.Models.OrderStatus_order_status>(); } },
                { "order_time", n => { OrderTime = n.GetStringValue(); } },
                { "order_type", n => { OrderType = n.GetStringValue(); } },
                { "request_id", n => { RequestId = n.GetStringValue(); } },
                { "sec_type", n => { SecType = n.GetEnumValue<global::IBKR.Api.Kiota.Contract.Models.OrderStatus_sec_type>(); } },
                { "server_id", n => { ServerId = n.GetStringValue(); } },
                { "side", n => { Side = n.GetEnumValue<global::IBKR.Api.Kiota.Contract.Models.OrderStatus_side>(); } },
                { "size", n => { Size = n.GetStringValue(); } },
                { "size_and_fills", n => { SizeAndFills = n.GetStringValue(); } },
                { "sub_type", n => { SubType = n.GetStringValue(); } },
                { "symbol", n => { Symbol = n.GetStringValue(); } },
                { "tif", n => { Tif = n.GetEnumValue<global::IBKR.Api.Kiota.Contract.Models.OrderStatus_tif>(); } },
                { "total_size", n => { TotalSize = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("account", Account);
            writer.WriteIntValue("alert_active", AlertActive);
            writer.WriteBoolValue("allowed_duplicate_opposite", AllowedDuplicateOpposite);
            writer.WriteStringValue("available_chart_periods", AvailableChartPeriods);
            writer.WriteStringValue("average_price", AveragePrice);
            writer.WriteStringValue("bgColor", BgColor);
            writer.WriteBoolValue("cannot_cancel_order", CannotCancelOrder);
            writer.WriteEnumValue<global::IBKR.Api.Kiota.Contract.Models.OrderStatus_child_order_type>("child_order_type", ChildOrderType);
            writer.WriteStringValue("company_name", CompanyName);
            writer.WriteStringValue("conid", Conid);
            writer.WriteStringValue("conidex", Conidex);
            writer.WriteStringValue("contract_description_1", ContractDescription1);
            writer.WriteStringValue("cum_fill", CumFill);
            writer.WriteStringValue("currency", Currency);
            writer.WriteBoolValue("deactivate_order", DeactivateOrder);
            writer.WriteStringValue("editable_fields", EditableFields);
            writer.WriteStringValue("exit_strategy_chart_description", ExitStrategyChartDescription);
            writer.WriteStringValue("exit_strategy_display_price", ExitStrategyDisplayPrice);
            writer.WriteStringValue("exit_strategy_tool_availability", ExitStrategyToolAvailability);
            writer.WriteStringValue("fgColor", FgColor);
            writer.WriteStringValue("listing_exchange", ListingExchange);
            writer.WriteStringValue("option_acct", OptionAcct);
            writer.WriteStringValue("order_ccp_status", OrderCcpStatus);
            writer.WriteStringValue("order_clearing_account", OrderClearingAccount);
            writer.WriteStringValue("order_description", OrderDescription);
            writer.WriteStringValue("order_description_with_contract", OrderDescriptionWithContract);
            writer.WriteIntValue("order_id", OrderId);
            writer.WriteBoolValue("order_not_editable", OrderNotEditable);
            writer.WriteStringValue("order_status_description", OrderStatusDescription);
            writer.WriteEnumValue<global::IBKR.Api.Kiota.Contract.Models.OrderStatus_order_status>("order_status", OrderStatusProp);
            writer.WriteStringValue("order_time", OrderTime);
            writer.WriteStringValue("order_type", OrderType);
            writer.WriteStringValue("request_id", RequestId);
            writer.WriteEnumValue<global::IBKR.Api.Kiota.Contract.Models.OrderStatus_sec_type>("sec_type", SecType);
            writer.WriteStringValue("server_id", ServerId);
            writer.WriteEnumValue<global::IBKR.Api.Kiota.Contract.Models.OrderStatus_side>("side", Side);
            writer.WriteStringValue("size", Size);
            writer.WriteStringValue("size_and_fills", SizeAndFills);
            writer.WriteStringValue("sub_type", SubType);
            writer.WriteStringValue("symbol", Symbol);
            writer.WriteEnumValue<global::IBKR.Api.Kiota.Contract.Models.OrderStatus_tif>("tif", Tif);
            writer.WriteStringValue("total_size", TotalSize);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
