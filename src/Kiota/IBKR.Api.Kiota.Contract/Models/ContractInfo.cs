// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace IBKR.Api.Kiota.Contract.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class ContractInfo : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Allowed to sell shares you own.</summary>
        public bool? AllowSellLong { get; set; }
        /// <summary>Indicates the industry category of the instrument.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Category { get; set; }
#nullable restore
#else
        public string Category { get; set; }
#endif
        /// <summary>Classification of Financial Instrument codes</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CfiCode { get; set; }
#nullable restore
#else
        public string CfiCode { get; set; }
#endif
        /// <summary>The classifier property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Classifier { get; set; }
#nullable restore
#else
        public string Classifier { get; set; }
#endif
        /// <summary>Indicates the name of the company or index.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CompanyName { get; set; }
#nullable restore
#else
        public string CompanyName { get; set; }
#endif
        /// <summary>Indicates the contract identifier of the given contract.</summary>
        public int? ConId { get; set; }
        /// <summary>The contract_clarification_type property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ContractClarificationType { get; set; }
#nullable restore
#else
        public string ContractClarificationType { get; set; }
#endif
        /// <summary>Indicates the year and month the contract expires.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ContractMonth { get; set; }
#nullable restore
#else
        public string ContractMonth { get; set; }
#endif
        /// <summary>Base currency contract is traded in.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Currency { get; set; }
#nullable restore
#else
        public string Currency { get; set; }
#endif
        /// <summary>Returns the CUSIP for the given instrument. Only used in BOND trading.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Cusip { get; set; }
#nullable restore
#else
        public string Cusip { get; set; }
#endif
        /// <summary>Indicates the primary exchange for which the contract can be traded.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Exchange { get; set; }
#nullable restore
#else
        public string Exchange { get; set; }
#endif
        /// <summary>Returns the expiration month of the contract.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ExpiryFull { get; set; }
#nullable restore
#else
        public string ExpiryFull { get; set; }
#endif
        /// <summary>Specific group of companies or businesses.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Industry { get; set; }
#nullable restore
#else
        public string Industry { get; set; }
#endif
        /// <summary>Asset class of the instrument.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? InstrumentType { get; set; }
#nullable restore
#else
        public string InstrumentType { get; set; }
#endif
        /// <summary>Indicates if the contract supports zero commission trading.</summary>
        public bool? IsZeroCommissionSecurity { get; set; }
        /// <summary>Contractâ€™s symbol from primary exchange. For options it is the OCC symbol.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LocalSymbol { get; set; }
#nullable restore
#else
        public string LocalSymbol { get; set; }
#endif
        /// <summary>Indicates the final maturity date of the given contract.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MaturityDate { get; set; }
#nullable restore
#else
        public string MaturityDate { get; set; }
#endif
        /// <summary>Indicates the multiplier of the contract.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Multiplier { get; set; }
#nullable restore
#else
        public string Multiplier { get; set; }
#endif
        /// <summary>Indicates if the contract can be traded outside regular trading hours or not.</summary>
        public bool? RTH { get; set; }
        /// <summary>Indicates if the contract can be smart routed or not.</summary>
        public bool? SmartAvailable { get; set; }
        /// <summary>Underlying symbol</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Symbol { get; set; }
#nullable restore
#else
        public string Symbol { get; set; }
#endif
        /// <summary>Indicates the display name of the contract, as shown with Client Portal.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Text { get; set; }
#nullable restore
#else
        public string Text { get; set; }
#endif
        /// <summary>Designated trading class of the contract.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TradingClass { get; set; }
#nullable restore
#else
        public string TradingClass { get; set; }
#endif
        /// <summary>Underlying contract identifier for the requested contract.</summary>
        public int? UnderlyingConId { get; set; }
        /// <summary>Indicates the issuer of the underlying.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UnderlyingIssuer { get; set; }
#nullable restore
#else
        public string UnderlyingIssuer { get; set; }
#endif
        /// <summary>Comma separated list of support exchanges or trading venues.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ValidExchanges { get; set; }
#nullable restore
#else
        public string ValidExchanges { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::IBKR.Api.Kiota.Contract.Models.ContractInfo"/> and sets the default values.
        /// </summary>
        public ContractInfo()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::IBKR.Api.Kiota.Contract.Models.ContractInfo"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::IBKR.Api.Kiota.Contract.Models.ContractInfo CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::IBKR.Api.Kiota.Contract.Models.ContractInfo();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "allow_sell_long", n => { AllowSellLong = n.GetBoolValue(); } },
                { "category", n => { Category = n.GetStringValue(); } },
                { "cfi_code", n => { CfiCode = n.GetStringValue(); } },
                { "classifier", n => { Classifier = n.GetStringValue(); } },
                { "company_name", n => { CompanyName = n.GetStringValue(); } },
                { "con_id", n => { ConId = n.GetIntValue(); } },
                { "contract_clarification_type", n => { ContractClarificationType = n.GetStringValue(); } },
                { "contract_month", n => { ContractMonth = n.GetStringValue(); } },
                { "currency", n => { Currency = n.GetStringValue(); } },
                { "cusip", n => { Cusip = n.GetStringValue(); } },
                { "exchange", n => { Exchange = n.GetStringValue(); } },
                { "expiry_full", n => { ExpiryFull = n.GetStringValue(); } },
                { "industry", n => { Industry = n.GetStringValue(); } },
                { "instrument_type", n => { InstrumentType = n.GetStringValue(); } },
                { "is_zero_commission_security", n => { IsZeroCommissionSecurity = n.GetBoolValue(); } },
                { "local_symbol", n => { LocalSymbol = n.GetStringValue(); } },
                { "maturity_date", n => { MaturityDate = n.GetStringValue(); } },
                { "multiplier", n => { Multiplier = n.GetStringValue(); } },
                { "r_t_h", n => { RTH = n.GetBoolValue(); } },
                { "smart_available", n => { SmartAvailable = n.GetBoolValue(); } },
                { "symbol", n => { Symbol = n.GetStringValue(); } },
                { "text", n => { Text = n.GetStringValue(); } },
                { "trading_class", n => { TradingClass = n.GetStringValue(); } },
                { "underlying_con_id", n => { UnderlyingConId = n.GetIntValue(); } },
                { "underlying_issuer", n => { UnderlyingIssuer = n.GetStringValue(); } },
                { "valid_exchanges", n => { ValidExchanges = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("allow_sell_long", AllowSellLong);
            writer.WriteStringValue("category", Category);
            writer.WriteStringValue("cfi_code", CfiCode);
            writer.WriteStringValue("classifier", Classifier);
            writer.WriteStringValue("company_name", CompanyName);
            writer.WriteIntValue("con_id", ConId);
            writer.WriteStringValue("contract_clarification_type", ContractClarificationType);
            writer.WriteStringValue("contract_month", ContractMonth);
            writer.WriteStringValue("currency", Currency);
            writer.WriteStringValue("cusip", Cusip);
            writer.WriteStringValue("exchange", Exchange);
            writer.WriteStringValue("expiry_full", ExpiryFull);
            writer.WriteStringValue("industry", Industry);
            writer.WriteStringValue("instrument_type", InstrumentType);
            writer.WriteBoolValue("is_zero_commission_security", IsZeroCommissionSecurity);
            writer.WriteStringValue("local_symbol", LocalSymbol);
            writer.WriteStringValue("maturity_date", MaturityDate);
            writer.WriteStringValue("multiplier", Multiplier);
            writer.WriteBoolValue("r_t_h", RTH);
            writer.WriteBoolValue("smart_available", SmartAvailable);
            writer.WriteStringValue("symbol", Symbol);
            writer.WriteStringValue("text", Text);
            writer.WriteStringValue("trading_class", TradingClass);
            writer.WriteIntValue("underlying_con_id", UnderlyingConId);
            writer.WriteStringValue("underlying_issuer", UnderlyingIssuer);
            writer.WriteStringValue("valid_exchanges", ValidExchanges);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
