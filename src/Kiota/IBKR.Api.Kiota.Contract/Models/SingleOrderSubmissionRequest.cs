// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace IBKR.Api.Kiota.Contract.Models
{
    /// <summary>
    /// A single order ticket.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class SingleOrderSubmissionRequest : IAdditionalDataHolder, IParsable
    {
        /// <summary>Receiving account of the order ticket.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AcctId { get; set; }
#nullable restore
#else
        public string AcctId { get; set; }
#endif
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Additional price value used in certain order types, such as stop orders.</summary>
        public double? AuxPrice { get; set; }
        /// <summary>Quantity of currency used with cash quantity orders.</summary>
        public double? CashQty { get; set; }
        /// <summary>Client-configurable order identifier.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? COID { get; set; }
#nullable restore
#else
        public string COID { get; set; }
#endif
        /// <summary>IB contract ID of the instrument.</summary>
        public int? Conid { get; set; }
        /// <summary>Contract ID and routing destination together in format 123456@EXCHANGE.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Conidex { get; set; }
#nullable restore
#else
        public string Conidex { get; set; }
#endif
        /// <summary>Indicates that a forex order is for currency conversion and should not entail a virtual forex position in the account, where applicable.</summary>
        public bool? IsCcyConv { get; set; }
        /// <summary>Indicates that all orders in the containing array are to be treated as an OCA group.</summary>
        public bool? IsSingleGroup { get; set; }
        /// <summary>The listing exchange of the instrument.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ListingExchange { get; set; }
#nullable restore
#else
        public string ListingExchange { get; set; }
#endif
        /// <summary>IB order type identifier.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OrderType { get; set; }
#nullable restore
#else
        public string OrderType { get; set; }
#endif
        /// <summary>Instructs IB to permit the order to execute outside of regular trading hours.</summary>
        public bool? OutsideRTH { get; set; }
        /// <summary>If the order ticket is a child order in a bracket, the parentId field must be set equal to the cOID provided for the parent order.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ParentId { get; set; }
#nullable restore
#else
        public string ParentId { get; set; }
#endif
        /// <summary>Price of the order ticket, where applicable.</summary>
        public double? Price { get; set; }
        /// <summary>Quantity of the order ticket in units of the instrument.</summary>
        public double? Quantity { get; set; }
        /// <summary>IB internal identifier for order entry UI element.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Referrer { get; set; }
#nullable restore
#else
        public string Referrer { get; set; }
#endif
        /// <summary>IB asset class identifier.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SecType { get; set; }
#nullable restore
#else
        public string SecType { get; set; }
#endif
        /// <summary>Side of the order ticket.</summary>
        public global::IBKR.Api.Kiota.Contract.Models.SingleOrderSubmissionRequest_side? Side { get; set; }
        /// <summary>The name of an execution algorithm.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Strategy { get; set; }
#nullable restore
#else
        public string Strategy { get; set; }
#endif
        /// <summary>Parameters governing the selected algorithm, if applicable.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::IBKR.Api.Kiota.Contract.Models.SingleOrderSubmissionRequest_strategyParameters? StrategyParameters { get; set; }
#nullable restore
#else
        public global::IBKR.Api.Kiota.Contract.Models.SingleOrderSubmissionRequest_strategyParameters StrategyParameters { get; set; }
#endif
        /// <summary>Ticker symbol of the instrument.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Ticker { get; set; }
#nullable restore
#else
        public string Ticker { get; set; }
#endif
        /// <summary>Time in force of the order ticket.</summary>
        public global::IBKR.Api.Kiota.Contract.Models.SingleOrderSubmissionRequest_tif? Tif { get; set; }
        /// <summary>Offset used with Trailing orders.</summary>
        public double? TrailingAmt { get; set; }
        /// <summary>Specifies the type of trailing used with a Trailing order.</summary>
        public global::IBKR.Api.Kiota.Contract.Models.SingleOrderSubmissionRequest_trailingType? TrailingType { get; set; }
        /// <summary>Instructs IB to apply the Price Management Algo.</summary>
        public bool? UseAdaptive { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::IBKR.Api.Kiota.Contract.Models.SingleOrderSubmissionRequest"/> and sets the default values.
        /// </summary>
        public SingleOrderSubmissionRequest()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::IBKR.Api.Kiota.Contract.Models.SingleOrderSubmissionRequest"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::IBKR.Api.Kiota.Contract.Models.SingleOrderSubmissionRequest CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::IBKR.Api.Kiota.Contract.Models.SingleOrderSubmissionRequest();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "acctId", n => { AcctId = n.GetStringValue(); } },
                { "auxPrice", n => { AuxPrice = n.GetDoubleValue(); } },
                { "cOID", n => { COID = n.GetStringValue(); } },
                { "cashQty", n => { CashQty = n.GetDoubleValue(); } },
                { "conid", n => { Conid = n.GetIntValue(); } },
                { "conidex", n => { Conidex = n.GetStringValue(); } },
                { "isCcyConv", n => { IsCcyConv = n.GetBoolValue(); } },
                { "isSingleGroup", n => { IsSingleGroup = n.GetBoolValue(); } },
                { "listingExchange", n => { ListingExchange = n.GetStringValue(); } },
                { "orderType", n => { OrderType = n.GetStringValue(); } },
                { "outsideRTH", n => { OutsideRTH = n.GetBoolValue(); } },
                { "parentId", n => { ParentId = n.GetStringValue(); } },
                { "price", n => { Price = n.GetDoubleValue(); } },
                { "quantity", n => { Quantity = n.GetDoubleValue(); } },
                { "referrer", n => { Referrer = n.GetStringValue(); } },
                { "secType", n => { SecType = n.GetStringValue(); } },
                { "side", n => { Side = n.GetEnumValue<global::IBKR.Api.Kiota.Contract.Models.SingleOrderSubmissionRequest_side>(); } },
                { "strategy", n => { Strategy = n.GetStringValue(); } },
                { "strategyParameters", n => { StrategyParameters = n.GetObjectValue<global::IBKR.Api.Kiota.Contract.Models.SingleOrderSubmissionRequest_strategyParameters>(global::IBKR.Api.Kiota.Contract.Models.SingleOrderSubmissionRequest_strategyParameters.CreateFromDiscriminatorValue); } },
                { "ticker", n => { Ticker = n.GetStringValue(); } },
                { "tif", n => { Tif = n.GetEnumValue<global::IBKR.Api.Kiota.Contract.Models.SingleOrderSubmissionRequest_tif>(); } },
                { "trailingAmt", n => { TrailingAmt = n.GetDoubleValue(); } },
                { "trailingType", n => { TrailingType = n.GetEnumValue<global::IBKR.Api.Kiota.Contract.Models.SingleOrderSubmissionRequest_trailingType>(); } },
                { "useAdaptive", n => { UseAdaptive = n.GetBoolValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("acctId", AcctId);
            writer.WriteDoubleValue("auxPrice", AuxPrice);
            writer.WriteDoubleValue("cashQty", CashQty);
            writer.WriteStringValue("cOID", COID);
            writer.WriteIntValue("conid", Conid);
            writer.WriteStringValue("conidex", Conidex);
            writer.WriteBoolValue("isCcyConv", IsCcyConv);
            writer.WriteBoolValue("isSingleGroup", IsSingleGroup);
            writer.WriteStringValue("listingExchange", ListingExchange);
            writer.WriteStringValue("orderType", OrderType);
            writer.WriteBoolValue("outsideRTH", OutsideRTH);
            writer.WriteStringValue("parentId", ParentId);
            writer.WriteDoubleValue("price", Price);
            writer.WriteDoubleValue("quantity", Quantity);
            writer.WriteStringValue("referrer", Referrer);
            writer.WriteStringValue("secType", SecType);
            writer.WriteEnumValue<global::IBKR.Api.Kiota.Contract.Models.SingleOrderSubmissionRequest_side>("side", Side);
            writer.WriteStringValue("strategy", Strategy);
            writer.WriteObjectValue<global::IBKR.Api.Kiota.Contract.Models.SingleOrderSubmissionRequest_strategyParameters>("strategyParameters", StrategyParameters);
            writer.WriteStringValue("ticker", Ticker);
            writer.WriteEnumValue<global::IBKR.Api.Kiota.Contract.Models.SingleOrderSubmissionRequest_tif>("tif", Tif);
            writer.WriteDoubleValue("trailingAmt", TrailingAmt);
            writer.WriteEnumValue<global::IBKR.Api.Kiota.Contract.Models.SingleOrderSubmissionRequest_trailingType>("trailingType", TrailingType);
            writer.WriteBoolValue("useAdaptive", UseAdaptive);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
