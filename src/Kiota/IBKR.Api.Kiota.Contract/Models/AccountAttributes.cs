// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace IBKR.Api.Kiota.Contract.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class AccountAttributes : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>User-defined alias assigned to the account for easy identification.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AccountAlias { get; set; }
#nullable restore
#else
        public string AccountAlias { get; set; }
#endif
        /// <summary>Unix epoch timestamp of account opening.</summary>
        public int? AccountStatus { get; set; }
        /// <summary>A name assigned to the account, typically the account holder name or business entity.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AccountTitle { get; set; }
#nullable restore
#else
        public string AccountTitle { get; set; }
#endif
        /// <summary>The account&apos;s virtual account number, or otherwise its IB accountId if no VAN is set.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AccountVan { get; set; }
#nullable restore
#else
        public string AccountVan { get; set; }
#endif
        /// <summary>Identifies the type of client with which the account is associated, such as an individual or LLC.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AcctCustType { get; set; }
#nullable restore
#else
        public string AcctCustType { get; set; }
#endif
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Indicates whether account can receive live orders (do not mix with paper trading).</summary>
        public bool? BrokerageAccess { get; set; }
        /// <summary>A descriptor of the nature of the account, reflecting the responsible group within IB.</summary>
        public global::IBKR.Api.Kiota.Contract.Models.AccountAttributes_businessType? BusinessType { get; set; }
        /// <summary>Status of the account with respect to clearing at IB. O is open, P pending, N new, A abandoned, C closed, R rejected.</summary>
        public global::IBKR.Api.Kiota.Contract.Models.AccountAttributes_clearingStatus? ClearingStatus { get; set; }
        /// <summary>Indicates a Covestor account.</summary>
        public bool? Covestor { get; set; }
        /// <summary>Base currency of the account.</summary>
        public global::IBKR.Api.Kiota.Contract.Models.AccountAttributes_currency? Currency { get; set; }
        /// <summary>Internal human-readable description of the account.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Desc { get; set; }
#nullable restore
#else
        public string Desc { get; set; }
#endif
        /// <summary>Displayed name of the account in UI. Will reflect either the accountId or accountAlias, if set.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DisplayName { get; set; }
#nullable restore
#else
        public string DisplayName { get; set; }
#endif
        /// <summary>Indicates that the account is managed by a financial advisor.</summary>
        public bool? FaClient { get; set; }
        /// <summary>IB business entity under which the account resides.</summary>
        public global::IBKR.Api.Kiota.Contract.Models.AccountAttributes_ibEntity? IbEntity { get; set; }
        /// <summary>The account&apos;s IB accountId.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>Indicates that trading by the client is disabled in the account.</summary>
        public bool? NoClientTrading { get; set; }
        /// <summary>Describes account relations in partitioned or multiplexed (segemented) account structures.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::IBKR.Api.Kiota.Contract.Models.AccountAttributes_parent? Parent { get; set; }
#nullable restore
#else
        public global::IBKR.Api.Kiota.Contract.Models.AccountAttributes_parent Parent { get; set; }
#endif
        /// <summary>Indicates whether account has a prepaid crypto segment (Crypto Plus) with PAXOS.</summary>
        public bool? PrepaidCryptoP { get; set; }
        /// <summary>Indicates whether account has a prepaid crypto segment (Crypto Plus) with ZEROHASH.</summary>
        public bool? PrepaidCryptoZ { get; set; }
        /// <summary>Indicates that virtual forex positions are tracked in the account.</summary>
        public bool? TrackVirtualFXPortfolio { get; set; }
        /// <summary>Internal identifier used by IB to reflect the trading permissions of the account.</summary>
        public global::IBKR.Api.Kiota.Contract.Models.AccountAttributes_tradingType? TradingType { get; set; }
        /// <summary>Indicates whether the account exists in production, paper, or demo environments.</summary>
        public global::IBKR.Api.Kiota.Contract.Models.AccountAttributes_type? Type { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::IBKR.Api.Kiota.Contract.Models.AccountAttributes"/> and sets the default values.
        /// </summary>
        public AccountAttributes()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::IBKR.Api.Kiota.Contract.Models.AccountAttributes"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::IBKR.Api.Kiota.Contract.Models.AccountAttributes CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::IBKR.Api.Kiota.Contract.Models.AccountAttributes();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "accountAlias", n => { AccountAlias = n.GetStringValue(); } },
                { "accountStatus", n => { AccountStatus = n.GetIntValue(); } },
                { "accountTitle", n => { AccountTitle = n.GetStringValue(); } },
                { "accountVan", n => { AccountVan = n.GetStringValue(); } },
                { "acctCustType", n => { AcctCustType = n.GetStringValue(); } },
                { "brokerageAccess", n => { BrokerageAccess = n.GetBoolValue(); } },
                { "businessType", n => { BusinessType = n.GetEnumValue<global::IBKR.Api.Kiota.Contract.Models.AccountAttributes_businessType>(); } },
                { "clearingStatus", n => { ClearingStatus = n.GetEnumValue<global::IBKR.Api.Kiota.Contract.Models.AccountAttributes_clearingStatus>(); } },
                { "covestor", n => { Covestor = n.GetBoolValue(); } },
                { "currency", n => { Currency = n.GetEnumValue<global::IBKR.Api.Kiota.Contract.Models.AccountAttributes_currency>(); } },
                { "desc", n => { Desc = n.GetStringValue(); } },
                { "displayName", n => { DisplayName = n.GetStringValue(); } },
                { "faClient", n => { FaClient = n.GetBoolValue(); } },
                { "ibEntity", n => { IbEntity = n.GetEnumValue<global::IBKR.Api.Kiota.Contract.Models.AccountAttributes_ibEntity>(); } },
                { "id", n => { Id = n.GetStringValue(); } },
                { "noClientTrading", n => { NoClientTrading = n.GetBoolValue(); } },
                { "parent", n => { Parent = n.GetObjectValue<global::IBKR.Api.Kiota.Contract.Models.AccountAttributes_parent>(global::IBKR.Api.Kiota.Contract.Models.AccountAttributes_parent.CreateFromDiscriminatorValue); } },
                { "PrepaidCrypto-P", n => { PrepaidCryptoP = n.GetBoolValue(); } },
                { "PrepaidCrypto-Z", n => { PrepaidCryptoZ = n.GetBoolValue(); } },
                { "trackVirtualFXPortfolio", n => { TrackVirtualFXPortfolio = n.GetBoolValue(); } },
                { "tradingType", n => { TradingType = n.GetEnumValue<global::IBKR.Api.Kiota.Contract.Models.AccountAttributes_tradingType>(); } },
                { "type", n => { Type = n.GetEnumValue<global::IBKR.Api.Kiota.Contract.Models.AccountAttributes_type>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("accountAlias", AccountAlias);
            writer.WriteIntValue("accountStatus", AccountStatus);
            writer.WriteStringValue("accountTitle", AccountTitle);
            writer.WriteStringValue("accountVan", AccountVan);
            writer.WriteStringValue("acctCustType", AcctCustType);
            writer.WriteBoolValue("brokerageAccess", BrokerageAccess);
            writer.WriteEnumValue<global::IBKR.Api.Kiota.Contract.Models.AccountAttributes_businessType>("businessType", BusinessType);
            writer.WriteEnumValue<global::IBKR.Api.Kiota.Contract.Models.AccountAttributes_clearingStatus>("clearingStatus", ClearingStatus);
            writer.WriteBoolValue("covestor", Covestor);
            writer.WriteEnumValue<global::IBKR.Api.Kiota.Contract.Models.AccountAttributes_currency>("currency", Currency);
            writer.WriteStringValue("desc", Desc);
            writer.WriteStringValue("displayName", DisplayName);
            writer.WriteBoolValue("faClient", FaClient);
            writer.WriteEnumValue<global::IBKR.Api.Kiota.Contract.Models.AccountAttributes_ibEntity>("ibEntity", IbEntity);
            writer.WriteStringValue("id", Id);
            writer.WriteBoolValue("noClientTrading", NoClientTrading);
            writer.WriteObjectValue<global::IBKR.Api.Kiota.Contract.Models.AccountAttributes_parent>("parent", Parent);
            writer.WriteBoolValue("PrepaidCrypto-P", PrepaidCryptoP);
            writer.WriteBoolValue("PrepaidCrypto-Z", PrepaidCryptoZ);
            writer.WriteBoolValue("trackVirtualFXPortfolio", TrackVirtualFXPortfolio);
            writer.WriteEnumValue<global::IBKR.Api.Kiota.Contract.Models.AccountAttributes_tradingType>("tradingType", TradingType);
            writer.WriteEnumValue<global::IBKR.Api.Kiota.Contract.Models.AccountAttributes_type>("type", Type);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
