// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace IBKR.Api.Kiota.Contract.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class UserAccountsResponse_chartPeriods : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The BOND property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? BOND { get; set; }
#nullable restore
#else
        public List<string> BOND { get; set; }
#endif
        /// <summary>The CASH property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? CASH { get; set; }
#nullable restore
#else
        public List<string> CASH { get; set; }
#endif
        /// <summary>The CFD property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? CFD { get; set; }
#nullable restore
#else
        public List<string> CFD { get; set; }
#endif
        /// <summary>The CMDTY property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? CMDTY { get; set; }
#nullable restore
#else
        public List<string> CMDTY { get; set; }
#endif
        /// <summary>The CRYPTO property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? CRYPTO { get; set; }
#nullable restore
#else
        public List<string> CRYPTO { get; set; }
#endif
        /// <summary>The FOP property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? FOP { get; set; }
#nullable restore
#else
        public List<string> FOP { get; set; }
#endif
        /// <summary>The FUND property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? FUND { get; set; }
#nullable restore
#else
        public List<string> FUND { get; set; }
#endif
        /// <summary>The FUT property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? FUT { get; set; }
#nullable restore
#else
        public List<string> FUT { get; set; }
#endif
        /// <summary>The IND property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? IND { get; set; }
#nullable restore
#else
        public List<string> IND { get; set; }
#endif
        /// <summary>The IOPT property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? IOPT { get; set; }
#nullable restore
#else
        public List<string> IOPT { get; set; }
#endif
        /// <summary>The OPT property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? OPT { get; set; }
#nullable restore
#else
        public List<string> OPT { get; set; }
#endif
        /// <summary>The PHYSS property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? PHYSS { get; set; }
#nullable restore
#else
        public List<string> PHYSS { get; set; }
#endif
        /// <summary>The STK property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? STK { get; set; }
#nullable restore
#else
        public List<string> STK { get; set; }
#endif
        /// <summary>The WAR property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? WAR { get; set; }
#nullable restore
#else
        public List<string> WAR { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::IBKR.Api.Kiota.Contract.Models.UserAccountsResponse_chartPeriods"/> and sets the default values.
        /// </summary>
        public UserAccountsResponse_chartPeriods()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::IBKR.Api.Kiota.Contract.Models.UserAccountsResponse_chartPeriods"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::IBKR.Api.Kiota.Contract.Models.UserAccountsResponse_chartPeriods CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::IBKR.Api.Kiota.Contract.Models.UserAccountsResponse_chartPeriods();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "BOND", n => { BOND = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "CASH", n => { CASH = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "CFD", n => { CFD = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "CMDTY", n => { CMDTY = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "CRYPTO", n => { CRYPTO = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "FOP", n => { FOP = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "FUND", n => { FUND = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "FUT", n => { FUT = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "IND", n => { IND = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "IOPT", n => { IOPT = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "OPT", n => { OPT = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "PHYSS", n => { PHYSS = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "STK", n => { STK = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "WAR", n => { WAR = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfPrimitiveValues<string>("BOND", BOND);
            writer.WriteCollectionOfPrimitiveValues<string>("CASH", CASH);
            writer.WriteCollectionOfPrimitiveValues<string>("CFD", CFD);
            writer.WriteCollectionOfPrimitiveValues<string>("CMDTY", CMDTY);
            writer.WriteCollectionOfPrimitiveValues<string>("CRYPTO", CRYPTO);
            writer.WriteCollectionOfPrimitiveValues<string>("FOP", FOP);
            writer.WriteCollectionOfPrimitiveValues<string>("FUND", FUND);
            writer.WriteCollectionOfPrimitiveValues<string>("FUT", FUT);
            writer.WriteCollectionOfPrimitiveValues<string>("IND", IND);
            writer.WriteCollectionOfPrimitiveValues<string>("IOPT", IOPT);
            writer.WriteCollectionOfPrimitiveValues<string>("OPT", OPT);
            writer.WriteCollectionOfPrimitiveValues<string>("PHYSS", PHYSS);
            writer.WriteCollectionOfPrimitiveValues<string>("STK", STK);
            writer.WriteCollectionOfPrimitiveValues<string>("WAR", WAR);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
