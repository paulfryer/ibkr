// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace IBKR.Api.Kiota.Contract.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class SecDefInfoResponse : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Name of the company for the given contract.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CompanyName { get; set; }
#nullable restore
#else
        public string CompanyName { get; set; }
#endif
        /// <summary>Contract Identifier of the given contract.</summary>
        public int? Conid { get; set; }
        /// <summary>Traded currency allowed for the given contract.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Currency { get; set; }
#nullable restore
#else
        public string Currency { get; set; }
#endif
        /// <summary>Exchange requesting data for.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Exchange { get; set; }
#nullable restore
#else
        public string Exchange { get; set; }
#endif
        /// <summary>Primary listing exchange for the given contract.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ListingExchange { get; set; }
#nullable restore
#else
        public string ListingExchange { get; set; }
#endif
        /// <summary>Date of expiration for the given contract.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MaturityDate { get; set; }
#nullable restore
#else
        public string MaturityDate { get; set; }
#endif
        /// <summary>The priceRendering property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public UntypedNode? PriceRendering { get; set; }
#nullable restore
#else
        public UntypedNode PriceRendering { get; set; }
#endif
        /// <summary>Set the right for the given contract. * `C` - for Call options. * `P` - for Put options.</summary>
        public global::IBKR.Api.Kiota.Contract.Models.SecDefInfoResponse_right? Right { get; set; }
        /// <summary>Security type for the given contract.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SecType { get; set; }
#nullable restore
#else
        public string SecType { get; set; }
#endif
        /// <summary>Returns the given strike value for the given contract.</summary>
        public double? Strike { get; set; }
        /// <summary>Ticker symbol for the given contract</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Ticker { get; set; }
#nullable restore
#else
        public string Ticker { get; set; }
#endif
        /// <summary>Series of all valid exchanges the contract can be traded on in a single comma-separated string.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ValidExchanges { get; set; }
#nullable restore
#else
        public string ValidExchanges { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::IBKR.Api.Kiota.Contract.Models.SecDefInfoResponse"/> and sets the default values.
        /// </summary>
        public SecDefInfoResponse()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::IBKR.Api.Kiota.Contract.Models.SecDefInfoResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::IBKR.Api.Kiota.Contract.Models.SecDefInfoResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::IBKR.Api.Kiota.Contract.Models.SecDefInfoResponse();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "companyName", n => { CompanyName = n.GetStringValue(); } },
                { "conid", n => { Conid = n.GetIntValue(); } },
                { "currency", n => { Currency = n.GetStringValue(); } },
                { "exchange", n => { Exchange = n.GetStringValue(); } },
                { "listingExchange", n => { ListingExchange = n.GetStringValue(); } },
                { "maturityDate", n => { MaturityDate = n.GetStringValue(); } },
                { "priceRendering", n => { PriceRendering = n.GetObjectValue<UntypedNode>(UntypedNode.CreateFromDiscriminatorValue); } },
                { "right", n => { Right = n.GetEnumValue<global::IBKR.Api.Kiota.Contract.Models.SecDefInfoResponse_right>(); } },
                { "secType", n => { SecType = n.GetStringValue(); } },
                { "strike", n => { Strike = n.GetDoubleValue(); } },
                { "ticker", n => { Ticker = n.GetStringValue(); } },
                { "validExchanges", n => { ValidExchanges = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("companyName", CompanyName);
            writer.WriteIntValue("conid", Conid);
            writer.WriteStringValue("currency", Currency);
            writer.WriteStringValue("exchange", Exchange);
            writer.WriteStringValue("listingExchange", ListingExchange);
            writer.WriteStringValue("maturityDate", MaturityDate);
            writer.WriteObjectValue<UntypedNode>("priceRendering", PriceRendering);
            writer.WriteEnumValue<global::IBKR.Api.Kiota.Contract.Models.SecDefInfoResponse_right>("right", Right);
            writer.WriteStringValue("secType", SecType);
            writer.WriteDoubleValue("strike", Strike);
            writer.WriteStringValue("ticker", Ticker);
            writer.WriteStringValue("validExchanges", ValidExchanges);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
