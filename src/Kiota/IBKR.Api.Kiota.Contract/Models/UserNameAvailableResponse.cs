// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace IBKR.Api.Kiota.Contract.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class UserNameAvailableResponse : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The error property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::IBKR.Api.Kiota.Contract.Models.ErrorResponse? Error { get; set; }
#nullable restore
#else
        public global::IBKR.Api.Kiota.Contract.Models.ErrorResponse Error { get; set; }
#endif
        /// <summary>The errorDescription property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ErrorDescription { get; set; }
#nullable restore
#else
        public string ErrorDescription { get; set; }
#endif
        /// <summary>The hasError property</summary>
        public bool? HasError { get; set; }
        /// <summary>The isAvailable property</summary>
        public bool? IsAvailable { get; set; }
        /// <summary>The isValid property</summary>
        public bool? IsValid { get; set; }
        /// <summary>The suggestedUserName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? SuggestedUserName { get; set; }
#nullable restore
#else
        public List<string> SuggestedUserName { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::IBKR.Api.Kiota.Contract.Models.UserNameAvailableResponse"/> and sets the default values.
        /// </summary>
        public UserNameAvailableResponse()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::IBKR.Api.Kiota.Contract.Models.UserNameAvailableResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::IBKR.Api.Kiota.Contract.Models.UserNameAvailableResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::IBKR.Api.Kiota.Contract.Models.UserNameAvailableResponse();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "error", n => { Error = n.GetObjectValue<global::IBKR.Api.Kiota.Contract.Models.ErrorResponse>(global::IBKR.Api.Kiota.Contract.Models.ErrorResponse.CreateFromDiscriminatorValue); } },
                { "errorDescription", n => { ErrorDescription = n.GetStringValue(); } },
                { "hasError", n => { HasError = n.GetBoolValue(); } },
                { "isAvailable", n => { IsAvailable = n.GetBoolValue(); } },
                { "isValid", n => { IsValid = n.GetBoolValue(); } },
                { "suggestedUserName", n => { SuggestedUserName = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::IBKR.Api.Kiota.Contract.Models.ErrorResponse>("error", Error);
            writer.WriteStringValue("errorDescription", ErrorDescription);
            writer.WriteBoolValue("hasError", HasError);
            writer.WriteBoolValue("isAvailable", IsAvailable);
            writer.WriteBoolValue("isValid", IsValid);
            writer.WriteCollectionOfPrimitiveValues<string>("suggestedUserName", SuggestedUserName);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
