// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace IBKR.Api.Kiota.Contract.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class UserAccountsResponse : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Returns an array of all accessible accountIds.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Accounts { get; set; }
#nullable restore
#else
        public List<string> Accounts { get; set; }
#endif
        /// <summary>Returns an json object for each accessible accountâ€™s properties.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::IBKR.Api.Kiota.Contract.Models.UserAccountsResponse_acctProps? AcctProps { get; set; }
#nullable restore
#else
        public global::IBKR.Api.Kiota.Contract.Models.UserAccountsResponse_acctProps AcctProps { get; set; }
#endif
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The aliases property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::IBKR.Api.Kiota.Contract.Models.UserAccountsResponse_aliases? Aliases { get; set; }
#nullable restore
#else
        public global::IBKR.Api.Kiota.Contract.Models.UserAccountsResponse_aliases Aliases { get; set; }
#endif
        /// <summary>The allowFeatures property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::IBKR.Api.Kiota.Contract.Models.UserAccountsResponse_allowFeatures? AllowFeatures { get; set; }
#nullable restore
#else
        public global::IBKR.Api.Kiota.Contract.Models.UserAccountsResponse_allowFeatures AllowFeatures { get; set; }
#endif
        /// <summary>The chartPeriods property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::IBKR.Api.Kiota.Contract.Models.UserAccountsResponse_chartPeriods? ChartPeriods { get; set; }
#nullable restore
#else
        public global::IBKR.Api.Kiota.Contract.Models.UserAccountsResponse_chartPeriods ChartPeriods { get; set; }
#endif
        /// <summary>The groups property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Groups { get; set; }
#nullable restore
#else
        public List<string> Groups { get; set; }
#endif
        /// <summary>The isFt property</summary>
        public bool? IsFt { get; set; }
        /// <summary>The isPaper property</summary>
        public bool? IsPaper { get; set; }
        /// <summary>The profiles property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Profiles { get; set; }
#nullable restore
#else
        public List<string> Profiles { get; set; }
#endif
        /// <summary>The selectedAccount property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SelectedAccount { get; set; }
#nullable restore
#else
        public string SelectedAccount { get; set; }
#endif
        /// <summary>The serverInfo property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::IBKR.Api.Kiota.Contract.Models.UserAccountsResponse_serverInfo? ServerInfo { get; set; }
#nullable restore
#else
        public global::IBKR.Api.Kiota.Contract.Models.UserAccountsResponse_serverInfo ServerInfo { get; set; }
#endif
        /// <summary>The sessionId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SessionId { get; set; }
#nullable restore
#else
        public string SessionId { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::IBKR.Api.Kiota.Contract.Models.UserAccountsResponse"/> and sets the default values.
        /// </summary>
        public UserAccountsResponse()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::IBKR.Api.Kiota.Contract.Models.UserAccountsResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::IBKR.Api.Kiota.Contract.Models.UserAccountsResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::IBKR.Api.Kiota.Contract.Models.UserAccountsResponse();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "accounts", n => { Accounts = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "acctProps", n => { AcctProps = n.GetObjectValue<global::IBKR.Api.Kiota.Contract.Models.UserAccountsResponse_acctProps>(global::IBKR.Api.Kiota.Contract.Models.UserAccountsResponse_acctProps.CreateFromDiscriminatorValue); } },
                { "aliases", n => { Aliases = n.GetObjectValue<global::IBKR.Api.Kiota.Contract.Models.UserAccountsResponse_aliases>(global::IBKR.Api.Kiota.Contract.Models.UserAccountsResponse_aliases.CreateFromDiscriminatorValue); } },
                { "allowFeatures", n => { AllowFeatures = n.GetObjectValue<global::IBKR.Api.Kiota.Contract.Models.UserAccountsResponse_allowFeatures>(global::IBKR.Api.Kiota.Contract.Models.UserAccountsResponse_allowFeatures.CreateFromDiscriminatorValue); } },
                { "chartPeriods", n => { ChartPeriods = n.GetObjectValue<global::IBKR.Api.Kiota.Contract.Models.UserAccountsResponse_chartPeriods>(global::IBKR.Api.Kiota.Contract.Models.UserAccountsResponse_chartPeriods.CreateFromDiscriminatorValue); } },
                { "groups", n => { Groups = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "isFt", n => { IsFt = n.GetBoolValue(); } },
                { "isPaper", n => { IsPaper = n.GetBoolValue(); } },
                { "profiles", n => { Profiles = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "selectedAccount", n => { SelectedAccount = n.GetStringValue(); } },
                { "serverInfo", n => { ServerInfo = n.GetObjectValue<global::IBKR.Api.Kiota.Contract.Models.UserAccountsResponse_serverInfo>(global::IBKR.Api.Kiota.Contract.Models.UserAccountsResponse_serverInfo.CreateFromDiscriminatorValue); } },
                { "sessionId", n => { SessionId = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfPrimitiveValues<string>("accounts", Accounts);
            writer.WriteObjectValue<global::IBKR.Api.Kiota.Contract.Models.UserAccountsResponse_acctProps>("acctProps", AcctProps);
            writer.WriteObjectValue<global::IBKR.Api.Kiota.Contract.Models.UserAccountsResponse_aliases>("aliases", Aliases);
            writer.WriteObjectValue<global::IBKR.Api.Kiota.Contract.Models.UserAccountsResponse_allowFeatures>("allowFeatures", AllowFeatures);
            writer.WriteObjectValue<global::IBKR.Api.Kiota.Contract.Models.UserAccountsResponse_chartPeriods>("chartPeriods", ChartPeriods);
            writer.WriteCollectionOfPrimitiveValues<string>("groups", Groups);
            writer.WriteBoolValue("isFt", IsFt);
            writer.WriteBoolValue("isPaper", IsPaper);
            writer.WriteCollectionOfPrimitiveValues<string>("profiles", Profiles);
            writer.WriteStringValue("selectedAccount", SelectedAccount);
            writer.WriteObjectValue<global::IBKR.Api.Kiota.Contract.Models.UserAccountsResponse_serverInfo>("serverInfo", ServerInfo);
            writer.WriteStringValue("sessionId", SessionId);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
