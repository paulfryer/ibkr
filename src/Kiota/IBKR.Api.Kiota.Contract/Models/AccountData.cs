// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace IBKR.Api.Kiota.Contract.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class AccountData : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The accountAlias property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AccountAlias { get; set; }
#nullable restore
#else
        public string AccountAlias { get; set; }
#endif
        /// <summary>The accountId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AccountId { get; set; }
#nullable restore
#else
        public string AccountId { get; set; }
#endif
        /// <summary>The accountTitle property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AccountTitle { get; set; }
#nullable restore
#else
        public string AccountTitle { get; set; }
#endif
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The applicantType property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ApplicantType { get; set; }
#nullable restore
#else
        public string ApplicantType { get; set; }
#endif
        /// <summary>The baseCurrency property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BaseCurrency { get; set; }
#nullable restore
#else
        public string BaseCurrency { get; set; }
#endif
        /// <summary>The businessDescription property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BusinessDescription { get; set; }
#nullable restore
#else
        public string BusinessDescription { get; set; }
#endif
        /// <summary>The capabilities property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::IBKR.Api.Kiota.Contract.Models.AccountData_capabilities? Capabilities { get; set; }
#nullable restore
#else
        public global::IBKR.Api.Kiota.Contract.Models.AccountData_capabilities Capabilities { get; set; }
#endif
        /// <summary>The class_action_program property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ClassActionProgram { get; set; }
#nullable restore
#else
        public string ClassActionProgram { get; set; }
#endif
        /// <summary>The clearingStatus property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ClearingStatus { get; set; }
#nullable restore
#else
        public string ClearingStatus { get; set; }
#endif
        /// <summary>The clearingStatusDescription property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ClearingStatusDescription { get; set; }
#nullable restore
#else
        public string ClearingStatusDescription { get; set; }
#endif
        /// <summary>The countryOfCorporation property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CountryOfCorporation { get; set; }
#nullable restore
#else
        public string CountryOfCorporation { get; set; }
#endif
        /// <summary>The dateApproved property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DateApproved { get; set; }
#nullable restore
#else
        public string DateApproved { get; set; }
#endif
        /// <summary>The dateBegun property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DateBegun { get; set; }
#nullable restore
#else
        public string DateBegun { get; set; }
#endif
        /// <summary>The dateClosed property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DateClosed { get; set; }
#nullable restore
#else
        public string DateClosed { get; set; }
#endif
        /// <summary>The dateDelinked property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DateDelinked { get; set; }
#nullable restore
#else
        public string DateDelinked { get; set; }
#endif
        /// <summary>The dateFunded property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DateFunded { get; set; }
#nullable restore
#else
        public string DateFunded { get; set; }
#endif
        /// <summary>The dateLinked property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DateLinked { get; set; }
#nullable restore
#else
        public string DateLinked { get; set; }
#endif
        /// <summary>The dateOpened property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DateOpened { get; set; }
#nullable restore
#else
        public string DateOpened { get; set; }
#endif
        /// <summary>The dividendReinvestment property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::IBKR.Api.Kiota.Contract.Models.AccountData_dividendReinvestment? DividendReinvestment { get; set; }
#nullable restore
#else
        public global::IBKR.Api.Kiota.Contract.Models.AccountData_dividendReinvestment DividendReinvestment { get; set; }
#endif
        /// <summary>The emailAddress property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EmailAddress { get; set; }
#nullable restore
#else
        public string EmailAddress { get; set; }
#endif
        /// <summary>The equity property</summary>
        public double? Equity { get; set; }
        /// <summary>The externalId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ExternalId { get; set; }
#nullable restore
#else
        public string ExternalId { get; set; }
#endif
        /// <summary>The feeTemplate property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::IBKR.Api.Kiota.Contract.Models.AccountData_feeTemplate? FeeTemplate { get; set; }
#nullable restore
#else
        public global::IBKR.Api.Kiota.Contract.Models.AccountData_feeTemplate FeeTemplate { get; set; }
#endif
        /// <summary>The household property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Household { get; set; }
#nullable restore
#else
        public string Household { get; set; }
#endif
        /// <summary>The investmentObjectives property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? InvestmentObjectives { get; set; }
#nullable restore
#else
        public List<string> InvestmentObjectives { get; set; }
#endif
        /// <summary>The limitedOptionTrading property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LimitedOptionTrading { get; set; }
#nullable restore
#else
        public string LimitedOptionTrading { get; set; }
#endif
        /// <summary>The mailing property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::IBKR.Api.Kiota.Contract.Models.AccountData_mailing? Mailing { get; set; }
#nullable restore
#else
        public global::IBKR.Api.Kiota.Contract.Models.AccountData_mailing Mailing { get; set; }
#endif
        /// <summary>The mainAccount property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MainAccount { get; set; }
#nullable restore
#else
        public string MainAccount { get; set; }
#endif
        /// <summary>The margin property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Margin { get; set; }
#nullable restore
#else
        public string Margin { get; set; }
#endif
        /// <summary>The masterAccountId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MasterAccountId { get; set; }
#nullable restore
#else
        public string MasterAccountId { get; set; }
#endif
        /// <summary>The mifidCategory property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MifidCategory { get; set; }
#nullable restore
#else
        public string MifidCategory { get; set; }
#endif
        /// <summary>The mifirStatus property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MifirStatus { get; set; }
#nullable restore
#else
        public string MifirStatus { get; set; }
#endif
        /// <summary>The officialTitle property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OfficialTitle { get; set; }
#nullable restore
#else
        public string OfficialTitle { get; set; }
#endif
        /// <summary>The orgType property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OrgType { get; set; }
#nullable restore
#else
        public string OrgType { get; set; }
#endif
        /// <summary>The primaryUser property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PrimaryUser { get; set; }
#nullable restore
#else
        public string PrimaryUser { get; set; }
#endif
        /// <summary>The processType property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ProcessType { get; set; }
#nullable restore
#else
        public string ProcessType { get; set; }
#endif
        /// <summary>The propertyProfile property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PropertyProfile { get; set; }
#nullable restore
#else
        public string PropertyProfile { get; set; }
#endif
        /// <summary>The registeredAddress property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::IBKR.Api.Kiota.Contract.Models.AccountData_registeredAddress? RegisteredAddress { get; set; }
#nullable restore
#else
        public global::IBKR.Api.Kiota.Contract.Models.AccountData_registeredAddress RegisteredAddress { get; set; }
#endif
        /// <summary>The riskScore property</summary>
        public int? RiskScore { get; set; }
        /// <summary>The signatures property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Signatures { get; set; }
#nullable restore
#else
        public List<string> Signatures { get; set; }
#endif
        /// <summary>The sourceAccountId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SourceAccountId { get; set; }
#nullable restore
#else
        public string SourceAccountId { get; set; }
#endif
        /// <summary>The stateCode property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? StateCode { get; set; }
#nullable restore
#else
        public string StateCode { get; set; }
#endif
        /// <summary>The stockYieldProgram property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::IBKR.Api.Kiota.Contract.Models.AccountData_stockYieldProgram? StockYieldProgram { get; set; }
#nullable restore
#else
        public global::IBKR.Api.Kiota.Contract.Models.AccountData_stockYieldProgram StockYieldProgram { get; set; }
#endif
        /// <summary>The subType property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SubType { get; set; }
#nullable restore
#else
        public string SubType { get; set; }
#endif
        /// <summary>The taxIds property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::IBKR.Api.Kiota.Contract.Models.AccountData_taxIds>? TaxIds { get; set; }
#nullable restore
#else
        public List<global::IBKR.Api.Kiota.Contract.Models.AccountData_taxIds> TaxIds { get; set; }
#endif
        /// <summary>The taxTreatyDetails property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::IBKR.Api.Kiota.Contract.Models.AccountData_taxTreatyDetails>? TaxTreatyDetails { get; set; }
#nullable restore
#else
        public List<global::IBKR.Api.Kiota.Contract.Models.AccountData_taxTreatyDetails> TaxTreatyDetails { get; set; }
#endif
        /// <summary>The tradeIntentionType property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TradeIntentionType { get; set; }
#nullable restore
#else
        public string TradeIntentionType { get; set; }
#endif
        /// <summary>The trustType property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TrustType { get; set; }
#nullable restore
#else
        public string TrustType { get; set; }
#endif
        /// <summary>The usTaxPurposeType property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UsTaxPurposeType { get; set; }
#nullable restore
#else
        public string UsTaxPurposeType { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::IBKR.Api.Kiota.Contract.Models.AccountData"/> and sets the default values.
        /// </summary>
        public AccountData()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::IBKR.Api.Kiota.Contract.Models.AccountData"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::IBKR.Api.Kiota.Contract.Models.AccountData CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::IBKR.Api.Kiota.Contract.Models.AccountData();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "accountAlias", n => { AccountAlias = n.GetStringValue(); } },
                { "accountId", n => { AccountId = n.GetStringValue(); } },
                { "accountTitle", n => { AccountTitle = n.GetStringValue(); } },
                { "applicantType", n => { ApplicantType = n.GetStringValue(); } },
                { "baseCurrency", n => { BaseCurrency = n.GetStringValue(); } },
                { "businessDescription", n => { BusinessDescription = n.GetStringValue(); } },
                { "capabilities", n => { Capabilities = n.GetObjectValue<global::IBKR.Api.Kiota.Contract.Models.AccountData_capabilities>(global::IBKR.Api.Kiota.Contract.Models.AccountData_capabilities.CreateFromDiscriminatorValue); } },
                { "class_action_program", n => { ClassActionProgram = n.GetStringValue(); } },
                { "clearingStatus", n => { ClearingStatus = n.GetStringValue(); } },
                { "clearingStatusDescription", n => { ClearingStatusDescription = n.GetStringValue(); } },
                { "countryOfCorporation", n => { CountryOfCorporation = n.GetStringValue(); } },
                { "dateApproved", n => { DateApproved = n.GetStringValue(); } },
                { "dateBegun", n => { DateBegun = n.GetStringValue(); } },
                { "dateClosed", n => { DateClosed = n.GetStringValue(); } },
                { "dateDelinked", n => { DateDelinked = n.GetStringValue(); } },
                { "dateFunded", n => { DateFunded = n.GetStringValue(); } },
                { "dateLinked", n => { DateLinked = n.GetStringValue(); } },
                { "dateOpened", n => { DateOpened = n.GetStringValue(); } },
                { "dividendReinvestment", n => { DividendReinvestment = n.GetObjectValue<global::IBKR.Api.Kiota.Contract.Models.AccountData_dividendReinvestment>(global::IBKR.Api.Kiota.Contract.Models.AccountData_dividendReinvestment.CreateFromDiscriminatorValue); } },
                { "emailAddress", n => { EmailAddress = n.GetStringValue(); } },
                { "equity", n => { Equity = n.GetDoubleValue(); } },
                { "externalId", n => { ExternalId = n.GetStringValue(); } },
                { "feeTemplate", n => { FeeTemplate = n.GetObjectValue<global::IBKR.Api.Kiota.Contract.Models.AccountData_feeTemplate>(global::IBKR.Api.Kiota.Contract.Models.AccountData_feeTemplate.CreateFromDiscriminatorValue); } },
                { "household", n => { Household = n.GetStringValue(); } },
                { "investmentObjectives", n => { InvestmentObjectives = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "limitedOptionTrading", n => { LimitedOptionTrading = n.GetStringValue(); } },
                { "mailing", n => { Mailing = n.GetObjectValue<global::IBKR.Api.Kiota.Contract.Models.AccountData_mailing>(global::IBKR.Api.Kiota.Contract.Models.AccountData_mailing.CreateFromDiscriminatorValue); } },
                { "mainAccount", n => { MainAccount = n.GetStringValue(); } },
                { "margin", n => { Margin = n.GetStringValue(); } },
                { "masterAccountId", n => { MasterAccountId = n.GetStringValue(); } },
                { "mifidCategory", n => { MifidCategory = n.GetStringValue(); } },
                { "mifirStatus", n => { MifirStatus = n.GetStringValue(); } },
                { "officialTitle", n => { OfficialTitle = n.GetStringValue(); } },
                { "orgType", n => { OrgType = n.GetStringValue(); } },
                { "primaryUser", n => { PrimaryUser = n.GetStringValue(); } },
                { "processType", n => { ProcessType = n.GetStringValue(); } },
                { "propertyProfile", n => { PropertyProfile = n.GetStringValue(); } },
                { "registeredAddress", n => { RegisteredAddress = n.GetObjectValue<global::IBKR.Api.Kiota.Contract.Models.AccountData_registeredAddress>(global::IBKR.Api.Kiota.Contract.Models.AccountData_registeredAddress.CreateFromDiscriminatorValue); } },
                { "riskScore", n => { RiskScore = n.GetIntValue(); } },
                { "signatures", n => { Signatures = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "sourceAccountId", n => { SourceAccountId = n.GetStringValue(); } },
                { "stateCode", n => { StateCode = n.GetStringValue(); } },
                { "stockYieldProgram", n => { StockYieldProgram = n.GetObjectValue<global::IBKR.Api.Kiota.Contract.Models.AccountData_stockYieldProgram>(global::IBKR.Api.Kiota.Contract.Models.AccountData_stockYieldProgram.CreateFromDiscriminatorValue); } },
                { "subType", n => { SubType = n.GetStringValue(); } },
                { "taxIds", n => { TaxIds = n.GetCollectionOfObjectValues<global::IBKR.Api.Kiota.Contract.Models.AccountData_taxIds>(global::IBKR.Api.Kiota.Contract.Models.AccountData_taxIds.CreateFromDiscriminatorValue)?.AsList(); } },
                { "taxTreatyDetails", n => { TaxTreatyDetails = n.GetCollectionOfObjectValues<global::IBKR.Api.Kiota.Contract.Models.AccountData_taxTreatyDetails>(global::IBKR.Api.Kiota.Contract.Models.AccountData_taxTreatyDetails.CreateFromDiscriminatorValue)?.AsList(); } },
                { "tradeIntentionType", n => { TradeIntentionType = n.GetStringValue(); } },
                { "trustType", n => { TrustType = n.GetStringValue(); } },
                { "usTaxPurposeType", n => { UsTaxPurposeType = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("accountAlias", AccountAlias);
            writer.WriteStringValue("accountId", AccountId);
            writer.WriteStringValue("accountTitle", AccountTitle);
            writer.WriteStringValue("applicantType", ApplicantType);
            writer.WriteStringValue("baseCurrency", BaseCurrency);
            writer.WriteStringValue("businessDescription", BusinessDescription);
            writer.WriteObjectValue<global::IBKR.Api.Kiota.Contract.Models.AccountData_capabilities>("capabilities", Capabilities);
            writer.WriteStringValue("class_action_program", ClassActionProgram);
            writer.WriteStringValue("clearingStatus", ClearingStatus);
            writer.WriteStringValue("clearingStatusDescription", ClearingStatusDescription);
            writer.WriteStringValue("countryOfCorporation", CountryOfCorporation);
            writer.WriteStringValue("dateApproved", DateApproved);
            writer.WriteStringValue("dateBegun", DateBegun);
            writer.WriteStringValue("dateClosed", DateClosed);
            writer.WriteStringValue("dateDelinked", DateDelinked);
            writer.WriteStringValue("dateFunded", DateFunded);
            writer.WriteStringValue("dateLinked", DateLinked);
            writer.WriteStringValue("dateOpened", DateOpened);
            writer.WriteObjectValue<global::IBKR.Api.Kiota.Contract.Models.AccountData_dividendReinvestment>("dividendReinvestment", DividendReinvestment);
            writer.WriteStringValue("emailAddress", EmailAddress);
            writer.WriteDoubleValue("equity", Equity);
            writer.WriteStringValue("externalId", ExternalId);
            writer.WriteObjectValue<global::IBKR.Api.Kiota.Contract.Models.AccountData_feeTemplate>("feeTemplate", FeeTemplate);
            writer.WriteStringValue("household", Household);
            writer.WriteCollectionOfPrimitiveValues<string>("investmentObjectives", InvestmentObjectives);
            writer.WriteStringValue("limitedOptionTrading", LimitedOptionTrading);
            writer.WriteObjectValue<global::IBKR.Api.Kiota.Contract.Models.AccountData_mailing>("mailing", Mailing);
            writer.WriteStringValue("mainAccount", MainAccount);
            writer.WriteStringValue("margin", Margin);
            writer.WriteStringValue("masterAccountId", MasterAccountId);
            writer.WriteStringValue("mifidCategory", MifidCategory);
            writer.WriteStringValue("mifirStatus", MifirStatus);
            writer.WriteStringValue("officialTitle", OfficialTitle);
            writer.WriteStringValue("orgType", OrgType);
            writer.WriteStringValue("primaryUser", PrimaryUser);
            writer.WriteStringValue("processType", ProcessType);
            writer.WriteStringValue("propertyProfile", PropertyProfile);
            writer.WriteObjectValue<global::IBKR.Api.Kiota.Contract.Models.AccountData_registeredAddress>("registeredAddress", RegisteredAddress);
            writer.WriteIntValue("riskScore", RiskScore);
            writer.WriteCollectionOfPrimitiveValues<string>("signatures", Signatures);
            writer.WriteStringValue("sourceAccountId", SourceAccountId);
            writer.WriteStringValue("stateCode", StateCode);
            writer.WriteObjectValue<global::IBKR.Api.Kiota.Contract.Models.AccountData_stockYieldProgram>("stockYieldProgram", StockYieldProgram);
            writer.WriteStringValue("subType", SubType);
            writer.WriteCollectionOfObjectValues<global::IBKR.Api.Kiota.Contract.Models.AccountData_taxIds>("taxIds", TaxIds);
            writer.WriteCollectionOfObjectValues<global::IBKR.Api.Kiota.Contract.Models.AccountData_taxTreatyDetails>("taxTreatyDetails", TaxTreatyDetails);
            writer.WriteStringValue("tradeIntentionType", TradeIntentionType);
            writer.WriteStringValue("trustType", TrustType);
            writer.WriteStringValue("usTaxPurposeType", UsTaxPurposeType);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
