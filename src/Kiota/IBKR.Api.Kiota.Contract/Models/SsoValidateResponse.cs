// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace IBKR.Api.Kiota.Contract.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class SsoValidateResponse : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Returns the time of authentication in epoch time.</summary>
        public int? AUTHTIME { get; set; }
        /// <summary>Returns the underlying username of the account.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CREDENTIAL { get; set; }
#nullable restore
#else
        public string CREDENTIAL { get; set; }
#endif
        /// <summary>Returns the time until SSO session expiration in milliseconds.</summary>
        public int? EXPIRES { get; set; }
        /// <summary>Returns supported features such as bonds and option trading.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::IBKR.Api.Kiota.Contract.Models.SsoValidateResponse_features? Features { get; set; }
#nullable restore
#else
        public global::IBKR.Api.Kiota.Contract.Models.SsoValidateResponse_features Features { get; set; }
#endif
        /// <summary>Internal use only. Does not reflect the IP address of the user.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? IP { get; set; }
#nullable restore
#else
        public string IP { get; set; }
#endif
        /// <summary>Returns if the account is a trial account or a funded account.</summary>
        public bool? ISFREETRIAL { get; set; }
        /// <summary>Returns whether the account is a master account (true) or subaccount (false).</summary>
        public bool? ISMASTER { get; set; }
        /// <summary>Used for Client Portal (Internal use only)</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LANDINGAPP { get; set; }
#nullable restore
#else
        public string LANDINGAPP { get; set; }
#endif
        /// <summary>Returns the last time the user was accessed in epoch time.</summary>
        public int? LastAccessed { get; set; }
        /// <summary>Returns the login type. 1 for Live, 2 for Paper</summary>
        public int? LoginType { get; set; }
        /// <summary>Returns the paper username for the account.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PAPERUSERNAME { get; set; }
#nullable restore
#else
        public string PAPERUSERNAME { get; set; }
#endif
        /// <summary>Returns if the customer requires two factor authentication.</summary>
        public bool? QUALIFIEDFORMOBILEAUTH { get; set; }
        /// <summary>Returns the region connected to internally.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Region { get; set; }
#nullable restore
#else
        public string Region { get; set; }
#endif
        /// <summary>Confirms if validation was successful. True if session was validated; false if not.</summary>
        public bool? RESULT { get; set; }
        /// <summary>(Internal use only)</summary>
        public bool? SFENABLED { get; set; }
        /// <summary>Internal user identifier.</summary>
        public int? USERID { get; set; }
        /// <summary>current username logged in for the session.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? USERNAME { get; set; }
#nullable restore
#else
        public string USERNAME { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::IBKR.Api.Kiota.Contract.Models.SsoValidateResponse"/> and sets the default values.
        /// </summary>
        public SsoValidateResponse()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::IBKR.Api.Kiota.Contract.Models.SsoValidateResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::IBKR.Api.Kiota.Contract.Models.SsoValidateResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::IBKR.Api.Kiota.Contract.Models.SsoValidateResponse();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "AUTH_TIME", n => { AUTHTIME = n.GetIntValue(); } },
                { "CREDENTIAL", n => { CREDENTIAL = n.GetStringValue(); } },
                { "EXPIRES", n => { EXPIRES = n.GetIntValue(); } },
                { "features", n => { Features = n.GetObjectValue<global::IBKR.Api.Kiota.Contract.Models.SsoValidateResponse_features>(global::IBKR.Api.Kiota.Contract.Models.SsoValidateResponse_features.CreateFromDiscriminatorValue); } },
                { "IP", n => { IP = n.GetStringValue(); } },
                { "IS_FREE_TRIAL", n => { ISFREETRIAL = n.GetBoolValue(); } },
                { "IS_MASTER", n => { ISMASTER = n.GetBoolValue(); } },
                { "LANDING_APP", n => { LANDINGAPP = n.GetStringValue(); } },
                { "lastAccessed", n => { LastAccessed = n.GetIntValue(); } },
                { "loginType", n => { LoginType = n.GetIntValue(); } },
                { "PAPER_USER_NAME", n => { PAPERUSERNAME = n.GetStringValue(); } },
                { "QUALIFIED_FOR_MOBILE_AUTH", n => { QUALIFIEDFORMOBILEAUTH = n.GetBoolValue(); } },
                { "RESULT", n => { RESULT = n.GetBoolValue(); } },
                { "region", n => { Region = n.GetStringValue(); } },
                { "SF_ENABLED", n => { SFENABLED = n.GetBoolValue(); } },
                { "USER_ID", n => { USERID = n.GetIntValue(); } },
                { "USER_NAME", n => { USERNAME = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("AUTH_TIME", AUTHTIME);
            writer.WriteStringValue("CREDENTIAL", CREDENTIAL);
            writer.WriteIntValue("EXPIRES", EXPIRES);
            writer.WriteObjectValue<global::IBKR.Api.Kiota.Contract.Models.SsoValidateResponse_features>("features", Features);
            writer.WriteStringValue("IP", IP);
            writer.WriteBoolValue("IS_FREE_TRIAL", ISFREETRIAL);
            writer.WriteBoolValue("IS_MASTER", ISMASTER);
            writer.WriteStringValue("LANDING_APP", LANDINGAPP);
            writer.WriteIntValue("lastAccessed", LastAccessed);
            writer.WriteIntValue("loginType", LoginType);
            writer.WriteStringValue("PAPER_USER_NAME", PAPERUSERNAME);
            writer.WriteBoolValue("QUALIFIED_FOR_MOBILE_AUTH", QUALIFIEDFORMOBILEAUTH);
            writer.WriteStringValue("region", Region);
            writer.WriteBoolValue("RESULT", RESULT);
            writer.WriteBoolValue("SF_ENABLED", SFENABLED);
            writer.WriteIntValue("USER_ID", USERID);
            writer.WriteStringValue("USER_NAME", USERNAME);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
