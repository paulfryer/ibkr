// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace IBKR.Api.Kiota.Contract.Models
{
    /// <summary>
    /// Object containing the requested historical data and related metadata.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class IserverHistoryResponse : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The client-specified bar width, represented in seconds.</summary>
        public int? BarLength { get; set; }
        /// <summary>Internal use. UTC datetime string used to center Client Portal charts. Format YYYYMMDD-hh:mm:ss.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ChartPanStartTime { get; set; }
#nullable restore
#else
        public string ChartPanStartTime { get; set; }
#endif
        /// <summary>Array containing OHLC bars for the requested period.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::IBKR.Api.Kiota.Contract.Models.SingleHistoricalBar>? Data { get; set; }
#nullable restore
#else
        public List<global::IBKR.Api.Kiota.Contract.Models.SingleHistoricalBar> Data { get; set; }
#endif
        /// <summary>Indicates how the period is applied in relation to the startTime. Value will always be -1, indicating that the period extends from the startTime forward into the future.</summary>
        public int? Direction { get; set; }
        /// <summary>Internal use. Delivers highest price value in total interval. Used for chart scaling. A string constructed as &apos;highestPrice*priceFactor/totalVolume*volumeFactor/minutesFromStartTime&apos;.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? High { get; set; }
#nullable restore
#else
        public string High { get; set; }
#endif
        /// <summary>Internal use. Delivers lowest price value in total interval. Used for chart scaling. A string constructed as &apos;lowestPrice*priceFactor/totalVolume*volumeFactor/minutesFromStartTime&apos;.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Low { get; set; }
#nullable restore
#else
        public string Low { get; set; }
#endif
        /// <summary>A three-character string reflecting the nature of available data. R = Realtime, D = Delayed, Z = Frozen, Y = Frozen Delayed, N = Not Subscribed. P = Snapshot, p = Consolidated. B = Top of book.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MdAvailability { get; set; }
#nullable restore
#else
        public string MdAvailability { get; set; }
#endif
        /// <summary>Internal use. Reflects the version of the response schema used.</summary>
        public int? MessageVersion { get; set; }
        /// <summary>Number of milliseconds taken to satisfy this historical data request.</summary>
        public int? MktDataDelay { get; set; }
        /// <summary>Indicates whether instrument is capable of negative pricing.</summary>
        public bool? NegativeCapable { get; set; }
        /// <summary>Indicates whether data from outside regular trading hours is included in the response.</summary>
        public bool? OutsideRth { get; set; }
        /// <summary>Count of the number of bars returned in the data array.</summary>
        public int? Points { get; set; }
        /// <summary>Internal use. Governs application of pricing display rule.</summary>
        public int? PriceDisplayRule { get; set; }
        /// <summary>Internal use. Governs rendering of displayed pricing.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PriceDisplayValue { get; set; }
#nullable restore
#else
        public string PriceDisplayValue { get; set; }
#endif
        /// <summary>Internal use. Used to scale Client Portal chart Y-axis.</summary>
        public int? PriceFactor { get; set; }
        /// <summary>Internal use. Identifier of the request.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ServerId { get; set; }
#nullable restore
#else
        public string ServerId { get; set; }
#endif
        /// <summary>UTC date and time of the start (chronologically earlier) of the complete period in format YYYYMMDD-hh:mm:ss.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? StartTime { get; set; }
#nullable restore
#else
        public string StartTime { get; set; }
#endif
        /// <summary>Symbol of the request instrument.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Symbol { get; set; }
#nullable restore
#else
        public string Symbol { get; set; }
#endif
        /// <summary>Description or company name of the instrument.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Text { get; set; }
#nullable restore
#else
        public string Text { get; set; }
#endif
        /// <summary>The client-specified period value.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TimePeriod { get; set; }
#nullable restore
#else
        public string TimePeriod { get; set; }
#endif
        /// <summary>Length of instrument&apos;s trading day in seconds.</summary>
        public int? TradingDayDuration { get; set; }
        /// <summary>Internal time in flight to serve the request.</summary>
        public int? TravelTime { get; set; }
        /// <summary>Internal use. Used to scale volume histograms.</summary>
        public int? VolumeFactor { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::IBKR.Api.Kiota.Contract.Models.IserverHistoryResponse"/> and sets the default values.
        /// </summary>
        public IserverHistoryResponse()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::IBKR.Api.Kiota.Contract.Models.IserverHistoryResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::IBKR.Api.Kiota.Contract.Models.IserverHistoryResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::IBKR.Api.Kiota.Contract.Models.IserverHistoryResponse();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "barLength", n => { BarLength = n.GetIntValue(); } },
                { "chartPanStartTime", n => { ChartPanStartTime = n.GetStringValue(); } },
                { "data", n => { Data = n.GetCollectionOfObjectValues<global::IBKR.Api.Kiota.Contract.Models.SingleHistoricalBar>(global::IBKR.Api.Kiota.Contract.Models.SingleHistoricalBar.CreateFromDiscriminatorValue)?.AsList(); } },
                { "direction", n => { Direction = n.GetIntValue(); } },
                { "high", n => { High = n.GetStringValue(); } },
                { "low", n => { Low = n.GetStringValue(); } },
                { "mdAvailability", n => { MdAvailability = n.GetStringValue(); } },
                { "messageVersion", n => { MessageVersion = n.GetIntValue(); } },
                { "mktDataDelay", n => { MktDataDelay = n.GetIntValue(); } },
                { "negativeCapable", n => { NegativeCapable = n.GetBoolValue(); } },
                { "outsideRth", n => { OutsideRth = n.GetBoolValue(); } },
                { "points", n => { Points = n.GetIntValue(); } },
                { "priceDisplayRule", n => { PriceDisplayRule = n.GetIntValue(); } },
                { "priceDisplayValue", n => { PriceDisplayValue = n.GetStringValue(); } },
                { "priceFactor", n => { PriceFactor = n.GetIntValue(); } },
                { "serverId", n => { ServerId = n.GetStringValue(); } },
                { "startTime", n => { StartTime = n.GetStringValue(); } },
                { "symbol", n => { Symbol = n.GetStringValue(); } },
                { "text", n => { Text = n.GetStringValue(); } },
                { "timePeriod", n => { TimePeriod = n.GetStringValue(); } },
                { "tradingDayDuration", n => { TradingDayDuration = n.GetIntValue(); } },
                { "travelTime", n => { TravelTime = n.GetIntValue(); } },
                { "volumeFactor", n => { VolumeFactor = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("barLength", BarLength);
            writer.WriteStringValue("chartPanStartTime", ChartPanStartTime);
            writer.WriteCollectionOfObjectValues<global::IBKR.Api.Kiota.Contract.Models.SingleHistoricalBar>("data", Data);
            writer.WriteIntValue("direction", Direction);
            writer.WriteStringValue("high", High);
            writer.WriteStringValue("low", Low);
            writer.WriteStringValue("mdAvailability", MdAvailability);
            writer.WriteIntValue("messageVersion", MessageVersion);
            writer.WriteIntValue("mktDataDelay", MktDataDelay);
            writer.WriteBoolValue("negativeCapable", NegativeCapable);
            writer.WriteBoolValue("outsideRth", OutsideRth);
            writer.WriteIntValue("points", Points);
            writer.WriteIntValue("priceDisplayRule", PriceDisplayRule);
            writer.WriteStringValue("priceDisplayValue", PriceDisplayValue);
            writer.WriteIntValue("priceFactor", PriceFactor);
            writer.WriteStringValue("serverId", ServerId);
            writer.WriteStringValue("startTime", StartTime);
            writer.WriteStringValue("symbol", Symbol);
            writer.WriteStringValue("text", Text);
            writer.WriteStringValue("timePeriod", TimePeriod);
            writer.WriteIntValue("tradingDayDuration", TradingDayDuration);
            writer.WriteIntValue("travelTime", TravelTime);
            writer.WriteIntValue("volumeFactor", VolumeFactor);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
