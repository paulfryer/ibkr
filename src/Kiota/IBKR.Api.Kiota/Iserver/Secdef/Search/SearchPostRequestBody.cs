// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace IBKR.Api.Kiota.Iserver.Secdef.Search
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class SearchPostRequestBody : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>fund search</summary>
        public bool? Fund { get; set; }
        /// <summary>The fundFamilyConidEx property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FundFamilyConidEx { get; set; }
#nullable restore
#else
        public string FundFamilyConidEx { get; set; }
#endif
        /// <summary>The more property</summary>
        public bool? More { get; set; }
        /// <summary>Denotes if the symbol value is the ticker symbol or part of the company&apos;s name.</summary>
        public bool? Name { get; set; }
        /// <summary>pattern search</summary>
        public bool? Pattern { get; set; }
        /// <summary>The referrer property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Referrer { get; set; }
#nullable restore
#else
        public string Referrer { get; set; }
#endif
        /// <summary>Available underlying security types:  * `STK` - Represents an underlying as a Stock security type.  * `IND` - Represents an underlying as an Index security type.  * `BOND` - Represents an underlying as a Bond security type.</summary>
        public global::IBKR.Api.Kiota.Iserver.Secdef.Search.SearchPostRequestBody_secType? SecType { get; set; }
        /// <summary>The ticker symbol, bond issuer type, or company name of the equity you are looking to trade.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Symbol { get; set; }
#nullable restore
#else
        public string Symbol { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::IBKR.Api.Kiota.Iserver.Secdef.Search.SearchPostRequestBody"/> and sets the default values.
        /// </summary>
        public SearchPostRequestBody()
        {
            AdditionalData = new Dictionary<string, object>();
            SecType = global::IBKR.Api.Kiota.Iserver.Secdef.Search.SearchPostRequestBody_secType.STK;
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::IBKR.Api.Kiota.Iserver.Secdef.Search.SearchPostRequestBody"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::IBKR.Api.Kiota.Iserver.Secdef.Search.SearchPostRequestBody CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::IBKR.Api.Kiota.Iserver.Secdef.Search.SearchPostRequestBody();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "fund", n => { Fund = n.GetBoolValue(); } },
                { "fundFamilyConidEx", n => { FundFamilyConidEx = n.GetStringValue(); } },
                { "more", n => { More = n.GetBoolValue(); } },
                { "name", n => { Name = n.GetBoolValue(); } },
                { "pattern", n => { Pattern = n.GetBoolValue(); } },
                { "referrer", n => { Referrer = n.GetStringValue(); } },
                { "secType", n => { SecType = n.GetEnumValue<global::IBKR.Api.Kiota.Iserver.Secdef.Search.SearchPostRequestBody_secType>(); } },
                { "symbol", n => { Symbol = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("fund", Fund);
            writer.WriteStringValue("fundFamilyConidEx", FundFamilyConidEx);
            writer.WriteBoolValue("more", More);
            writer.WriteBoolValue("name", Name);
            writer.WriteBoolValue("pattern", Pattern);
            writer.WriteStringValue("referrer", Referrer);
            writer.WriteEnumValue<global::IBKR.Api.Kiota.Iserver.Secdef.Search.SearchPostRequestBody_secType>("secType", SecType);
            writer.WriteStringValue("symbol", Symbol);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
