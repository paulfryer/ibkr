// <auto-generated/>
#pragma warning disable CS0618
using IBKR.Api.Kiota.Models;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace IBKR.Api.Kiota.Gw.Api.V1.Requests.Item.Status
{
    /// <summary>
    /// Builds and executes requests for operations under \gw\api\v1\requests\{requestId}\status
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class StatusRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::IBKR.Api.Kiota.Gw.Api.V1.Requests.Item.Status.StatusRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public StatusRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/gw/api/v1/requests/{requestId}/status?type={type}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::IBKR.Api.Kiota.Gw.Api.V1.Requests.Item.Status.StatusRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public StatusRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/gw/api/v1/requests/{requestId}/status?type={type}", rawUrl)
        {
        }
        /// <summary>
        /// Returns status for account management request&lt;br&gt;&lt;br&gt;**Scope**: `accounts.read`&lt;br&gt;**Security Policy**: `HTTPS`
        /// </summary>
        /// <returns>A <see cref="global::IBKR.Api.Kiota.Gw.Api.V1.Requests.Item.Status.StatusRequestBuilder.StatusGetResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::IBKR.Api.Kiota.Models.ProblemDetailResponse">When receiving a 400 status code</exception>
        /// <exception cref="global::IBKR.Api.Kiota.Models.ProblemDetailResponse">When receiving a 401 status code</exception>
        /// <exception cref="global::IBKR.Api.Kiota.Models.ProblemDetailResponse">When receiving a 403 status code</exception>
        /// <exception cref="global::IBKR.Api.Kiota.Models.ProblemDetailResponse">When receiving a 500 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::IBKR.Api.Kiota.Gw.Api.V1.Requests.Item.Status.StatusRequestBuilder.StatusGetResponse?> GetAsStatusGetResponseAsync(Action<RequestConfiguration<global::IBKR.Api.Kiota.Gw.Api.V1.Requests.Item.Status.StatusRequestBuilder.StatusRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::IBKR.Api.Kiota.Gw.Api.V1.Requests.Item.Status.StatusRequestBuilder.StatusGetResponse> GetAsStatusGetResponseAsync(Action<RequestConfiguration<global::IBKR.Api.Kiota.Gw.Api.V1.Requests.Item.Status.StatusRequestBuilder.StatusRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "400", global::IBKR.Api.Kiota.Models.ProblemDetailResponse.CreateFromDiscriminatorValue },
                { "401", global::IBKR.Api.Kiota.Models.ProblemDetailResponse.CreateFromDiscriminatorValue },
                { "403", global::IBKR.Api.Kiota.Models.ProblemDetailResponse.CreateFromDiscriminatorValue },
                { "500", global::IBKR.Api.Kiota.Models.ProblemDetailResponse.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::IBKR.Api.Kiota.Gw.Api.V1.Requests.Item.Status.StatusRequestBuilder.StatusGetResponse>(requestInfo, global::IBKR.Api.Kiota.Gw.Api.V1.Requests.Item.Status.StatusRequestBuilder.StatusGetResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns status for account management request&lt;br&gt;&lt;br&gt;**Scope**: `accounts.read`&lt;br&gt;**Security Policy**: `HTTPS`
        /// </summary>
        /// <returns>A <see cref="global::IBKR.Api.Kiota.Gw.Api.V1.Requests.Item.Status.StatusRequestBuilder.StatusResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::IBKR.Api.Kiota.Models.ProblemDetailResponse">When receiving a 400 status code</exception>
        /// <exception cref="global::IBKR.Api.Kiota.Models.ProblemDetailResponse">When receiving a 401 status code</exception>
        /// <exception cref="global::IBKR.Api.Kiota.Models.ProblemDetailResponse">When receiving a 403 status code</exception>
        /// <exception cref="global::IBKR.Api.Kiota.Models.ProblemDetailResponse">When receiving a 500 status code</exception>
        [Obsolete("This method is obsolete. Use GetAsStatusGetResponseAsync instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::IBKR.Api.Kiota.Gw.Api.V1.Requests.Item.Status.StatusRequestBuilder.StatusResponse?> GetAsync(Action<RequestConfiguration<global::IBKR.Api.Kiota.Gw.Api.V1.Requests.Item.Status.StatusRequestBuilder.StatusRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::IBKR.Api.Kiota.Gw.Api.V1.Requests.Item.Status.StatusRequestBuilder.StatusResponse> GetAsync(Action<RequestConfiguration<global::IBKR.Api.Kiota.Gw.Api.V1.Requests.Item.Status.StatusRequestBuilder.StatusRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "400", global::IBKR.Api.Kiota.Models.ProblemDetailResponse.CreateFromDiscriminatorValue },
                { "401", global::IBKR.Api.Kiota.Models.ProblemDetailResponse.CreateFromDiscriminatorValue },
                { "403", global::IBKR.Api.Kiota.Models.ProblemDetailResponse.CreateFromDiscriminatorValue },
                { "500", global::IBKR.Api.Kiota.Models.ProblemDetailResponse.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::IBKR.Api.Kiota.Gw.Api.V1.Requests.Item.Status.StatusRequestBuilder.StatusResponse>(requestInfo, global::IBKR.Api.Kiota.Gw.Api.V1.Requests.Item.Status.StatusRequestBuilder.StatusResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns status for account management request&lt;br&gt;&lt;br&gt;**Scope**: `accounts.read`&lt;br&gt;**Security Policy**: `HTTPS`
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::IBKR.Api.Kiota.Gw.Api.V1.Requests.Item.Status.StatusRequestBuilder.StatusRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::IBKR.Api.Kiota.Gw.Api.V1.Requests.Item.Status.StatusRequestBuilder.StatusRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::IBKR.Api.Kiota.Gw.Api.V1.Requests.Item.Status.StatusRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::IBKR.Api.Kiota.Gw.Api.V1.Requests.Item.Status.StatusRequestBuilder WithUrl(string rawUrl)
        {
            return new global::IBKR.Api.Kiota.Gw.Api.V1.Requests.Item.Status.StatusRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::IBKR.Api.Kiota.Models.AmRequestStatusResponse"/>, <see cref="global::IBKR.Api.Kiota.Models.StatusResponse"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class StatusGetResponse : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="global::IBKR.Api.Kiota.Models.AmRequestStatusResponse"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::IBKR.Api.Kiota.Models.AmRequestStatusResponse? AmRequestStatusResponse { get; set; }
#nullable restore
#else
            public global::IBKR.Api.Kiota.Models.AmRequestStatusResponse AmRequestStatusResponse { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::IBKR.Api.Kiota.Models.StatusResponse"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::IBKR.Api.Kiota.Models.StatusResponse? StatusResponse { get; set; }
#nullable restore
#else
            public global::IBKR.Api.Kiota.Models.StatusResponse StatusResponse { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::IBKR.Api.Kiota.Gw.Api.V1.Requests.Item.Status.StatusRequestBuilder.StatusGetResponse"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::IBKR.Api.Kiota.Gw.Api.V1.Requests.Item.Status.StatusRequestBuilder.StatusGetResponse CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var mappingValue = parseNode.GetChildNode("")?.GetStringValue();
                var result = new global::IBKR.Api.Kiota.Gw.Api.V1.Requests.Item.Status.StatusRequestBuilder.StatusGetResponse();
                if("AmRequestStatusResponse".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.AmRequestStatusResponse = new global::IBKR.Api.Kiota.Models.AmRequestStatusResponse();
                }
                else if("StatusResponse".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.StatusResponse = new global::IBKR.Api.Kiota.Models.StatusResponse();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(AmRequestStatusResponse != null)
                {
                    return AmRequestStatusResponse.GetFieldDeserializers();
                }
                else if(StatusResponse != null)
                {
                    return StatusResponse.GetFieldDeserializers();
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(AmRequestStatusResponse != null)
                {
                    writer.WriteObjectValue<global::IBKR.Api.Kiota.Models.AmRequestStatusResponse>(null, AmRequestStatusResponse);
                }
                else if(StatusResponse != null)
                {
                    writer.WriteObjectValue<global::IBKR.Api.Kiota.Models.StatusResponse>(null, StatusResponse);
                }
            }
        }
        /// <summary>
        /// Returns status for account management request&lt;br&gt;&lt;br&gt;**Scope**: `accounts.read`&lt;br&gt;**Security Policy**: `HTTPS`
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class StatusRequestBuilderGetQueryParameters 
        {
            [Obsolete("This property is deprecated, use TypeAsGetTypeQueryParameterType instead")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("type")]
            public string? Type { get; set; }
#nullable restore
#else
            [QueryParameter("type")]
            public string Type { get; set; }
#endif
            [QueryParameter("type")]
            public global::IBKR.Api.Kiota.Gw.Api.V1.Requests.Item.Status.GetTypeQueryParameterType? TypeAsGetTypeQueryParameterType { get; set; }
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class StatusRequestBuilderGetRequestConfiguration : RequestConfiguration<global::IBKR.Api.Kiota.Gw.Api.V1.Requests.Item.Status.StatusRequestBuilder.StatusRequestBuilderGetQueryParameters>
        {
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::IBKR.Api.Kiota.Models.AmRequestStatusResponse"/>, <see cref="global::IBKR.Api.Kiota.Models.StatusResponse"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class StatusResponse : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="global::IBKR.Api.Kiota.Models.AmRequestStatusResponse"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::IBKR.Api.Kiota.Models.AmRequestStatusResponse? AmRequestStatusResponse { get; set; }
#nullable restore
#else
            public global::IBKR.Api.Kiota.Models.AmRequestStatusResponse AmRequestStatusResponse { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::IBKR.Api.Kiota.Models.StatusResponse"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::IBKR.Api.Kiota.Models.StatusResponse? StatusResponseProp { get; set; }
#nullable restore
#else
            public global::IBKR.Api.Kiota.Models.StatusResponse StatusResponseProp { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::IBKR.Api.Kiota.Gw.Api.V1.Requests.Item.Status.StatusRequestBuilder.StatusResponse"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::IBKR.Api.Kiota.Gw.Api.V1.Requests.Item.Status.StatusRequestBuilder.StatusResponse CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var mappingValue = parseNode.GetChildNode("")?.GetStringValue();
                var result = new global::IBKR.Api.Kiota.Gw.Api.V1.Requests.Item.Status.StatusRequestBuilder.StatusResponse();
                if("AmRequestStatusResponse".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.AmRequestStatusResponse = new global::IBKR.Api.Kiota.Models.AmRequestStatusResponse();
                }
                else if("StatusResponse".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.StatusResponseProp = new global::IBKR.Api.Kiota.Models.StatusResponse();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(AmRequestStatusResponse != null)
                {
                    return AmRequestStatusResponse.GetFieldDeserializers();
                }
                else if(StatusResponseProp != null)
                {
                    return StatusResponseProp.GetFieldDeserializers();
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(AmRequestStatusResponse != null)
                {
                    writer.WriteObjectValue<global::IBKR.Api.Kiota.Models.AmRequestStatusResponse>(null, AmRequestStatusResponse);
                }
                else if(StatusResponseProp != null)
                {
                    writer.WriteObjectValue<global::IBKR.Api.Kiota.Models.StatusResponse>(null, StatusResponseProp);
                }
            }
        }
    }
}
#pragma warning restore CS0618
