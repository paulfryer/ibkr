// <auto-generated/>
#pragma warning disable CS0618
using IBKR.Api.Kiota.Models;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace IBKR.Api.Kiota.Gw.Api.V1.SsoBrowserSessions
{
    /// <summary>
    /// Builds and executes requests for operations under \gw\api\v1\sso-browser-sessions
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class SsoBrowserSessionsRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::IBKR.Api.Kiota.Gw.Api.V1.SsoBrowserSessions.SsoBrowserSessionsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public SsoBrowserSessionsRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/gw/api/v1/sso-browser-sessions", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::IBKR.Api.Kiota.Gw.Api.V1.SsoBrowserSessions.SsoBrowserSessionsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public SsoBrowserSessionsRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/gw/api/v1/sso-browser-sessions", rawUrl)
        {
        }
        /// <summary>
        /// &lt;br&gt;**Scope**: `sso-browser-sessions.write`&lt;br&gt;**Security Policy**: `Signed JWT`
        /// </summary>
        /// <returns>A <see cref="global::IBKR.Api.Kiota.Models.CreateBrowserSessionResponse"/></returns>
        /// <param name="body">Binary request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::IBKR.Api.Kiota.Models.MissingRequiredParameterResponse">When receiving a 400 status code</exception>
        /// <exception cref="global::IBKR.Api.Kiota.Models.InvalidAccessTokenResponse">When receiving a 401 status code</exception>
        /// <exception cref="global::IBKR.Api.Kiota.Models.InsufficientScopeResponse">When receiving a 403 status code</exception>
        /// <exception cref="global::IBKR.Api.Kiota.Models.InternalServerErrorResponse">When receiving a 500 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::IBKR.Api.Kiota.Models.CreateBrowserSessionResponse?> PostAsync(Stream body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::IBKR.Api.Kiota.Models.CreateBrowserSessionResponse> PostAsync(Stream body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "400", global::IBKR.Api.Kiota.Models.MissingRequiredParameterResponse.CreateFromDiscriminatorValue },
                { "401", global::IBKR.Api.Kiota.Models.InvalidAccessTokenResponse.CreateFromDiscriminatorValue },
                { "403", global::IBKR.Api.Kiota.Models.InsufficientScopeResponse.CreateFromDiscriminatorValue },
                { "500", global::IBKR.Api.Kiota.Models.InternalServerErrorResponse.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::IBKR.Api.Kiota.Models.CreateBrowserSessionResponse>(requestInfo, global::IBKR.Api.Kiota.Models.CreateBrowserSessionResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// &lt;br&gt;**Scope**: `sso-browser-sessions.write`&lt;br&gt;**Security Policy**: `Signed JWT`
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">Binary request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(Stream body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(Stream body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetStreamContent(body, "application/jwt");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::IBKR.Api.Kiota.Gw.Api.V1.SsoBrowserSessions.SsoBrowserSessionsRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::IBKR.Api.Kiota.Gw.Api.V1.SsoBrowserSessions.SsoBrowserSessionsRequestBuilder WithUrl(string rawUrl)
        {
            return new global::IBKR.Api.Kiota.Gw.Api.V1.SsoBrowserSessions.SsoBrowserSessionsRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class SsoBrowserSessionsRequestBuilderPostRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618
