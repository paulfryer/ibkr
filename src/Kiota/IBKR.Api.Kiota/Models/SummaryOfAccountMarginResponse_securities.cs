// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace IBKR.Api.Kiota.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class SummaryOfAccountMarginResponse_securities : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The minimum amount required to open a new position.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CurrentInitial { get; set; }
#nullable restore
#else
        public string CurrentInitial { get; set; }
#endif
        /// <summary>The amount of equity required to maintain your positions.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CurrentMaint { get; set; }
#nullable restore
#else
        public string CurrentMaint { get; set; }
#endif
        /// <summary>Provides a projected “at expiration” margin value based on the soon-to-expire contracts in your portfolio.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PrdctdPstXpryMrgnOpn { get; set; }
#nullable restore
#else
        public string PrdctdPstXpryMrgnOpn { get; set; }
#endif
        /// <summary>If it is 3:00 pm ET, the next calculation you’re looking ahead to is after the close, or the Overnight Initial Margin. If it’s 3:00 am ET, the next calculation will be at the market’s open. * `Securities` – Projected maintenance margin requirement as of next period’s margin change, in the base currency of the account.  * `Commodities` – Maintenance margin requirement as of next period’s margin change in the base currency of the account based on current margin requirements, which are subject to change. This value depends on when you are viewing your margin requirements.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PrjctdLkAhdMntnncMrgn { get; set; }
#nullable restore
#else
        public string PrjctdLkAhdMntnncMrgn { get; set; }
#endif
        /// <summary>Overnight refers to the window of time after the local market trading day is closed.   * `Securities` – Projected overnight maintenance margin requirement in the base currency of the account.   * `Commodities` – Overnight maintenance margin requirement in the base currency of the account based on current margin requirements, which are subject to change.  </summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PrjctdOvrnghtMntnncMrgn { get; set; }
#nullable restore
#else
        public string PrjctdOvrnghtMntnncMrgn { get; set; }
#endif
        /// <summary>Provides a projected &quot;liquid&quot; initial margin value based on account liquidation value.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ProjectedLiquidityInitalMargin { get; set; }
#nullable restore
#else
        public string ProjectedLiquidityInitalMargin { get; set; }
#endif
        /// <summary>Overnight refers to the window of time after the local market trading day is closed.   * Securities – Projected overnight initial margin requirement in the base currency of the account.   * Commodities – Overnight initial margin requirement in the base currency of the account based on current margin requirements, which are subject to change.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ProjectedOvernightInitialMargin { get; set; }
#nullable restore
#else
        public string ProjectedOvernightInitialMargin { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::IBKR.Api.Kiota.Models.SummaryOfAccountMarginResponse_securities"/> and sets the default values.
        /// </summary>
        public SummaryOfAccountMarginResponse_securities()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::IBKR.Api.Kiota.Models.SummaryOfAccountMarginResponse_securities"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::IBKR.Api.Kiota.Models.SummaryOfAccountMarginResponse_securities CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::IBKR.Api.Kiota.Models.SummaryOfAccountMarginResponse_securities();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "current_initial", n => { CurrentInitial = n.GetStringValue(); } },
                { "current_maint", n => { CurrentMaint = n.GetStringValue(); } },
                { "Prdctd Pst-xpry Mrgn @ Opn", n => { PrdctdPstXpryMrgnOpn = n.GetStringValue(); } },
                { "Prjctd Lk Ahd Mntnnc Mrgn", n => { PrjctdLkAhdMntnncMrgn = n.GetStringValue(); } },
                { "Prjctd Ovrnght Mntnnc Mrgn", n => { PrjctdOvrnghtMntnncMrgn = n.GetStringValue(); } },
                { "projected_liquidity_inital_margin", n => { ProjectedLiquidityInitalMargin = n.GetStringValue(); } },
                { "projected_overnight_initial_margin", n => { ProjectedOvernightInitialMargin = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("current_initial", CurrentInitial);
            writer.WriteStringValue("current_maint", CurrentMaint);
            writer.WriteStringValue("Prdctd Pst-xpry Mrgn @ Opn", PrdctdPstXpryMrgnOpn);
            writer.WriteStringValue("Prjctd Lk Ahd Mntnnc Mrgn", PrjctdLkAhdMntnncMrgn);
            writer.WriteStringValue("Prjctd Ovrnght Mntnnc Mrgn", PrjctdOvrnghtMntnncMrgn);
            writer.WriteStringValue("projected_liquidity_inital_margin", ProjectedLiquidityInitalMargin);
            writer.WriteStringValue("projected_overnight_initial_margin", ProjectedOvernightInitialMargin);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
