// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace IBKR.Api.Kiota.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class StmtRequest : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>account id</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AccountId { get; set; }
#nullable restore
#else
        public string AccountId { get; set; }
#endif
        /// <summary>array of account id&apos;s</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? AccountIds { get; set; }
#nullable restore
#else
        public List<string> AccountIds { get; set; }
#endif
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>crypto consolidate flag, If request contains any accounts with crypto segment, will turn request into Crypto Consolidated</summary>
        public bool? CryptoConsolIfAvailable { get; set; }
        /// <summary>to date</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EndDate { get; set; }
#nullable restore
#else
        public string EndDate { get; set; }
#endif
        /// <summary>to gzip the whole response pass true</summary>
        public bool? Gzip { get; set; }
        /// <summary>two character ISO language code</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Language { get; set; }
#nullable restore
#else
        public string Language { get; set; }
#endif
        /// <summary>output format</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MimeType { get; set; }
#nullable restore
#else
        public string MimeType { get; set; }
#endif
        /// <summary>possible values are consolidate, concatenate, or customConsolidate</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MultiAccountFormat { get; set; }
#nullable restore
#else
        public string MultiAccountFormat { get; set; }
#endif
        /// <summary>from date</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? StartDate { get; set; }
#nullable restore
#else
        public string StartDate { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::IBKR.Api.Kiota.Models.StmtRequest"/> and sets the default values.
        /// </summary>
        public StmtRequest()
        {
            AdditionalData = new Dictionary<string, object>();
            Language = "en";
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::IBKR.Api.Kiota.Models.StmtRequest"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::IBKR.Api.Kiota.Models.StmtRequest CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::IBKR.Api.Kiota.Models.StmtRequest();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "accountId", n => { AccountId = n.GetStringValue(); } },
                { "accountIds", n => { AccountIds = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "cryptoConsolIfAvailable", n => { CryptoConsolIfAvailable = n.GetBoolValue(); } },
                { "endDate", n => { EndDate = n.GetStringValue(); } },
                { "gzip", n => { Gzip = n.GetBoolValue(); } },
                { "language", n => { Language = n.GetStringValue(); } },
                { "mimeType", n => { MimeType = n.GetStringValue(); } },
                { "multiAccountFormat", n => { MultiAccountFormat = n.GetStringValue(); } },
                { "startDate", n => { StartDate = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("accountId", AccountId);
            writer.WriteCollectionOfPrimitiveValues<string>("accountIds", AccountIds);
            writer.WriteBoolValue("cryptoConsolIfAvailable", CryptoConsolIfAvailable);
            writer.WriteStringValue("endDate", EndDate);
            writer.WriteBoolValue("gzip", Gzip);
            writer.WriteStringValue("language", Language);
            writer.WriteStringValue("mimeType", MimeType);
            writer.WriteStringValue("multiAccountFormat", MultiAccountFormat);
            writer.WriteStringValue("startDate", StartDate);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
