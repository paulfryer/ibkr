// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace IBKR.Api.Kiota.Models
{
    /// <summary>
    /// Object containing data for a single OHLC bar.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class SingleHistoricalBar : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Closing value of the bar.</summary>
        public double? C { get; set; }
        /// <summary>High value of the bar.</summary>
        public double? H { get; set; }
        /// <summary>Low value of the bar.</summary>
        public double? L { get; set; }
        /// <summary>Opening value of the bar.</summary>
        public double? O { get; set; }
        /// <summary>Unix timestamp of the start (chronologically earlier) of the bar.</summary>
        public int? T { get; set; }
        /// <summary>Volume value of the bar, returned only for &quot;Last&quot; barType.</summary>
        public double? V { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::IBKR.Api.Kiota.Models.SingleHistoricalBar"/> and sets the default values.
        /// </summary>
        public SingleHistoricalBar()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::IBKR.Api.Kiota.Models.SingleHistoricalBar"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::IBKR.Api.Kiota.Models.SingleHistoricalBar CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::IBKR.Api.Kiota.Models.SingleHistoricalBar();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "c", n => { C = n.GetDoubleValue(); } },
                { "h", n => { H = n.GetDoubleValue(); } },
                { "l", n => { L = n.GetDoubleValue(); } },
                { "o", n => { O = n.GetDoubleValue(); } },
                { "t", n => { T = n.GetIntValue(); } },
                { "v", n => { V = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDoubleValue("c", C);
            writer.WriteDoubleValue("h", H);
            writer.WriteDoubleValue("l", L);
            writer.WriteDoubleValue("o", O);
            writer.WriteIntValue("t", T);
            writer.WriteDoubleValue("v", V);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
