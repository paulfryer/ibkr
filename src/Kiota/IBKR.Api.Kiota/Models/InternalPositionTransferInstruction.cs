// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace IBKR.Api.Kiota.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class InternalPositionTransferInstruction : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The clientInstructionId property</summary>
        public double? ClientInstructionId { get; set; }
        /// <summary>If settleDate is provided then tradeDate is also required</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SettleDate { get; set; }
#nullable restore
#else
        public string SettleDate { get; set; }
#endif
        /// <summary>The sourceAccountId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SourceAccountId { get; set; }
#nullable restore
#else
        public string SourceAccountId { get; set; }
#endif
        /// <summary>The targetAccountId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TargetAccountId { get; set; }
#nullable restore
#else
        public string TargetAccountId { get; set; }
#endif
        /// <summary>If tradeDate is provided then settleDate is also required</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TradeDate { get; set; }
#nullable restore
#else
        public string TradeDate { get; set; }
#endif
        /// <summary>The tradingInstrument property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::IBKR.Api.Kiota.Models.TradingInstrument? TradingInstrument { get; set; }
#nullable restore
#else
        public global::IBKR.Api.Kiota.Models.TradingInstrument TradingInstrument { get; set; }
#endif
        /// <summary>If transferPrice is provided then tradeDate and settleDate are also required</summary>
        public double? TransferPrice { get; set; }
        /// <summary>The transferQuantity property</summary>
        public double? TransferQuantity { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::IBKR.Api.Kiota.Models.InternalPositionTransferInstruction"/> and sets the default values.
        /// </summary>
        public InternalPositionTransferInstruction()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::IBKR.Api.Kiota.Models.InternalPositionTransferInstruction"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::IBKR.Api.Kiota.Models.InternalPositionTransferInstruction CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::IBKR.Api.Kiota.Models.InternalPositionTransferInstruction();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "clientInstructionId", n => { ClientInstructionId = n.GetDoubleValue(); } },
                { "settleDate", n => { SettleDate = n.GetStringValue(); } },
                { "sourceAccountId", n => { SourceAccountId = n.GetStringValue(); } },
                { "targetAccountId", n => { TargetAccountId = n.GetStringValue(); } },
                { "tradeDate", n => { TradeDate = n.GetStringValue(); } },
                { "tradingInstrument", n => { TradingInstrument = n.GetObjectValue<global::IBKR.Api.Kiota.Models.TradingInstrument>(global::IBKR.Api.Kiota.Models.TradingInstrument.CreateFromDiscriminatorValue); } },
                { "transferPrice", n => { TransferPrice = n.GetDoubleValue(); } },
                { "transferQuantity", n => { TransferQuantity = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDoubleValue("clientInstructionId", ClientInstructionId);
            writer.WriteStringValue("settleDate", SettleDate);
            writer.WriteStringValue("sourceAccountId", SourceAccountId);
            writer.WriteStringValue("targetAccountId", TargetAccountId);
            writer.WriteStringValue("tradeDate", TradeDate);
            writer.WriteObjectValue<global::IBKR.Api.Kiota.Models.TradingInstrument>("tradingInstrument", TradingInstrument);
            writer.WriteDoubleValue("transferPrice", TransferPrice);
            writer.WriteDoubleValue("transferQuantity", TransferQuantity);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
