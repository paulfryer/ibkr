// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace IBKR.Api.Kiota.Models
{
    /// <summary>
    /// details of the specified alert
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class AlertDetails : IAdditionalDataHolder, IParsable
    {
        /// <summary>Requestor’s account ID</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Account { get; set; }
#nullable restore
#else
        public string Account { get; set; }
#endif
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Returns if the alert is active [1] or disabled [0].</summary>
        public int? AlertActive { get; set; }
        /// <summary>Returns default type set for alerts. Configured in Client Portal.</summary>
        public int? AlertDefaultType { get; set; }
        /// <summary>Returns the designated email address for sendMessage functionality.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AlertEmail { get; set; }
#nullable restore
#else
        public string AlertEmail { get; set; }
#endif
        /// <summary>Returns the body content of what your alert will report once triggered</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AlertMessage { get; set; }
#nullable restore
#else
        public string AlertMessage { get; set; }
#endif
        /// <summary>Returns currency set for MTA alerts. Only valid for alert type 8 &amp; 9.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AlertMtaCurrency { get; set; }
#nullable restore
#else
        public string AlertMtaCurrency { get; set; }
#endif
        /// <summary>Returns current MTA default values.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AlertMtaDefaults { get; set; }
#nullable restore
#else
        public string AlertMtaDefaults { get; set; }
#endif
        /// <summary>Human readable name of the alert.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AlertName { get; set; }
#nullable restore
#else
        public string AlertName { get; set; }
#endif
        /// <summary>Returns whether or not the alert will play audio</summary>
        public int? AlertPlayAudio { get; set; }
        /// <summary>Returns if the alert can be sent more than once.</summary>
        public int? AlertRepeatable { get; set; }
        /// <summary>Returns whether or not the alert will send an email.</summary>
        public int? AlertSendMessage { get; set; }
        /// <summary>Returns whether or not the alert will trigger TWS Pop-up messages</summary>
        public int? AlertShowPopup { get; set; }
        /// <summary>Returns whether or not the alert was triggered yet.</summary>
        public int? AlertTriggered { get; set; }
        /// <summary>Background color. Not applicable to API.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BgColor { get; set; }
#nullable restore
#else
        public string BgColor { get; set; }
#endif
        /// <summary>Returns whether or not the alert will trigger outside of regular trading hours.</summary>
        public int? ConditionOutsideRth { get; set; }
        /// <summary>Returns all conditions</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::IBKR.Api.Kiota.Models.AlertCondition>? Conditions { get; set; }
#nullable restore
#else
        public List<global::IBKR.Api.Kiota.Models.AlertCondition> Conditions { get; set; }
#endif
        /// <summary>Returns the total number of conditions in the alert.</summary>
        public int? ConditionSize { get; set; }
        /// <summary>Returns the UTC formatted date used in GTD orders.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ExpireTime { get; set; }
#nullable restore
#else
        public string ExpireTime { get; set; }
#endif
        /// <summary>Foreground color. Not applicable to API.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FgColor { get; set; }
#nullable restore
#else
        public string FgColor { get; set; }
#endif
        /// <summary>Returns whether or not the alert will trigger mobile notifications.</summary>
        public int? ItwsOrdersOnly { get; set; }
        /// <summary>Alert’s tracking ID. Can be used for modifying or deleting alerts.</summary>
        public int? OrderId { get; set; }
        /// <summary>Returns if the order can be edited.</summary>
        public bool? OrderNotEditable { get; set; }
        /// <summary>represent order statusAlways returns “Presubmitted”.</summary>
        public global::IBKR.Api.Kiota.Models.AlertDetails_order_status? OrderStatus { get; set; }
        /// <summary>Time in Force effective for the Alert</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Tif { get; set; }
#nullable restore
#else
        public string Tif { get; set; }
#endif
        /// <summary>Returned for time-specific conditions.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TimeZone { get; set; }
#nullable restore
#else
        public string TimeZone { get; set; }
#endif
        /// <summary>Tracking ID for MTA alerts only. Returns ‘null’ for standard alerts.</summary>
        public int? ToolId { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::IBKR.Api.Kiota.Models.AlertDetails"/> and sets the default values.
        /// </summary>
        public AlertDetails()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::IBKR.Api.Kiota.Models.AlertDetails"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::IBKR.Api.Kiota.Models.AlertDetails CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::IBKR.Api.Kiota.Models.AlertDetails();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "account", n => { Account = n.GetStringValue(); } },
                { "alert_active", n => { AlertActive = n.GetIntValue(); } },
                { "alert_default_type", n => { AlertDefaultType = n.GetIntValue(); } },
                { "alert_email", n => { AlertEmail = n.GetStringValue(); } },
                { "alert_message", n => { AlertMessage = n.GetStringValue(); } },
                { "alert_mta_currency", n => { AlertMtaCurrency = n.GetStringValue(); } },
                { "alert_mta_defaults", n => { AlertMtaDefaults = n.GetStringValue(); } },
                { "alertName", n => { AlertName = n.GetStringValue(); } },
                { "alert_play_audio", n => { AlertPlayAudio = n.GetIntValue(); } },
                { "alert_repeatable", n => { AlertRepeatable = n.GetIntValue(); } },
                { "alert_send_message", n => { AlertSendMessage = n.GetIntValue(); } },
                { "alert_show_popup", n => { AlertShowPopup = n.GetIntValue(); } },
                { "alert_triggered", n => { AlertTriggered = n.GetIntValue(); } },
                { "bg_color", n => { BgColor = n.GetStringValue(); } },
                { "condition_outside_rth", n => { ConditionOutsideRth = n.GetIntValue(); } },
                { "condition_size", n => { ConditionSize = n.GetIntValue(); } },
                { "conditions", n => { Conditions = n.GetCollectionOfObjectValues<global::IBKR.Api.Kiota.Models.AlertCondition>(global::IBKR.Api.Kiota.Models.AlertCondition.CreateFromDiscriminatorValue)?.AsList(); } },
                { "expire_time", n => { ExpireTime = n.GetStringValue(); } },
                { "fg_color", n => { FgColor = n.GetStringValue(); } },
                { "itws_orders_only", n => { ItwsOrdersOnly = n.GetIntValue(); } },
                { "order_id", n => { OrderId = n.GetIntValue(); } },
                { "order_not_editable", n => { OrderNotEditable = n.GetBoolValue(); } },
                { "order_status", n => { OrderStatus = n.GetEnumValue<global::IBKR.Api.Kiota.Models.AlertDetails_order_status>(); } },
                { "tif", n => { Tif = n.GetStringValue(); } },
                { "time_zone", n => { TimeZone = n.GetStringValue(); } },
                { "tool_id", n => { ToolId = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("account", Account);
            writer.WriteIntValue("alert_active", AlertActive);
            writer.WriteIntValue("alert_default_type", AlertDefaultType);
            writer.WriteStringValue("alert_email", AlertEmail);
            writer.WriteStringValue("alert_message", AlertMessage);
            writer.WriteStringValue("alert_mta_currency", AlertMtaCurrency);
            writer.WriteStringValue("alert_mta_defaults", AlertMtaDefaults);
            writer.WriteStringValue("alertName", AlertName);
            writer.WriteIntValue("alert_play_audio", AlertPlayAudio);
            writer.WriteIntValue("alert_repeatable", AlertRepeatable);
            writer.WriteIntValue("alert_send_message", AlertSendMessage);
            writer.WriteIntValue("alert_show_popup", AlertShowPopup);
            writer.WriteIntValue("alert_triggered", AlertTriggered);
            writer.WriteStringValue("bg_color", BgColor);
            writer.WriteIntValue("condition_outside_rth", ConditionOutsideRth);
            writer.WriteCollectionOfObjectValues<global::IBKR.Api.Kiota.Models.AlertCondition>("conditions", Conditions);
            writer.WriteIntValue("condition_size", ConditionSize);
            writer.WriteStringValue("expire_time", ExpireTime);
            writer.WriteStringValue("fg_color", FgColor);
            writer.WriteIntValue("itws_orders_only", ItwsOrdersOnly);
            writer.WriteIntValue("order_id", OrderId);
            writer.WriteBoolValue("order_not_editable", OrderNotEditable);
            writer.WriteEnumValue<global::IBKR.Api.Kiota.Models.AlertDetails_order_status>("order_status", OrderStatus);
            writer.WriteStringValue("tif", Tif);
            writer.WriteStringValue("time_zone", TimeZone);
            writer.WriteIntValue("tool_id", ToolId);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
