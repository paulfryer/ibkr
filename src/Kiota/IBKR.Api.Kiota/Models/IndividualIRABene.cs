// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace IBKR.Api.Kiota.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class IndividualIRABene : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The dateOfBirth property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DateOfBirth { get; set; }
#nullable restore
#else
        public string DateOfBirth { get; set; }
#endif
        /// <summary>The firstName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FirstName { get; set; }
#nullable restore
#else
        public string FirstName { get; set; }
#endif
        /// <summary>The identification property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::IBKR.Api.Kiota.Models.IndividualIRABene_identification? Identification { get; set; }
#nullable restore
#else
        public global::IBKR.Api.Kiota.Models.IndividualIRABene_identification Identification { get; set; }
#endif
        /// <summary>The lastName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LastName { get; set; }
#nullable restore
#else
        public string LastName { get; set; }
#endif
        /// <summary>The location property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::IBKR.Api.Kiota.Models.IndividualIRABene_location? Location { get; set; }
#nullable restore
#else
        public global::IBKR.Api.Kiota.Models.IndividualIRABene_location Location { get; set; }
#endif
        /// <summary>The ownership property</summary>
        public int? Ownership { get; set; }
        /// <summary>The perStripes property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PerStripes { get; set; }
#nullable restore
#else
        public string PerStripes { get; set; }
#endif
        /// <summary>The relationship property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Relationship { get; set; }
#nullable restore
#else
        public string Relationship { get; set; }
#endif
        /// <summary>The type property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Type { get; set; }
#nullable restore
#else
        public string Type { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::IBKR.Api.Kiota.Models.IndividualIRABene"/> and sets the default values.
        /// </summary>
        public IndividualIRABene()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::IBKR.Api.Kiota.Models.IndividualIRABene"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::IBKR.Api.Kiota.Models.IndividualIRABene CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::IBKR.Api.Kiota.Models.IndividualIRABene();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "dateOfBirth", n => { DateOfBirth = n.GetStringValue(); } },
                { "firstName", n => { FirstName = n.GetStringValue(); } },
                { "identification", n => { Identification = n.GetObjectValue<global::IBKR.Api.Kiota.Models.IndividualIRABene_identification>(global::IBKR.Api.Kiota.Models.IndividualIRABene_identification.CreateFromDiscriminatorValue); } },
                { "lastName", n => { LastName = n.GetStringValue(); } },
                { "location", n => { Location = n.GetObjectValue<global::IBKR.Api.Kiota.Models.IndividualIRABene_location>(global::IBKR.Api.Kiota.Models.IndividualIRABene_location.CreateFromDiscriminatorValue); } },
                { "ownership", n => { Ownership = n.GetIntValue(); } },
                { "perStripes", n => { PerStripes = n.GetStringValue(); } },
                { "relationship", n => { Relationship = n.GetStringValue(); } },
                { "type", n => { Type = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("dateOfBirth", DateOfBirth);
            writer.WriteStringValue("firstName", FirstName);
            writer.WriteObjectValue<global::IBKR.Api.Kiota.Models.IndividualIRABene_identification>("identification", Identification);
            writer.WriteStringValue("lastName", LastName);
            writer.WriteObjectValue<global::IBKR.Api.Kiota.Models.IndividualIRABene_location>("location", Location);
            writer.WriteIntValue("ownership", Ownership);
            writer.WriteStringValue("perStripes", PerStripes);
            writer.WriteStringValue("relationship", Relationship);
            writer.WriteStringValue("type", Type);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
