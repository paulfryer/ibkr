// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace IBKR.Api.Kiota.Models
{
    /// <summary>
    /// Relates a message generated in response to the rejection of the submitted order ticket. In some cases, it may also present a mechanism to resubmit the same order following a prompted decision.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class AdvancedOrderReject : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Indicates whether this prompt is dismissable.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public UntypedNode? Dismissable { get; set; }
#nullable restore
#else
        public UntypedNode Dismissable { get; set; }
#endif
        /// <summary>IB internal identifier for the nature or category of the returned message.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MessageId { get; set; }
#nullable restore
#else
        public string MessageId { get; set; }
#endif
        /// <summary>Choices available to the client in response to the rejection message.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Options { get; set; }
#nullable restore
#else
        public List<string> Options { get; set; }
#endif
        /// <summary>The order ID assigned by IB to the rejected order ticket.</summary>
        public int? OrderId { get; set; }
        /// <summary>Indicates that the message is a prompt offering a set of decisions, one or more of which may permit the rejected order to be resubmitted.</summary>
        public bool? Prompt { get; set; }
        /// <summary>IB&apos;s internal identifier assigned to the returned message.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ReqId { get; set; }
#nullable restore
#else
        public string ReqId { get; set; }
#endif
        /// <summary>Human-readable text of the messages emitted by IB in response to order submission.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Text { get; set; }
#nullable restore
#else
        public string Text { get; set; }
#endif
        /// <summary>The specific type of message returned.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Type { get; set; }
#nullable restore
#else
        public string Type { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::IBKR.Api.Kiota.Models.AdvancedOrderReject"/> and sets the default values.
        /// </summary>
        public AdvancedOrderReject()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::IBKR.Api.Kiota.Models.AdvancedOrderReject"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::IBKR.Api.Kiota.Models.AdvancedOrderReject CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::IBKR.Api.Kiota.Models.AdvancedOrderReject();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "dismissable", n => { Dismissable = n.GetObjectValue<UntypedNode>(UntypedNode.CreateFromDiscriminatorValue); } },
                { "messageId", n => { MessageId = n.GetStringValue(); } },
                { "options", n => { Options = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "orderId", n => { OrderId = n.GetIntValue(); } },
                { "prompt", n => { Prompt = n.GetBoolValue(); } },
                { "reqId", n => { ReqId = n.GetStringValue(); } },
                { "text", n => { Text = n.GetStringValue(); } },
                { "type", n => { Type = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<UntypedNode>("dismissable", Dismissable);
            writer.WriteStringValue("messageId", MessageId);
            writer.WriteCollectionOfPrimitiveValues<string>("options", Options);
            writer.WriteIntValue("orderId", OrderId);
            writer.WriteBoolValue("prompt", Prompt);
            writer.WriteStringValue("reqId", ReqId);
            writer.WriteStringValue("text", Text);
            writer.WriteStringValue("type", Type);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
