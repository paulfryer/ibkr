// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace IBKR.Api.Kiota.Models
{
    /// <summary>
    /// Contains the watchlist query results.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class WatchlistsResponse_data : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Indicates if username&apos;s watchlists can be bulk-deleted.</summary>
        public bool? BulkDelete { get; set; }
        /// <summary>Indicates if query results contain only market scanners.</summary>
        public bool? ScannersOnly { get; set; }
        /// <summary>Indicates if market scanners are included in query results.</summary>
        public bool? ShowScanners { get; set; }
        /// <summary>Array of objects detailing the watchlists saved for the username in use in the current Web API session.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::IBKR.Api.Kiota.Models.WatchlistsResponse_data_user_lists>? UserLists { get; set; }
#nullable restore
#else
        public List<global::IBKR.Api.Kiota.Models.WatchlistsResponse_data_user_lists> UserLists { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::IBKR.Api.Kiota.Models.WatchlistsResponse_data"/> and sets the default values.
        /// </summary>
        public WatchlistsResponse_data()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::IBKR.Api.Kiota.Models.WatchlistsResponse_data"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::IBKR.Api.Kiota.Models.WatchlistsResponse_data CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::IBKR.Api.Kiota.Models.WatchlistsResponse_data();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "bulk_delete", n => { BulkDelete = n.GetBoolValue(); } },
                { "scanners_only", n => { ScannersOnly = n.GetBoolValue(); } },
                { "show_scanners", n => { ShowScanners = n.GetBoolValue(); } },
                { "user_lists", n => { UserLists = n.GetCollectionOfObjectValues<global::IBKR.Api.Kiota.Models.WatchlistsResponse_data_user_lists>(global::IBKR.Api.Kiota.Models.WatchlistsResponse_data_user_lists.CreateFromDiscriminatorValue)?.AsList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("bulk_delete", BulkDelete);
            writer.WriteBoolValue("scanners_only", ScannersOnly);
            writer.WriteBoolValue("show_scanners", ShowScanners);
            writer.WriteCollectionOfObjectValues<global::IBKR.Api.Kiota.Models.WatchlistsResponse_data_user_lists>("user_lists", UserLists);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
