// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace IBKR.Api.Kiota.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class PerformanceResponse : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Returns the object containing the Cumulative performance data.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::IBKR.Api.Kiota.Models.PerformanceResponse_cps? Cps { get; set; }
#nullable restore
#else
        public global::IBKR.Api.Kiota.Models.PerformanceResponse_cps Cps { get; set; }
#endif
        /// <summary>Confirms if the currency type. If trading exclusively in your base currency, “base” will be returned.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CurrencyType { get; set; }
#nullable restore
#else
        public string CurrencyType { get; set; }
#endif
        /// <summary>Returns the request identifier, getPerformanceData.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>Returns an array containing accounts reviewed.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public UntypedNode? Included { get; set; }
#nullable restore
#else
        public UntypedNode Included { get; set; }
#endif
        /// <summary>Net asset value data for the account or consolidated accounts. NAV data is not applicable to benchmarks.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::IBKR.Api.Kiota.Models.PerformanceResponse_nav? Nav { get; set; }
#nullable restore
#else
        public global::IBKR.Api.Kiota.Models.PerformanceResponse_nav Nav { get; set; }
#endif
        /// <summary>Returns the total data points.</summary>
        public int? Nd { get; set; }
        /// <summary>Portfolio Measure. Used to indicate TWR or MWR values returned.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Pm { get; set; }
#nullable restore
#else
        public string Pm { get; set; }
#endif
        /// <summary>Returns the data identifier (Internal Use Only).</summary>
        public int? Rc { get; set; }
        /// <summary>Returns the time period performance data.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::IBKR.Api.Kiota.Models.PerformanceResponse_tpps? Tpps { get; set; }
#nullable restore
#else
        public global::IBKR.Api.Kiota.Models.PerformanceResponse_tpps Tpps { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::IBKR.Api.Kiota.Models.PerformanceResponse"/> and sets the default values.
        /// </summary>
        public PerformanceResponse()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::IBKR.Api.Kiota.Models.PerformanceResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::IBKR.Api.Kiota.Models.PerformanceResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::IBKR.Api.Kiota.Models.PerformanceResponse();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "cps", n => { Cps = n.GetObjectValue<global::IBKR.Api.Kiota.Models.PerformanceResponse_cps>(global::IBKR.Api.Kiota.Models.PerformanceResponse_cps.CreateFromDiscriminatorValue); } },
                { "currencyType", n => { CurrencyType = n.GetStringValue(); } },
                { "id", n => { Id = n.GetStringValue(); } },
                { "included", n => { Included = n.GetObjectValue<UntypedNode>(UntypedNode.CreateFromDiscriminatorValue); } },
                { "nav", n => { Nav = n.GetObjectValue<global::IBKR.Api.Kiota.Models.PerformanceResponse_nav>(global::IBKR.Api.Kiota.Models.PerformanceResponse_nav.CreateFromDiscriminatorValue); } },
                { "nd", n => { Nd = n.GetIntValue(); } },
                { "pm", n => { Pm = n.GetStringValue(); } },
                { "rc", n => { Rc = n.GetIntValue(); } },
                { "tpps", n => { Tpps = n.GetObjectValue<global::IBKR.Api.Kiota.Models.PerformanceResponse_tpps>(global::IBKR.Api.Kiota.Models.PerformanceResponse_tpps.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::IBKR.Api.Kiota.Models.PerformanceResponse_cps>("cps", Cps);
            writer.WriteStringValue("currencyType", CurrencyType);
            writer.WriteStringValue("id", Id);
            writer.WriteObjectValue<UntypedNode>("included", Included);
            writer.WriteObjectValue<global::IBKR.Api.Kiota.Models.PerformanceResponse_nav>("nav", Nav);
            writer.WriteIntValue("nd", Nd);
            writer.WriteStringValue("pm", Pm);
            writer.WriteIntValue("rc", Rc);
            writer.WriteObjectValue<global::IBKR.Api.Kiota.Models.PerformanceResponse_tpps>("tpps", Tpps);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
