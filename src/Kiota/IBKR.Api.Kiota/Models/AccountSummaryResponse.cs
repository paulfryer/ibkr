// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace IBKR.Api.Kiota.Models
{
    /// <summary>
    /// Successful return contianing an array of at-a-glance account details.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class AccountSummaryResponse : IAdditionalDataHolder, IParsable
    {
        /// <summary>Describes the unique account type. For standard individual accounts, an empty string is returned.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AccountType { get; set; }
#nullable restore
#else
        public string AccountType { get; set; }
#endif
        /// <summary>Accrued interest is the interest accruing on a security since the previous coupon date. If a security is sold between two payment dates, the buyer usually compensates the seller for the interest accrued, either within the price or as a separate payment.</summary>
        public int? AccruedInterest { get; set; }
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The amount of equity you have available for trading. For both the Securities and Commodities segments, this is calculated as: Equity with Loan Value â€“ Initial Margin.</summary>
        public int? AvailableFunds { get; set; }
        /// <summary>Returns the total account balance.</summary>
        public int? Balance { get; set; }
        /// <summary>Total buying power available for the account.</summary>
        public int? BuyingPower { get; set; }
        /// <summary>An array containing balance information for all currencies held by the account.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::IBKR.Api.Kiota.Models.AccountSummaryResponse_cashBalances>? CashBalances { get; set; }
#nullable restore
#else
        public List<global::IBKR.Api.Kiota.Models.AccountSummaryResponse_cashBalances> CashBalances { get; set; }
#endif
        /// <summary>The basis for determining whether you have the necessary assets to either initiate or maintain security assets.</summary>
        public int? EquityWithLoanValue { get; set; }
        /// <summary>The amount of cash in excess of the usual requirement in your account.</summary>
        public int? ExcessLiquidity { get; set; }
        /// <summary>The available initial margin for the account.</summary>
        public int? InitialMargin { get; set; }
        /// <summary>The available maintenance margin for the account.</summary>
        public int? MaintenanceMargin { get; set; }
        /// <summary>The basis for determining the price of the assets in your account.</summary>
        public int? NetLiquidationValue { get; set; }
        /// <summary>The Federal Reserve Board regulation governing the amount of credit that broker dealers may extend to clients who borrow money to buy securities on margin.</summary>
        public int? RegTLoan { get; set; }
        /// <summary>The initial margin requirements calculated under US Regulation T rules for both the securities and commodities segment of your account.</summary>
        public int? RegTMargin { get; set; }
        /// <summary>Absolute value of the Long Stock Value + Short Stock Value + Long Option Value + Short Option Value + Fund Value.</summary>
        public int? SecuritiesGVP { get; set; }
        /// <summary>Simple Moving Average of the account.</summary>
        public int? SMA { get; set; }
        /// <summary>If the account is currently non-tradeable, a status message will be dispalyed.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Status { get; set; }
#nullable restore
#else
        public string Status { get; set; }
#endif
        /// <summary>Cash recognized at the time of trade + futures P&amp;L. This value reflects real-time currency positions, including: *  Trades executed directly through the FX market. *  Trades executed as a result of automatic IB conversions, which occur when you trade a product in a non-base currency. *  Trades deliberately executed to close non-base currency positions using the FXCONV destination.</summary>
        public int? TotalCashValue { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::IBKR.Api.Kiota.Models.AccountSummaryResponse"/> and sets the default values.
        /// </summary>
        public AccountSummaryResponse()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::IBKR.Api.Kiota.Models.AccountSummaryResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::IBKR.Api.Kiota.Models.AccountSummaryResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::IBKR.Api.Kiota.Models.AccountSummaryResponse();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "accountType", n => { AccountType = n.GetStringValue(); } },
                { "accruedInterest", n => { AccruedInterest = n.GetIntValue(); } },
                { "availableFunds", n => { AvailableFunds = n.GetIntValue(); } },
                { "balance", n => { Balance = n.GetIntValue(); } },
                { "buyingPower", n => { BuyingPower = n.GetIntValue(); } },
                { "cashBalances", n => { CashBalances = n.GetCollectionOfObjectValues<global::IBKR.Api.Kiota.Models.AccountSummaryResponse_cashBalances>(global::IBKR.Api.Kiota.Models.AccountSummaryResponse_cashBalances.CreateFromDiscriminatorValue)?.AsList(); } },
                { "equityWithLoanValue", n => { EquityWithLoanValue = n.GetIntValue(); } },
                { "excessLiquidity", n => { ExcessLiquidity = n.GetIntValue(); } },
                { "initialMargin", n => { InitialMargin = n.GetIntValue(); } },
                { "maintenanceMargin", n => { MaintenanceMargin = n.GetIntValue(); } },
                { "netLiquidationValue", n => { NetLiquidationValue = n.GetIntValue(); } },
                { "regTLoan", n => { RegTLoan = n.GetIntValue(); } },
                { "regTMargin", n => { RegTMargin = n.GetIntValue(); } },
                { "SMA", n => { SMA = n.GetIntValue(); } },
                { "securitiesGVP", n => { SecuritiesGVP = n.GetIntValue(); } },
                { "status", n => { Status = n.GetStringValue(); } },
                { "totalCashValue", n => { TotalCashValue = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("accountType", AccountType);
            writer.WriteIntValue("accruedInterest", AccruedInterest);
            writer.WriteIntValue("availableFunds", AvailableFunds);
            writer.WriteIntValue("balance", Balance);
            writer.WriteIntValue("buyingPower", BuyingPower);
            writer.WriteCollectionOfObjectValues<global::IBKR.Api.Kiota.Models.AccountSummaryResponse_cashBalances>("cashBalances", CashBalances);
            writer.WriteIntValue("equityWithLoanValue", EquityWithLoanValue);
            writer.WriteIntValue("excessLiquidity", ExcessLiquidity);
            writer.WriteIntValue("initialMargin", InitialMargin);
            writer.WriteIntValue("maintenanceMargin", MaintenanceMargin);
            writer.WriteIntValue("netLiquidationValue", NetLiquidationValue);
            writer.WriteIntValue("regTLoan", RegTLoan);
            writer.WriteIntValue("regTMargin", RegTMargin);
            writer.WriteIntValue("securitiesGVP", SecuritiesGVP);
            writer.WriteIntValue("SMA", SMA);
            writer.WriteStringValue("status", Status);
            writer.WriteIntValue("totalCashValue", TotalCashValue);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
