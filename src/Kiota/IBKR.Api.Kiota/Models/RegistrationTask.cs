// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace IBKR.Api.Kiota.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class RegistrationTask : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The action property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Action { get; set; }
#nullable restore
#else
        public string Action { get; set; }
#endif
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The dateCompleted property</summary>
        public DateTimeOffset? DateCompleted { get; set; }
        /// <summary>The externalId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ExternalId { get; set; }
#nullable restore
#else
        public string ExternalId { get; set; }
#endif
        /// <summary>The formName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FormName { get; set; }
#nullable restore
#else
        public string FormName { get; set; }
#endif
        /// <summary>The formNumber property</summary>
        public int? FormNumber { get; set; }
        /// <summary>The isCompleted property</summary>
        public bool? IsCompleted { get; set; }
        /// <summary>The isDeclined property</summary>
        public bool? IsDeclined { get; set; }
        /// <summary>The isRequiredForApproval property</summary>
        public bool? IsRequiredForApproval { get; set; }
        /// <summary>The questionIds property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<int?>? QuestionIds { get; set; }
#nullable restore
#else
        public List<int?> QuestionIds { get; set; }
#endif
        /// <summary>The state property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? State { get; set; }
#nullable restore
#else
        public string State { get; set; }
#endif
        /// <summary>The warning property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Warning { get; set; }
#nullable restore
#else
        public string Warning { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::IBKR.Api.Kiota.Models.RegistrationTask"/> and sets the default values.
        /// </summary>
        public RegistrationTask()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::IBKR.Api.Kiota.Models.RegistrationTask"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::IBKR.Api.Kiota.Models.RegistrationTask CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::IBKR.Api.Kiota.Models.RegistrationTask();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "action", n => { Action = n.GetStringValue(); } },
                { "dateCompleted", n => { DateCompleted = n.GetDateTimeOffsetValue(); } },
                { "externalId", n => { ExternalId = n.GetStringValue(); } },
                { "formName", n => { FormName = n.GetStringValue(); } },
                { "formNumber", n => { FormNumber = n.GetIntValue(); } },
                { "isCompleted", n => { IsCompleted = n.GetBoolValue(); } },
                { "isDeclined", n => { IsDeclined = n.GetBoolValue(); } },
                { "isRequiredForApproval", n => { IsRequiredForApproval = n.GetBoolValue(); } },
                { "questionIds", n => { QuestionIds = n.GetCollectionOfPrimitiveValues<int?>()?.AsList(); } },
                { "state", n => { State = n.GetStringValue(); } },
                { "warning", n => { Warning = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("action", Action);
            writer.WriteDateTimeOffsetValue("dateCompleted", DateCompleted);
            writer.WriteStringValue("externalId", ExternalId);
            writer.WriteStringValue("formName", FormName);
            writer.WriteIntValue("formNumber", FormNumber);
            writer.WriteBoolValue("isCompleted", IsCompleted);
            writer.WriteBoolValue("isDeclined", IsDeclined);
            writer.WriteBoolValue("isRequiredForApproval", IsRequiredForApproval);
            writer.WriteCollectionOfPrimitiveValues<int?>("questionIds", QuestionIds);
            writer.WriteStringValue("state", State);
            writer.WriteStringValue("warning", Warning);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
