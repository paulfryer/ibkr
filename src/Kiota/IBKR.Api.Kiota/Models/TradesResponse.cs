// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace IBKR.Api.Kiota.Models
{
    /// <summary>
    /// Object containing details of a single execution.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class TradesResponse : IAdditionalDataHolder, IParsable
    {
        /// <summary>The IB account ID of the account that received the execution.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Account { get; set; }
#nullable restore
#else
        public string Account { get; set; }
#endif
        /// <summary>The IB account ID of the account that received the execution.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AccountAllocationName { get; set; }
#nullable restore
#else
        public string AccountAllocationName { get; set; }
#endif
        /// <summary>The IB account ID of the account that received the execution.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AccountCode { get; set; }
#nullable restore
#else
        public string AccountCode { get; set; }
#endif
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Identifier of the firm clearing the trade. Value is &quot;IB&quot; if account is cleared by Interactive Brokers.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ClearingId { get; set; }
#nullable restore
#else
        public string ClearingId { get; set; }
#endif
        /// <summary>Name of the firm clearing the trade. Value is &quot;IB&quot; if account is cleared by Interactive Brokers.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ClearingName { get; set; }
#nullable restore
#else
        public string ClearingName { get; set; }
#endif
        /// <summary>Commissions incurred by the execution. May also include</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Commission { get; set; }
#nullable restore
#else
        public string Commission { get; set; }
#endif
        /// <summary>Name of business associated with instrument, or otherwise description of instrument.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CompanyName { get; set; }
#nullable restore
#else
        public string CompanyName { get; set; }
#endif
        /// <summary>Contract ID of the order&apos;s instrument.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Conid { get; set; }
#nullable restore
#else
        public string Conid { get; set; }
#endif
        /// <summary>Contract ID and routing destination in format 123456@EXCHANGE.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ConidEx { get; set; }
#nullable restore
#else
        public string ConidEx { get; set; }
#endif
        /// <summary>Human-readable description of the order&apos;s instrument.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ContractDescription1 { get; set; }
#nullable restore
#else
        public string ContractDescription1 { get; set; }
#endif
        /// <summary>The exchange or other venue on which the execution occurred.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Exchange { get; set; }
#nullable restore
#else
        public string Exchange { get; set; }
#endif
        /// <summary>IB-assigned execution identifier.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ExecutionId { get; set; }
#nullable restore
#else
        public string ExecutionId { get; set; }
#endif
        /// <summary>Indicates whether the order ticket is an Event Trading order.</summary>
        public global::IBKR.Api.Kiota.Models.TradesResponse_is_event_trading? IsEventTrading { get; set; }
        /// <summary>Indicates whether the trade is the result of a liquidiation by IB.</summary>
        public global::IBKR.Api.Kiota.Models.TradesResponse_liquidation_trade? LiquidationTrade { get; set; }
        /// <summary>The primary exchange on which the instrument is listed.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ListingExchange { get; set; }
#nullable restore
#else
        public string ListingExchange { get; set; }
#endif
        /// <summary>net_amount</summary>
        public double? NetAmount { get; set; }
        /// <summary>Human-readable description of the outcome of the execution.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OrderDescription { get; set; }
#nullable restore
#else
        public string OrderDescription { get; set; }
#endif
        /// <summary>The client-provided customer order identifier. Specified via cOID during order submission in the Web API.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OrderRef { get; set; }
#nullable restore
#else
        public string OrderRef { get; set; }
#endif
        /// <summary>The price at which the execution occurred.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Price { get; set; }
#nullable restore
#else
        public string Price { get; set; }
#endif
        /// <summary>IB asset class identifier.</summary>
        public global::IBKR.Api.Kiota.Models.TradesResponse_sec_type? SecType { get; set; }
        /// <summary>Side of the execution.</summary>
        public global::IBKR.Api.Kiota.Models.TradesResponse_side? Side { get; set; }
        /// <summary>The size of the execution in units of the instrument.</summary>
        public double? Size { get; set; }
        /// <summary>The IB username that originated the order ticket against which the execution occurred.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Submitter { get; set; }
#nullable restore
#else
        public string Submitter { get; set; }
#endif
        /// <summary>Indicates whether the order is supported by IB&apos;s Tax Optimization tool.</summary>
        public global::IBKR.Api.Kiota.Models.TradesResponse_supports_tax_opt? SupportsTaxOpt { get; set; }
        /// <summary>Symbol of the instrument involved in the execution.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Symbol { get; set; }
#nullable restore
#else
        public string Symbol { get; set; }
#endif
        /// <summary>UTC date and time of the execution in format YYYYMMDD-hh:mm:ss.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TradeTime { get; set; }
#nullable restore
#else
        public string TradeTime { get; set; }
#endif
        /// <summary>Unix timestamp of the execution time in milliseconds.</summary>
        public int? TradeTimeR { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::IBKR.Api.Kiota.Models.TradesResponse"/> and sets the default values.
        /// </summary>
        public TradesResponse()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::IBKR.Api.Kiota.Models.TradesResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::IBKR.Api.Kiota.Models.TradesResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::IBKR.Api.Kiota.Models.TradesResponse();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "account", n => { Account = n.GetStringValue(); } },
                { "account_allocation_name", n => { AccountAllocationName = n.GetStringValue(); } },
                { "accountCode", n => { AccountCode = n.GetStringValue(); } },
                { "clearing_id", n => { ClearingId = n.GetStringValue(); } },
                { "clearing_name", n => { ClearingName = n.GetStringValue(); } },
                { "commission", n => { Commission = n.GetStringValue(); } },
                { "company_name", n => { CompanyName = n.GetStringValue(); } },
                { "conid", n => { Conid = n.GetStringValue(); } },
                { "conidEx", n => { ConidEx = n.GetStringValue(); } },
                { "contract_description_1", n => { ContractDescription1 = n.GetStringValue(); } },
                { "exchange", n => { Exchange = n.GetStringValue(); } },
                { "execution_id", n => { ExecutionId = n.GetStringValue(); } },
                { "is_event_trading", n => { IsEventTrading = n.GetEnumValue<global::IBKR.Api.Kiota.Models.TradesResponse_is_event_trading>(); } },
                { "liquidation_trade", n => { LiquidationTrade = n.GetEnumValue<global::IBKR.Api.Kiota.Models.TradesResponse_liquidation_trade>(); } },
                { "listing_exchange", n => { ListingExchange = n.GetStringValue(); } },
                { "net_amount", n => { NetAmount = n.GetDoubleValue(); } },
                { "order_description", n => { OrderDescription = n.GetStringValue(); } },
                { "order_ref", n => { OrderRef = n.GetStringValue(); } },
                { "price", n => { Price = n.GetStringValue(); } },
                { "sec_type", n => { SecType = n.GetEnumValue<global::IBKR.Api.Kiota.Models.TradesResponse_sec_type>(); } },
                { "side", n => { Side = n.GetEnumValue<global::IBKR.Api.Kiota.Models.TradesResponse_side>(); } },
                { "size", n => { Size = n.GetDoubleValue(); } },
                { "submitter", n => { Submitter = n.GetStringValue(); } },
                { "supports_tax_opt", n => { SupportsTaxOpt = n.GetEnumValue<global::IBKR.Api.Kiota.Models.TradesResponse_supports_tax_opt>(); } },
                { "symbol", n => { Symbol = n.GetStringValue(); } },
                { "trade_time", n => { TradeTime = n.GetStringValue(); } },
                { "trade_time_r", n => { TradeTimeR = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("account", Account);
            writer.WriteStringValue("account_allocation_name", AccountAllocationName);
            writer.WriteStringValue("accountCode", AccountCode);
            writer.WriteStringValue("clearing_id", ClearingId);
            writer.WriteStringValue("clearing_name", ClearingName);
            writer.WriteStringValue("commission", Commission);
            writer.WriteStringValue("company_name", CompanyName);
            writer.WriteStringValue("conid", Conid);
            writer.WriteStringValue("conidEx", ConidEx);
            writer.WriteStringValue("contract_description_1", ContractDescription1);
            writer.WriteStringValue("exchange", Exchange);
            writer.WriteStringValue("execution_id", ExecutionId);
            writer.WriteEnumValue<global::IBKR.Api.Kiota.Models.TradesResponse_is_event_trading>("is_event_trading", IsEventTrading);
            writer.WriteEnumValue<global::IBKR.Api.Kiota.Models.TradesResponse_liquidation_trade>("liquidation_trade", LiquidationTrade);
            writer.WriteStringValue("listing_exchange", ListingExchange);
            writer.WriteDoubleValue("net_amount", NetAmount);
            writer.WriteStringValue("order_description", OrderDescription);
            writer.WriteStringValue("order_ref", OrderRef);
            writer.WriteStringValue("price", Price);
            writer.WriteEnumValue<global::IBKR.Api.Kiota.Models.TradesResponse_sec_type>("sec_type", SecType);
            writer.WriteEnumValue<global::IBKR.Api.Kiota.Models.TradesResponse_side>("side", Side);
            writer.WriteDoubleValue("size", Size);
            writer.WriteStringValue("submitter", Submitter);
            writer.WriteEnumValue<global::IBKR.Api.Kiota.Models.TradesResponse_supports_tax_opt>("supports_tax_opt", SupportsTaxOpt);
            writer.WriteStringValue("symbol", Symbol);
            writer.WriteStringValue("trade_time", TradeTime);
            writer.WriteIntValue("trade_time_r", TradeTimeR);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
