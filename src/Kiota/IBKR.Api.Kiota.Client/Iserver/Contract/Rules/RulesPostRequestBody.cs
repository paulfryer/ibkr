// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace IBKR.Api.Kiota.Client.Iserver.Contract.Rules
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class RulesPostRequestBody : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Contract identifier for the interested contract.</summary>
        public int? Conid { get; set; }
        /// <summary>Side of the market rules apply too. Set to true for Buy Orders, set to false for Sell orders.</summary>
        public bool? IsBuy { get; set; }
        /// <summary>Used to find trading rules related to an existing order.</summary>
        public bool? ModifyOrder { get; set; }
        /// <summary>Specify the order identifier used for tracking a given order.</summary>
        public int? OrderId { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::IBKR.Api.Kiota.Client.Iserver.Contract.Rules.RulesPostRequestBody"/> and sets the default values.
        /// </summary>
        public RulesPostRequestBody()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::IBKR.Api.Kiota.Client.Iserver.Contract.Rules.RulesPostRequestBody"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::IBKR.Api.Kiota.Client.Iserver.Contract.Rules.RulesPostRequestBody CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::IBKR.Api.Kiota.Client.Iserver.Contract.Rules.RulesPostRequestBody();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "conid", n => { Conid = n.GetIntValue(); } },
                { "isBuy", n => { IsBuy = n.GetBoolValue(); } },
                { "modifyOrder", n => { ModifyOrder = n.GetBoolValue(); } },
                { "orderId", n => { OrderId = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("conid", Conid);
            writer.WriteBoolValue("isBuy", IsBuy);
            writer.WriteBoolValue("modifyOrder", ModifyOrder);
            writer.WriteIntValue("orderId", OrderId);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
