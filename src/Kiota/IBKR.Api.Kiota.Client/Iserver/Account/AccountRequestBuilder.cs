// <auto-generated/>
#pragma warning disable CS0618
using IBKR.Api.Kiota.Client.Iserver.Account.Alert;
using IBKR.Api.Kiota.Client.Iserver.Account.Allocation;
using IBKR.Api.Kiota.Client.Iserver.Account.Item;
using IBKR.Api.Kiota.Client.Iserver.Account.Mta;
using IBKR.Api.Kiota.Client.Iserver.Account.Order;
using IBKR.Api.Kiota.Client.Iserver.Account.Orders;
using IBKR.Api.Kiota.Client.Iserver.Account.Pnl;
using IBKR.Api.Kiota.Client.Iserver.Account.Search;
using IBKR.Api.Kiota.Client.Iserver.Account.Trades;
using IBKR.Api.Kiota.Contract.Models;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace IBKR.Api.Kiota.Client.Iserver.Account
{
    /// <summary>
    /// Builds and executes requests for operations under \iserver\account
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class AccountRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The alert property</summary>
        public global::IBKR.Api.Kiota.Client.Iserver.Account.Alert.AlertRequestBuilder Alert
        {
            get => new global::IBKR.Api.Kiota.Client.Iserver.Account.Alert.AlertRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The allocation property</summary>
        public global::IBKR.Api.Kiota.Client.Iserver.Account.Allocation.AllocationRequestBuilder Allocation
        {
            get => new global::IBKR.Api.Kiota.Client.Iserver.Account.Allocation.AllocationRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The mta property</summary>
        public global::IBKR.Api.Kiota.Client.Iserver.Account.Mta.MtaRequestBuilder Mta
        {
            get => new global::IBKR.Api.Kiota.Client.Iserver.Account.Mta.MtaRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The order property</summary>
        public global::IBKR.Api.Kiota.Client.Iserver.Account.Order.OrderRequestBuilder Order
        {
            get => new global::IBKR.Api.Kiota.Client.Iserver.Account.Order.OrderRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The orders property</summary>
        public global::IBKR.Api.Kiota.Client.Iserver.Account.Orders.OrdersRequestBuilder Orders
        {
            get => new global::IBKR.Api.Kiota.Client.Iserver.Account.Orders.OrdersRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The pnl property</summary>
        public global::IBKR.Api.Kiota.Client.Iserver.Account.Pnl.PnlRequestBuilder Pnl
        {
            get => new global::IBKR.Api.Kiota.Client.Iserver.Account.Pnl.PnlRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The search property</summary>
        public global::IBKR.Api.Kiota.Client.Iserver.Account.Search.SearchRequestBuilder Search
        {
            get => new global::IBKR.Api.Kiota.Client.Iserver.Account.Search.SearchRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The trades property</summary>
        public global::IBKR.Api.Kiota.Client.Iserver.Account.Trades.TradesRequestBuilder Trades
        {
            get => new global::IBKR.Api.Kiota.Client.Iserver.Account.Trades.TradesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Gets an item from the IBKR.Api.Kiota.iserver.account.item collection</summary>
        /// <param name="position">Unique identifier of the item</param>
        /// <returns>A <see cref="global::IBKR.Api.Kiota.Client.Iserver.Account.Item.WithAccountItemRequestBuilder"/></returns>
        public global::IBKR.Api.Kiota.Client.Iserver.Account.Item.WithAccountItemRequestBuilder this[string position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("accountId", position);
                return new global::IBKR.Api.Kiota.Client.Iserver.Account.Item.WithAccountItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::IBKR.Api.Kiota.Client.Iserver.Account.AccountRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public AccountRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/iserver/account", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::IBKR.Api.Kiota.Client.Iserver.Account.AccountRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public AccountRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/iserver/account", rawUrl)
        {
        }
        /// <summary>
        /// Switch the active account for how you request data. Only available for financial advisors and multi-account structures.
        /// </summary>
        /// <returns>A <see cref="global::IBKR.Api.Kiota.Contract.Models.SetAccountResponse"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::IBKR.Api.Kiota.Contract.Models.ErrorOnlyResponse">When receiving a 500 status code</exception>
        /// <exception cref="global::IBKR.Api.Kiota.Contract.Models.ErrorResponse">When receiving a 503 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::IBKR.Api.Kiota.Contract.Models.SetAccountResponse?> PostAsync(global::IBKR.Api.Kiota.Client.Iserver.Account.AccountPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::IBKR.Api.Kiota.Contract.Models.SetAccountResponse> PostAsync(global::IBKR.Api.Kiota.Client.Iserver.Account.AccountPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "500", global::IBKR.Api.Kiota.Contract.Models.ErrorOnlyResponse.CreateFromDiscriminatorValue },
                { "503", global::IBKR.Api.Kiota.Contract.Models.ErrorResponse.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::IBKR.Api.Kiota.Contract.Models.SetAccountResponse>(requestInfo, global::IBKR.Api.Kiota.Contract.Models.SetAccountResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Switch the active account for how you request data. Only available for financial advisors and multi-account structures.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::IBKR.Api.Kiota.Client.Iserver.Account.AccountPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::IBKR.Api.Kiota.Client.Iserver.Account.AccountPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::IBKR.Api.Kiota.Client.Iserver.Account.AccountRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::IBKR.Api.Kiota.Client.Iserver.Account.AccountRequestBuilder WithUrl(string rawUrl)
        {
            return new global::IBKR.Api.Kiota.Client.Iserver.Account.AccountRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class AccountRequestBuilderPostRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618
