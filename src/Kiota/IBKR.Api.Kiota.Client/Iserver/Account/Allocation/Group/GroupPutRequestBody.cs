// <auto-generated/>
#pragma warning disable CS0618
using IBKR.Api.Kiota.Contract.Models;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace IBKR.Api.Kiota.Client.Iserver.Account.Allocation.Group
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class GroupPutRequestBody : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>An array of accounts that should be held in the allocation group and, if using a User-specified allocaiton method, the value correlated to the allocation.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public UntypedNode? Accounts { get; set; }
#nullable restore
#else
        public UntypedNode Accounts { get; set; }
#endif
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Interactive Brokers supports two forms of allocation methods. Allocation methods that have calculations completed by Interactive Brokers, and a set of allocation methods calculated by the user and then specified. IB-computed allocation methods:  * `A` - Available Equity  * `E` - Equal  * `N` - Net Liquidation ValueUser-specified allocation methods:  * `C` - Cash Quantity  * `P` - Percentage  * `R` - Ratios  * `S` - Shares</summary>
        public global::IBKR.Api.Kiota.Contract.Models.AllocationMethod? DefaultMethod { get; set; }
        /// <summary>Name used to refer to your allocation group. If prev_name is specified, this will become the new name of the group.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>Can be used to rename a group. Using this field will recognize the previous name, while the &quot;name&quot; filed will mark the updated name.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PrevName { get; set; }
#nullable restore
#else
        public string PrevName { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::IBKR.Api.Kiota.Client.Iserver.Account.Allocation.Group.GroupPutRequestBody"/> and sets the default values.
        /// </summary>
        public GroupPutRequestBody()
        {
            AdditionalData = new Dictionary<string, object>();
            DefaultMethod = global::IBKR.Api.Kiota.Contract.Models.AllocationMethod.N;
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::IBKR.Api.Kiota.Client.Iserver.Account.Allocation.Group.GroupPutRequestBody"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::IBKR.Api.Kiota.Client.Iserver.Account.Allocation.Group.GroupPutRequestBody CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::IBKR.Api.Kiota.Client.Iserver.Account.Allocation.Group.GroupPutRequestBody();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "accounts", n => { Accounts = n.GetObjectValue<UntypedNode>(UntypedNode.CreateFromDiscriminatorValue); } },
                { "default_method", n => { DefaultMethod = n.GetEnumValue<global::IBKR.Api.Kiota.Contract.Models.AllocationMethod>(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "prev_name", n => { PrevName = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<UntypedNode>("accounts", Accounts);
            writer.WriteEnumValue<global::IBKR.Api.Kiota.Contract.Models.AllocationMethod>("default_method", DefaultMethod);
            writer.WriteStringValue("name", Name);
            writer.WriteStringValue("prev_name", PrevName);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
