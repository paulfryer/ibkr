// <auto-generated/>
#pragma warning disable CS0618
using IBKR.Api.Kiota.Client.Fyi;
using IBKR.Api.Kiota.Client.Gw;
using IBKR.Api.Kiota.Client.Hmds;
using IBKR.Api.Kiota.Client.Iserver;
using IBKR.Api.Kiota.Client.Logout;
using IBKR.Api.Kiota.Client.Oauth2;
using IBKR.Api.Kiota.Client.Pa;
using IBKR.Api.Kiota.Client.Portfolio;
using IBKR.Api.Kiota.Client.Sso;
using IBKR.Api.Kiota.Client.Tickle;
using IBKR.Api.Kiota.Client.V1;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions;
using Microsoft.Kiota.Serialization.Form;
using Microsoft.Kiota.Serialization.Json;
using Microsoft.Kiota.Serialization.Multipart;
using Microsoft.Kiota.Serialization.Text;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System;
namespace IBKR.Api.Kiota.Client
{
    /// <summary>
    /// The main entry point of the SDK, exposes the configuration and the fluent API.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class IBKRClient : BaseRequestBuilder
    {
        /// <summary>The fyi property</summary>
        public global::IBKR.Api.Kiota.Client.Fyi.FyiRequestBuilder Fyi
        {
            get => new global::IBKR.Api.Kiota.Client.Fyi.FyiRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The gw property</summary>
        public global::IBKR.Api.Kiota.Client.Gw.GwRequestBuilder Gw
        {
            get => new global::IBKR.Api.Kiota.Client.Gw.GwRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The hmds property</summary>
        public global::IBKR.Api.Kiota.Client.Hmds.HmdsRequestBuilder Hmds
        {
            get => new global::IBKR.Api.Kiota.Client.Hmds.HmdsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The iserver property</summary>
        public global::IBKR.Api.Kiota.Client.Iserver.IserverRequestBuilder Iserver
        {
            get => new global::IBKR.Api.Kiota.Client.Iserver.IserverRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The logout property</summary>
        public global::IBKR.Api.Kiota.Client.Logout.LogoutRequestBuilder Logout
        {
            get => new global::IBKR.Api.Kiota.Client.Logout.LogoutRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The oauth2 property</summary>
        public global::IBKR.Api.Kiota.Client.Oauth2.Oauth2RequestBuilder Oauth2
        {
            get => new global::IBKR.Api.Kiota.Client.Oauth2.Oauth2RequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The pa property</summary>
        public global::IBKR.Api.Kiota.Client.Pa.PaRequestBuilder Pa
        {
            get => new global::IBKR.Api.Kiota.Client.Pa.PaRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The portfolio property</summary>
        public global::IBKR.Api.Kiota.Client.Portfolio.PortfolioRequestBuilder Portfolio
        {
            get => new global::IBKR.Api.Kiota.Client.Portfolio.PortfolioRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The sso property</summary>
        public global::IBKR.Api.Kiota.Client.Sso.SsoRequestBuilder Sso
        {
            get => new global::IBKR.Api.Kiota.Client.Sso.SsoRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The tickle property</summary>
        public global::IBKR.Api.Kiota.Client.Tickle.TickleRequestBuilder Tickle
        {
            get => new global::IBKR.Api.Kiota.Client.Tickle.TickleRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The v1 property</summary>
        public global::IBKR.Api.Kiota.Client.V1.V1RequestBuilder V1
        {
            get => new global::IBKR.Api.Kiota.Client.V1.V1RequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new <see cref="global::IBKR.Api.Kiota.Client.IBKRClient"/> and sets the default values.
        /// </summary>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public IBKRClient(IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}", new Dictionary<string, object>())
        {
            ApiClientBuilder.RegisterDefaultSerializer<JsonSerializationWriterFactory>();
            ApiClientBuilder.RegisterDefaultSerializer<TextSerializationWriterFactory>();
            ApiClientBuilder.RegisterDefaultSerializer<FormSerializationWriterFactory>();
            ApiClientBuilder.RegisterDefaultSerializer<MultipartSerializationWriterFactory>();
            ApiClientBuilder.RegisterDefaultDeserializer<JsonParseNodeFactory>();
            ApiClientBuilder.RegisterDefaultDeserializer<TextParseNodeFactory>();
            ApiClientBuilder.RegisterDefaultDeserializer<FormParseNodeFactory>();
            if (string.IsNullOrEmpty(RequestAdapter.BaseUrl))
            {
                RequestAdapter.BaseUrl = "https://api.ibkr.com";
            }
            PathParameters.TryAdd("baseurl", RequestAdapter.BaseUrl);
        }
    }
}
#pragma warning restore CS0618
