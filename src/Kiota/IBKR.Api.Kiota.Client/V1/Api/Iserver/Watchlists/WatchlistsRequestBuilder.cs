// <auto-generated/>
#pragma warning disable CS0618
using IBKR.Api.Kiota.Contract.Models;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace IBKR.Api.Kiota.Client.V1.Api.Iserver.Watchlists
{
    /// <summary>
    /// Builds and executes requests for operations under \v1\api\iserver\watchlists
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class WatchlistsRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::IBKR.Api.Kiota.Client.V1.Api.Iserver.Watchlists.WatchlistsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WatchlistsRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/v1/api/iserver/watchlists{?SC}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::IBKR.Api.Kiota.Client.V1.Api.Iserver.Watchlists.WatchlistsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WatchlistsRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/v1/api/iserver/watchlists{?SC}", rawUrl)
        {
        }
        /// <summary>
        /// Retrieve all saved watchlists stored on IB backend for the username in use in the current Web API session.
        /// </summary>
        /// <returns>A <see cref="global::IBKR.Api.Kiota.Contract.Models.WatchlistsResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::IBKR.Api.Kiota.Contract.Models.ErrorOnlyResponse">When receiving a 500 status code</exception>
        /// <exception cref="global::IBKR.Api.Kiota.Contract.Models.ErrorResponse">When receiving a 503 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::IBKR.Api.Kiota.Contract.Models.WatchlistsResponse?> GetAsync(Action<RequestConfiguration<global::IBKR.Api.Kiota.Client.V1.Api.Iserver.Watchlists.WatchlistsRequestBuilder.WatchlistsRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::IBKR.Api.Kiota.Contract.Models.WatchlistsResponse> GetAsync(Action<RequestConfiguration<global::IBKR.Api.Kiota.Client.V1.Api.Iserver.Watchlists.WatchlistsRequestBuilder.WatchlistsRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "500", global::IBKR.Api.Kiota.Contract.Models.ErrorOnlyResponse.CreateFromDiscriminatorValue },
                { "503", global::IBKR.Api.Kiota.Contract.Models.ErrorResponse.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::IBKR.Api.Kiota.Contract.Models.WatchlistsResponse>(requestInfo, global::IBKR.Api.Kiota.Contract.Models.WatchlistsResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Retrieve all saved watchlists stored on IB backend for the username in use in the current Web API session.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::IBKR.Api.Kiota.Client.V1.Api.Iserver.Watchlists.WatchlistsRequestBuilder.WatchlistsRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::IBKR.Api.Kiota.Client.V1.Api.Iserver.Watchlists.WatchlistsRequestBuilder.WatchlistsRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::IBKR.Api.Kiota.Client.V1.Api.Iserver.Watchlists.WatchlistsRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::IBKR.Api.Kiota.Client.V1.Api.Iserver.Watchlists.WatchlistsRequestBuilder WithUrl(string rawUrl)
        {
            return new global::IBKR.Api.Kiota.Client.V1.Api.Iserver.Watchlists.WatchlistsRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Retrieve all saved watchlists stored on IB backend for the username in use in the current Web API session.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WatchlistsRequestBuilderGetQueryParameters 
        {
            /// <summary>Can only be used with value USER_WATCHLIST, which returns only user-created watchlists and excludes those created by IB.</summary>
            [Obsolete("This property is deprecated, use SCAsGetSCQueryParameterType instead")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public string? SC { get; set; }
#nullable restore
#else
            public string SC { get; set; }
#endif
            /// <summary>Can only be used with value USER_WATCHLIST, which returns only user-created watchlists and excludes those created by IB.</summary>
            [QueryParameter("SC")]
            public global::IBKR.Api.Kiota.Client.V1.Api.Iserver.Watchlists.GetSCQueryParameterType? SCAsGetSCQueryParameterType { get; set; }
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WatchlistsRequestBuilderGetRequestConfiguration : RequestConfiguration<global::IBKR.Api.Kiota.Client.V1.Api.Iserver.Watchlists.WatchlistsRequestBuilder.WatchlistsRequestBuilderGetQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618
