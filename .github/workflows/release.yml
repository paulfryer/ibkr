name: Build and Release SDK Packages

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (semver: 1.0.0 or 1.0.0-beta.1)'
        required: true
        type: string
      create_github_release:
        description: 'Create GitHub Release with packages'
        required: false
        type: boolean
        default: true
      publish_to_nuget:
        description: 'Publish packages to NuGet.org'
        required: false
        type: boolean
        default: true
      prerelease:
        description: 'Mark as pre-release (auto-detected from version if contains -beta, -alpha, -rc)'
        required: false
        type: boolean
        default: false

permissions:
  contents: write      # Required for creating releases
  packages: write      # Required for publishing packages
  id-token: write      # Required for NuGet Trusted Publishing (OIDC)
  attestations: write  # Required for build provenance attestations

env:
  DOTNET_VERSION: '8.0.x'
  CONFIGURATION: Release
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

jobs:
  #━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  # JOB 1: Validate Input
  #━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  validate:
    name: 🔍 Validate Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.validate.outputs.version }}
      version_tag: ${{ steps.validate.outputs.version_tag }}

    steps:
      - name: Validate semver format
        id: validate
        run: |
          VERSION="${{ inputs.version }}"

          # Validate semver format (major.minor.patch with optional prerelease and build metadata)
          if [[ ! "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?(\+[a-zA-Z0-9.-]+)?$ ]]; then
            echo "::error::❌ Invalid version format: $VERSION"
            echo "::error::Must follow semver (e.g., 1.0.0, 1.0.0-beta.1, 1.0.0+build.123)"
            exit 1
          fi

          echo "✅ Version $VERSION is valid semver"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "version_tag=v$VERSION" >> $GITHUB_OUTPUT

  #━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  # JOB 2: Generate SDKs
  #━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  generate-sdks:
    name: 🔧 Generate SDKs
    needs: validate
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🔨 Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: 📦 Install Kiota CLI
        run: dotnet tool install -g Microsoft.OpenApi.Kiota

      - name: 🔄 Restore generator dependencies
        working-directory: src/IBKR.Api.Generator
        run: dotnet restore

      - name: 🏗️ Build generator
        working-directory: src/IBKR.Api.Generator
        run: dotnet build --configuration ${{ env.CONFIGURATION }} --no-restore

      - name: ⚙️ Generate both SDKs (NSwag + Kiota)
        working-directory: src/IBKR.Api.Generator
        run: |
          echo "Generating both NSwag and Kiota SDKs..."
          echo "0" | dotnet run --configuration ${{ env.CONFIGURATION }} --no-build
          echo "✅ SDK generation complete"

      - name: ✅ Verify generated projects
        run: |
          echo "🔍 Verifying all expected projects were generated..."

          EXPECTED_PROJECTS=(
            "src/NSwag/IBKR.Api.NSwag.Contract/IBKR.Api.NSwag.Contract.csproj"
            "src/NSwag/IBKR.Api.NSwag.Client/IBKR.Api.NSwag.Client.csproj"
            "src/Kiota/IBKR.Api.Kiota.Contract/IBKR.Api.Kiota.Contract.csproj"
            "src/Kiota/IBKR.Api.Kiota.Client/IBKR.Api.Kiota.Client.csproj"
          )

          ALL_FOUND=true
          for proj in "${EXPECTED_PROJECTS[@]}"; do
            if [ ! -f "$proj" ]; then
              echo "::error::❌ Missing expected project: $proj"
              ALL_FOUND=false
            else
              echo "  ✅ $proj"
            fi
          done

          if [ "$ALL_FOUND" = false ]; then
            exit 1
          fi

          echo "✅ All expected projects found"

      - name: 📤 Upload generated SDKs
        uses: actions/upload-artifact@v4
        with:
          name: generated-sdks
          path: |
            src/NSwag/
            src/Kiota/
            src/Directory.Build.props
          retention-days: 1
          if-no-files-found: error

  #━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  # JOB 3: Build and Package Core Authentication Library
  #━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  build-auth:
    name: 📦 Build Core Authentication
    needs: [validate]
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🔨 Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: 💾 Cache NuGet packages
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: 🔄 Restore dependencies
        run: dotnet restore src/IBKR.Api.Authentication/IBKR.Api.Authentication.csproj

      - name: 🏗️ Build Core Authentication
        run: |
          dotnet build src/IBKR.Api.Authentication/IBKR.Api.Authentication.csproj \
            --configuration ${{ env.CONFIGURATION }} \
            --no-restore \
            /p:Version=${{ needs.validate.outputs.version }}

      - name: 📦 Pack NuGet package
        run: |
          mkdir -p packages/Auth

          echo "📦 Packing IBKR.Api.Authentication..."
          dotnet pack src/IBKR.Api.Authentication/IBKR.Api.Authentication.csproj \
            --configuration ${{ env.CONFIGURATION }} \
            --no-build \
            --output packages/Auth \
            /p:PackageVersion=${{ needs.validate.outputs.version }}

      - name: 📋 List generated packages
        working-directory: packages/Auth
        run: |
          echo "📦 Core Authentication package created:"
          ls -lh *.nupkg

      - name: 🔏 Generate build attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-path: 'packages/Auth/*.nupkg'

      - name: 📤 Upload Authentication package
        uses: actions/upload-artifact@v4
        with:
          name: Authentication-SDK-v${{ needs.validate.outputs.version }}
          path: packages/Auth/*.nupkg
          retention-days: 90
          if-no-files-found: error

  #━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  # JOB 4: Build and Package NSwag SDK (Parallel)
  #━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  build-nswag:
    name: 📦 Build NSwag SDK
    needs: [validate, generate-sdks, build-auth]
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 📥 Download generated SDKs
        uses: actions/download-artifact@v4
        with:
          name: generated-sdks
          path: src/

      - name: 🔨 Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: 💾 Cache NuGet packages
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: 🔄 Restore NSwag dependencies
        working-directory: src/NSwag
        run: |
          dotnet restore IBKR.Api.NSwag.Contract/IBKR.Api.NSwag.Contract.csproj
          dotnet restore IBKR.Api.NSwag.Client/IBKR.Api.NSwag.Client.csproj
          dotnet restore IBKR.Api.NSwag.Authentication/IBKR.Api.NSwag.Authentication.csproj

      - name: 🏗️ Build NSwag Contract
        working-directory: src/NSwag
        run: |
          dotnet build IBKR.Api.NSwag.Contract/IBKR.Api.NSwag.Contract.csproj \
            --configuration ${{ env.CONFIGURATION }} \
            --no-restore \
            /p:Version=${{ needs.validate.outputs.version }}

      - name: 🏗️ Build NSwag Client
        working-directory: src/NSwag
        run: |
          dotnet build IBKR.Api.NSwag.Client/IBKR.Api.NSwag.Client.csproj \
            --configuration ${{ env.CONFIGURATION }} \
            --no-restore \
            /p:Version=${{ needs.validate.outputs.version }}

      - name: 🏗️ Build NSwag Authentication
        working-directory: src/NSwag
        run: |
          dotnet build IBKR.Api.NSwag.Authentication/IBKR.Api.NSwag.Authentication.csproj \
            --configuration ${{ env.CONFIGURATION }} \
            --no-restore \
            /p:Version=${{ needs.validate.outputs.version }}

      - name: 📦 Pack NuGet packages
        working-directory: src/NSwag
        run: |
          mkdir -p ../../packages/NSwag

          echo "📦 Packing NSwag.Contract..."
          dotnet pack IBKR.Api.NSwag.Contract/IBKR.Api.NSwag.Contract.csproj \
            --configuration ${{ env.CONFIGURATION }} \
            --no-build \
            --output ../../packages/NSwag \
            /p:PackageVersion=${{ needs.validate.outputs.version }}

          echo "📦 Packing NSwag.Client..."
          dotnet pack IBKR.Api.NSwag.Client/IBKR.Api.NSwag.Client.csproj \
            --configuration ${{ env.CONFIGURATION }} \
            --no-build \
            --output ../../packages/NSwag \
            /p:PackageVersion=${{ needs.validate.outputs.version }}

          echo "📦 Packing NSwag.Authentication..."
          dotnet pack IBKR.Api.NSwag.Authentication/IBKR.Api.NSwag.Authentication.csproj \
            --configuration ${{ env.CONFIGURATION }} \
            --no-build \
            --output ../../packages/NSwag \
            /p:PackageVersion=${{ needs.validate.outputs.version }}

      - name: 📋 List generated packages
        working-directory: packages/NSwag
        run: |
          echo "📦 NSwag packages created:"
          ls -lh *.nupkg

      - name: 🔏 Generate build attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-path: 'packages/NSwag/*.nupkg'

      - name: 📤 Upload NSwag packages
        uses: actions/upload-artifact@v4
        with:
          name: NSwag-SDK-v${{ needs.validate.outputs.version }}
          path: packages/NSwag/*.nupkg
          retention-days: 90
          if-no-files-found: error

  #━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  # JOB 5: Build and Package Kiota SDK (Parallel)
  #━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  build-kiota:
    name: 📦 Build Kiota SDK
    needs: [validate, generate-sdks, build-auth]
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 📥 Download generated SDKs
        uses: actions/download-artifact@v4
        with:
          name: generated-sdks
          path: src/

      - name: 🔨 Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: 💾 Cache NuGet packages
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: 🔄 Restore Kiota dependencies
        working-directory: src/Kiota
        run: |
          dotnet restore IBKR.Api.Kiota.Contract/IBKR.Api.Kiota.Contract.csproj
          dotnet restore IBKR.Api.Kiota.Client/IBKR.Api.Kiota.Client.csproj
          dotnet restore IBKR.Api.Kiota.Authentication/IBKR.Api.Kiota.Authentication.csproj

      - name: 🏗️ Build Kiota Contract
        working-directory: src/Kiota
        run: |
          dotnet build IBKR.Api.Kiota.Contract/IBKR.Api.Kiota.Contract.csproj \
            --configuration ${{ env.CONFIGURATION }} \
            --no-restore \
            /p:Version=${{ needs.validate.outputs.version }}

      - name: 🏗️ Build Kiota Client
        working-directory: src/Kiota
        run: |
          dotnet build IBKR.Api.Kiota.Client/IBKR.Api.Kiota.Client.csproj \
            --configuration ${{ env.CONFIGURATION }} \
            --no-restore \
            /p:Version=${{ needs.validate.outputs.version }}

      - name: 🏗️ Build Kiota Authentication
        working-directory: src/Kiota
        run: |
          dotnet build IBKR.Api.Kiota.Authentication/IBKR.Api.Kiota.Authentication.csproj \
            --configuration ${{ env.CONFIGURATION }} \
            --no-restore \
            /p:Version=${{ needs.validate.outputs.version }}

      - name: 📦 Pack NuGet packages
        working-directory: src/Kiota
        run: |
          mkdir -p ../../packages/Kiota

          echo "📦 Packing Kiota.Contract..."
          dotnet pack IBKR.Api.Kiota.Contract/IBKR.Api.Kiota.Contract.csproj \
            --configuration ${{ env.CONFIGURATION }} \
            --no-build \
            --output ../../packages/Kiota \
            /p:PackageVersion=${{ needs.validate.outputs.version }}

          echo "📦 Packing Kiota.Client..."
          dotnet pack IBKR.Api.Kiota.Client/IBKR.Api.Kiota.Client.csproj \
            --configuration ${{ env.CONFIGURATION }} \
            --no-build \
            --output ../../packages/Kiota \
            /p:PackageVersion=${{ needs.validate.outputs.version }}

          echo "📦 Packing Kiota.Authentication..."
          dotnet pack IBKR.Api.Kiota.Authentication/IBKR.Api.Kiota.Authentication.csproj \
            --configuration ${{ env.CONFIGURATION }} \
            --no-build \
            --output ../../packages/Kiota \
            /p:PackageVersion=${{ needs.validate.outputs.version }}

      - name: 📋 List generated packages
        working-directory: packages/Kiota
        run: |
          echo "📦 Kiota packages created:"
          ls -lh *.nupkg

      - name: 🔏 Generate build attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-path: 'packages/Kiota/*.nupkg'

      - name: 📤 Upload Kiota packages
        uses: actions/upload-artifact@v4
        with:
          name: Kiota-SDK-v${{ needs.validate.outputs.version }}
          path: packages/Kiota/*.nupkg
          retention-days: 90
          if-no-files-found: error

  #━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  # JOB 6: Build and Package IBKR SDK (after NSwag completes)
  #━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  build-ibkr-sdk:
    name: 📦 Build IBKR SDK
    needs: [validate, generate-sdks, build-nswag]
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 📥 Download generated SDKs
        uses: actions/download-artifact@v4
        with:
          name: generated-sdks
          path: src/

      - name: 🔨 Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: 💾 Cache NuGet packages
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: 🔄 Restore dependencies
        run: |
          dotnet restore src/IBKR.Sdk.Contract/IBKR.Sdk.Contract.csproj
          dotnet restore src/IBKR.Sdk.Client/IBKR.Sdk.Client.csproj

      - name: 🏗️ Build IBKR SDK Contract
        run: |
          dotnet build src/IBKR.Sdk.Contract/IBKR.Sdk.Contract.csproj \
            --configuration ${{ env.CONFIGURATION }} \
            --no-restore \
            /p:Version=${{ needs.validate.outputs.version }}

      - name: 🏗️ Build IBKR SDK Client
        run: |
          dotnet build src/IBKR.Sdk.Client/IBKR.Sdk.Client.csproj \
            --configuration ${{ env.CONFIGURATION }} \
            --no-restore \
            /p:Version=${{ needs.validate.outputs.version }}

      - name: 📦 Pack NuGet packages
        run: |
          mkdir -p packages/SDK

          echo "📦 Packing IBKR.Sdk.Contract..."
          dotnet pack src/IBKR.Sdk.Contract/IBKR.Sdk.Contract.csproj \
            --configuration ${{ env.CONFIGURATION }} \
            --no-build \
            --output packages/SDK \
            /p:PackageVersion=${{ needs.validate.outputs.version }}

          echo "📦 Packing IBKR.Sdk.Client..."
          dotnet pack src/IBKR.Sdk.Client/IBKR.Sdk.Client.csproj \
            --configuration ${{ env.CONFIGURATION }} \
            --no-build \
            --output packages/SDK \
            /p:PackageVersion=${{ needs.validate.outputs.version }}

      - name: 📋 List generated packages
        working-directory: packages/SDK
        run: |
          echo "📦 IBKR SDK packages created:"
          ls -lh *.nupkg

      - name: 🔏 Generate build attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-path: 'packages/SDK/*.nupkg'

      - name: 📤 Upload IBKR SDK packages
        uses: actions/upload-artifact@v4
        with:
          name: IBKR-SDK-v${{ needs.validate.outputs.version }}
          path: packages/SDK/*.nupkg
          retention-days: 90
          if-no-files-found: error

  #━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  # JOB 7: Test NSwag SDK (Parallel)
  #━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  test-nswag:
    name: ✅ Test NSwag SDK
    needs: [validate, build-nswag]
    runs-on: ubuntu-latest
    env:
      IBKR_USE_MOCKS: true

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 📥 Download generated SDKs
        uses: actions/download-artifact@v4
        with:
          name: generated-sdks
          path: src/

      - name: 🔨 Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: 🧪 Run NSwag tests (with mocks)
        working-directory: src/NSwag
        run: |
          if [ -d "IBKR.Api.NSwag.Tests" ]; then
            echo "🧪 Running NSwag tests..."
            dotnet test IBKR.Api.NSwag.Tests/IBKR.Api.NSwag.Tests.csproj \
              --configuration ${{ env.CONFIGURATION }} \
              --logger "trx;LogFileName=test-results.trx" \
              --logger "console;verbosity=detailed"
            echo "✅ NSwag tests passed"
          else
            echo "ℹ️  No test project found (may not exist yet)"
          fi

      - name: 📤 Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: nswag-test-results
          path: src/NSwag/IBKR.Api.NSwag.Tests/TestResults/*.trx
          retention-days: 30
          if-no-files-found: ignore

  #━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  # JOB 8: Test Kiota SDK (Parallel)
  #━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  test-kiota:
    name: ✅ Test Kiota SDK
    needs: [validate, build-kiota]
    runs-on: ubuntu-latest
    env:
      IBKR_USE_MOCKS: true

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 📥 Download generated SDKs
        uses: actions/download-artifact@v4
        with:
          name: generated-sdks
          path: src/

      - name: 🔨 Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: 🧪 Run Kiota tests (with mocks)
        working-directory: src/Kiota
        run: |
          if [ -d "IBKR.Api.Kiota.Tests" ]; then
            echo "🧪 Running Kiota tests..."
            dotnet test IBKR.Api.Kiota.Tests/IBKR.Api.Kiota.Tests.csproj \
              --configuration ${{ env.CONFIGURATION }} \
              --logger "trx;LogFileName=test-results.trx" \
              --logger "console;verbosity=detailed"
            echo "✅ Kiota tests passed"
          else
            echo "ℹ️  No test project found (may not exist yet)"
          fi

      - name: 📤 Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: kiota-test-results
          path: src/Kiota/IBKR.Api.Kiota.Tests/TestResults/*.trx
          retention-days: 30
          if-no-files-found: ignore

  #━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  # JOB 9: Test IBKR SDK (Parallel)
  #━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  test-ibkr-sdk:
    name: ✅ Test IBKR SDK
    needs: [validate, build-ibkr-sdk]
    runs-on: ubuntu-latest
    env:
      IBKR_USE_MOCKS: true

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 📥 Download generated SDKs
        uses: actions/download-artifact@v4
        with:
          name: generated-sdks
          path: src/

      - name: 🔨 Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: 🧪 Run IBKR SDK tests (with mocks)
        run: |
          echo "🧪 Running IBKR SDK tests with mocks..."
          echo "   IBKR_USE_MOCKS = $IBKR_USE_MOCKS"

          dotnet test src/IBKR.Sdk.Tests/IBKR.Sdk.Tests.csproj \
            --configuration ${{ env.CONFIGURATION }} \
            --logger "trx;LogFileName=test-results.trx" \
            --logger "console;verbosity=detailed"

          echo "✅ IBKR SDK tests passed"

      - name: 📤 Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ibkr-sdk-test-results
          path: src/IBKR.Sdk.Tests/TestResults/*.trx
          retention-days: 30
          if-no-files-found: ignore

  #━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  # JOB 10: Create Release Summary
  #━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  create-summary:
    name: 📊 Create Release Summary
    needs: [validate, build-nswag, build-kiota, build-ibkr-sdk, test-nswag, test-kiota, test-ibkr-sdk]
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Download all SDK packages
        uses: actions/download-artifact@v4
        with:
          pattern: '*-SDK-v*'
          path: all-packages

      - name: 📊 Generate summary
        run: |
          echo "# 🎉 IBKR SDK Release v${{ needs.validate.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Successfully built and packaged both NSwag and Kiota SDKs." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "## 📦 Generated Packages" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          for sdk_dir in all-packages/*/; do
            sdk_name=$(basename "$sdk_dir")
            echo "### ${sdk_name}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "| Package | Size | Symbols |" >> $GITHUB_STEP_SUMMARY
            echo "|---------|------|---------|" >> $GITHUB_STEP_SUMMARY

            for pkg in "$sdk_dir"*.nupkg; do
              if [ -f "$pkg" ]; then
                name=$(basename "$pkg")
                size=$(du -h "$pkg" | cut -f1)

                # Check if symbols package exists
                snupkg="${pkg%.nupkg}.snupkg"
                if [ -f "$snupkg" ]; then
                  symbols_size=$(du -h "$snupkg" | cut -f1)
                  symbols="✅ ($symbols_size)"
                else
                  symbols="➖"
                fi

                echo "| \`$name\` | $size | $symbols |" >> $GITHUB_STEP_SUMMARY
              fi
            done
            echo "" >> $GITHUB_STEP_SUMMARY
          done

          echo "## 🚀 Installation" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ⭐ IBKR SDK (Recommended)" >> $GITHUB_STEP_SUMMARY
          echo "Strongly-typed, production-ready abstraction with comprehensive error handling:" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "dotnet add package IBKR.Sdk.Contract --version ${{ needs.validate.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "dotnet add package IBKR.Sdk.Client --version ${{ needs.validate.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "dotnet add package IBKR.Sdk.Authentication --version ${{ needs.validate.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### NSwag SDK (Lower-level)" >> $GITHUB_STEP_SUMMARY
          echo "Service-oriented architecture with direct API access:" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "dotnet add package IBKR.Api.NSwag.Contract --version ${{ needs.validate.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "dotnet add package IBKR.Api.NSwag.Client --version ${{ needs.validate.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Kiota SDK (Lower-level)" >> $GITHUB_STEP_SUMMARY
          echo "Fluent API architecture with request builders:" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "dotnet add package IBKR.Api.Kiota.Contract --version ${{ needs.validate.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "dotnet add package IBKR.Api.Kiota.Client --version ${{ needs.validate.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "## 📥 Download Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "1. Navigate to the **Actions** tab" >> $GITHUB_STEP_SUMMARY
          echo "2. Click on this workflow run" >> $GITHUB_STEP_SUMMARY
          echo "3. Scroll to the **Artifacts** section" >> $GITHUB_STEP_SUMMARY
          echo "4. Download the SDK packages (90-day retention)" >> $GITHUB_STEP_SUMMARY

  #━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  # JOB 11: Create GitHub Release (Optional)
  #━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  create-release:
    name: 🚀 Create GitHub Release
    needs: [validate, build-nswag, build-kiota, build-ibkr-sdk]
    if: inputs.create_github_release
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 📥 Download all packages
        uses: actions/download-artifact@v4
        with:
          pattern: '*-SDK-v*'
          path: release-artifacts

      - name: 📦 Prepare release files
        run: |
          mkdir -p release-files
          find release-artifacts -name "*.nupkg" -exec cp {} release-files/ \;
          find release-artifacts -name "*.snupkg" -exec cp {} release-files/ \;

          echo "📦 Release files:"
          ls -lh release-files/

      - name: 🎯 Detect pre-release from version
        id: detect-prerelease
        run: |
          VERSION="${{ needs.validate.outputs.version }}"

          # Auto-detect pre-release from version string
          if [[ "$VERSION" =~ -(beta|alpha|rc|preview) ]]; then
            echo "✅ Auto-detected pre-release version (contains -beta, -alpha, -rc, or -preview)"
            IS_PRERELEASE=true
          else
            # Use manual checkbox input
            IS_PRERELEASE=${{ inputs.prerelease }}
            if [ "$IS_PRERELEASE" = "true" ]; then
              echo "✅ Manually marked as pre-release"
            else
              echo "✅ Stable release"
            fi
          fi

          echo "is_prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT

      - name: 🚀 Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.validate.outputs.version_tag }}
          name: IBKR API SDK ${{ needs.validate.outputs.version_tag }}
          draft: false
          prerelease: ${{ steps.detect-prerelease.outputs.is_prerelease }}
          generate_release_notes: true
          body: |
            # IBKR API SDK ${{ needs.validate.outputs.version_tag }}

            Auto-generated C# SDKs for the Interactive Brokers REST API with a clean, production-ready abstraction layer.

            ## 📦 Packages Included (9 total)

            ### ⭐ High-Level SDK (Recommended)
            - **IBKR.Sdk.Client** - Clean, AWS-like developer experience
            - **IBKR.Sdk.Contract** - Hand-crafted interfaces and models

            ### 🔐 Authentication
            - **IBKR.Api.Authentication** - Core OAuth2 + JWT authentication
            - **IBKR.Api.NSwag.Authentication** - NSwag authentication adapter
            - **IBKR.Api.Kiota.Authentication** - Kiota authentication adapter

            ### ⚙️ Generated Clients (Auto-Updated)
            - **IBKR.Api.NSwag.Client** - NSwag-generated HTTP client
            - **IBKR.Api.NSwag.Contract** - NSwag-generated models
            - **IBKR.Api.Kiota.Client** - Kiota-generated HTTP client
            - **IBKR.Api.Kiota.Contract** - Kiota-generated models

            ## 🚀 Installation

            ### Recommended: High-Level SDK
            ```bash
            dotnet add package IBKR.Sdk.Client --version ${{ needs.validate.outputs.version }}
            ```
            This automatically includes all dependencies (Authentication, NSwag client, etc.)

            ### Advanced: Direct API Access with NSwag
            ```bash
            dotnet add package IBKR.Api.NSwag.Client --version ${{ needs.validate.outputs.version }}
            dotnet add package IBKR.Api.NSwag.Authentication --version ${{ needs.validate.outputs.version }}
            ```

            ### Advanced: Direct API Access with Kiota
            ```bash
            dotnet add package IBKR.Api.Kiota.Client --version ${{ needs.validate.outputs.version }}
            dotnet add package IBKR.Api.Kiota.Authentication --version ${{ needs.validate.outputs.version }}
            ```

            ## 📖 Documentation

            See the [repository README](https://github.com/paulfryer/ibkr) for usage examples and API documentation.

            ## ✨ What's New in IBKR SDK

            - **Strongly-typed models** - DateTime, enums, decimals (no magic strings!)
            - **Comprehensive error handling** - Detailed error messages with full context
            - **Built-in workarounds** - Handles API quirks automatically
            - **Production-ready** - Battle-tested with comprehensive test suite
            - **Excellent DX** - Intuitive API surface

            ## ✅ Features

            - Clean, typed interfaces (no raw JSON or confusing generated code)
            - AWS SDK-like developer experience
            - Automatic authentication, token refresh, and session management
            - Built-in dependency injection support
            - Comprehensive test coverage
          files: |
            release-files/*.nupkg
            release-files/*.snupkg

  #━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  # JOB 12: Publish to NuGet.org (Optional)
  #━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  publish-nuget:
    name: 📤 Publish to NuGet.org
    needs: [validate, build-auth, build-nswag, build-kiota, build-ibkr-sdk, test-nswag, test-kiota, test-ibkr-sdk]
    if: inputs.publish_to_nuget  # Publish to NuGet when checkbox is selected
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Download all packages
        uses: actions/download-artifact@v4
        with:
          pattern: '*-SDK-v*'
          path: packages-to-publish

      - name: 📦 Consolidate packages
        run: |
          mkdir -p nuget-packages
          find packages-to-publish -name "*.nupkg" -exec cp {} nuget-packages/ \;
          find packages-to-publish -name "*.snupkg" -exec cp {} nuget-packages/ \;

          echo "📦 Packages to publish:"
          ls -lh nuget-packages/

      - name: 🔑 NuGet login (OIDC → temp API key)
        uses: NuGet/login@v1
        id: nuget-login
        with:
          user: ${{ secrets.NUGET_USER }}

      - name: 🚀 Publish to NuGet.org using Trusted Publishing
        run: |
          echo "🚀 Publishing packages to NuGet.org using Trusted Publishing (OIDC)..."

          for package in nuget-packages/*.nupkg; do
            if [ -f "$package" ]; then
              echo "📤 Publishing: $(basename $package)"
              dotnet nuget push "$package" \
                --api-key "${{ steps.nuget-login.outputs.NUGET_API_KEY }}" \
                --source https://api.nuget.org/v3/index.json \
                --skip-duplicate
            fi
          done

          echo "✅ All packages published successfully!"

      - name: 📊 Publication Summary
        run: |
          echo "# 📦 NuGet Publication Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Successfully published to NuGet.org:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Core Authentication" >> $GITHUB_STEP_SUMMARY
          echo "- [IBKR.Api.Authentication ${{ needs.validate.outputs.version }}](https://www.nuget.org/packages/IBKR.Api.Authentication/${{ needs.validate.outputs.version }})" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## NSwag SDK Packages" >> $GITHUB_STEP_SUMMARY
          echo "- [IBKR.Api.NSwag.Contract ${{ needs.validate.outputs.version }}](https://www.nuget.org/packages/IBKR.Api.NSwag.Contract/${{ needs.validate.outputs.version }})" >> $GITHUB_STEP_SUMMARY
          echo "- [IBKR.Api.NSwag.Client ${{ needs.validate.outputs.version }}](https://www.nuget.org/packages/IBKR.Api.NSwag.Client/${{ needs.validate.outputs.version }})" >> $GITHUB_STEP_SUMMARY
          echo "- [IBKR.Api.NSwag.Authentication ${{ needs.validate.outputs.version }}](https://www.nuget.org/packages/IBKR.Api.NSwag.Authentication/${{ needs.validate.outputs.version }})" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Kiota SDK Packages" >> $GITHUB_STEP_SUMMARY
          echo "- [IBKR.Api.Kiota.Contract ${{ needs.validate.outputs.version }}](https://www.nuget.org/packages/IBKR.Api.Kiota.Contract/${{ needs.validate.outputs.version }})" >> $GITHUB_STEP_SUMMARY
          echo "- [IBKR.Api.Kiota.Client ${{ needs.validate.outputs.version }}](https://www.nuget.org/packages/IBKR.Api.Kiota.Client/${{ needs.validate.outputs.version }})" >> $GITHUB_STEP_SUMMARY
          echo "- [IBKR.Api.Kiota.Authentication ${{ needs.validate.outputs.version }}](https://www.nuget.org/packages/IBKR.Api.Kiota.Authentication/${{ needs.validate.outputs.version }})" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## IBKR SDK Packages" >> $GITHUB_STEP_SUMMARY
          echo "- [IBKR.Sdk.Contract ${{ needs.validate.outputs.version }}](https://www.nuget.org/packages/IBKR.Sdk.Contract/${{ needs.validate.outputs.version }})" >> $GITHUB_STEP_SUMMARY
          echo "- [IBKR.Sdk.Client ${{ needs.validate.outputs.version }}](https://www.nuget.org/packages/IBKR.Sdk.Client/${{ needs.validate.outputs.version }})" >> $GITHUB_STEP_SUMMARY
